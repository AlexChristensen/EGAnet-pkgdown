[{"path":"https://r-ega.net/Readme.html","id":null,"dir":"","previous_headings":"","what":"pkgdown ","title":"pkgdown ","text":"{EGAnet} package primary source implementing Exploratory Graph Analysis (EGA) framework R. goal package provide: state---art network psychometrics methods fast, reproducible code beautiful, publication-ready visualizations  Check ’s changed version +2.0.0 Install   Contact Hudson F. Golino  Associate Professor Quantitative Methods  Department Psychology  University Virginia hfg9s@virginia.edu Alexander P. Christensen  Assistant Professor Quantitative Methods  Department Psychology Human Development  Vanderbilt University alexpaulchristensen@gmail.com Support {EGAnet} package currently supported two University Virginia grants, one STAR - Support Transformative Autism Research initiative one Democracy Initiative.","code":"install.packages(\"EGAnet\") if(!\"devtools\" %in% unlist(lapply(.libPaths(), list.files))){   install.packages(\"devtools\") }  devtools::install_github(\"hfgolino/EGAnet\")"},{"path":[]},{"path":"https://r-ega.net/articles/argument-flexibility.html","id":"changing-corr","dir":"Articles","previous_headings":"Passing through auto.correlate","what":"Changing corr","title":"Argument Passing","text":"know whether something changed? general, changes methods show summary output. example, can see Correlations: spearman meaning correlations changed Spearman.","code":"# Load packages library(EGAnet); library(psychTools)  # Use Spearman correlation bfi_ega_spearman <- EGA(bfi[,1:25], corr = \"spearman\", plot.EGA = FALSE)  # Print result summary(bfi_ega_spearman) Model: GLASSO (EBIC with gamma = 0.5) Correlations: spearman Lambda: 0.0703394074817376 (n = 100, ratio = 0.1)  Number of nodes: 25 Number of edges: 122 Edge density: 0.407  Non-zero edge weights:       M    SD    Min   Max  0.041 0.111 -0.240 0.502  ----  Algorithm:  Walktrap  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  4  5  5  5  5  5   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -27.036"},{"path":"https://r-ega.net/articles/argument-flexibility.html","id":"changing-ordinal-categories","dir":"Articles","previous_headings":"Passing through auto.correlate","what":"Changing ordinal.categories","title":"Argument Passing","text":"usually isn’t case want change ordinal.categories argument auto.correlate lower default value 7. argument sets data function consider ordinal (defaults 7 categories). demonstration purposes, ordinal.categories used show arguments EGA passed auto.correlate.","code":"# 5 categories and higher are treated as continuous bfi_ega_continuous <- EGA(bfi[,1:25], ordinal.categories = 4, plot.EGA = FALSE)  # Print result summary(bfi_ega_continuous) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0706980955149606 (n = 100, ratio = 0.1)  Number of nodes: 25 Number of edges: 120 Edge density: 0.400  Non-zero edge weights:       M    SD    Min   Max  0.042 0.108 -0.245 0.504  ----  Algorithm:  Walktrap  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  4  5  5  5  5  5   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -26.924"},{"path":"https://r-ega.net/articles/argument-flexibility.html","id":"passing-through-network-estimation","dir":"Articles","previous_headings":"","what":"Passing through network.estimation","title":"Argument Passing","text":"lambda.min.ratio parameter passed network.estimation EBICglasso.qgraph. parameter output summary (see Lambda:). lambda.min.ratio value used example default qgraph::EBICglasso.","code":"# Change the lambda.min.ratio bfi_ega_qgraph <- EGA(bfi[,1:25], lambda.min.ratio = 0.01, plot.EGA = FALSE)  # Print result summary(bfi_ega_qgraph) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0244632691767234 (n = 100, ratio = 0.01)  Number of nodes: 25 Number of edges: 191 Edge density: 0.637  Non-zero edge weights:       M    SD    Min   Max  0.035 0.104 -0.276 0.572  ----  Algorithm:  Walktrap  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  1  1  3  4  4  4  5  5  3  3  3  3  3   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -22.817"},{"path":"https://r-ega.net/articles/argument-flexibility.html","id":"passing-through-community-detection","dir":"Articles","previous_headings":"","what":"Passing through community.detection","title":"Argument Passing","text":"code shows lot {EGAnet}’s flexibility. First, algorithm changed \"leiden\" switched community.detection function. Second, arguments objective_function resolution_parameter passed igraph::cluster_leiden aren’t even handled {EGAnet}. summary reflects changes: Algorithm: Leiden Constant Potts Model.","code":"# Change the algorithm and its arguments bfi_ega_leiden <- EGA(   bfi[,1:25], algorithm = \"leiden\",   objective_function = \"CPM\", # in {igraph}   resolution_parameter = 0.05, # in {igraph}   plot.EGA = FALSE )  # Print result summary(bfi_ega_leiden) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0764652282008741 (n = 100, ratio = 0.1)  Number of nodes: 25 Number of edges: 117 Edge density: 0.390  Non-zero edge weights:       M    SD    Min   Max  0.046 0.119 -0.269 0.548  ----  Algorithm:  Leiden with Constant Potts Model  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  4  5  5  5  5  5   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -27.335"},{"path":[]},{"path":"https://r-ega.net/articles/argument-flexibility.html","id":"changing-consensus-iter","dir":"Articles","previous_headings":"Passing through community.consensus","what":"Changing consensus.iter","title":"Argument Passing","text":"default, consensus clustering method performs 1000 iterations (see ?consensus.clustering) iterations can changed well method (using consensus.method argument). change also reflected summary output number iterations parentheses.","code":"# More consensus iterations bfi_ega_consensus <- EGA(   bfi[,1:25], algorithm = \"louvain\",   consensus.iter = 10000, plot.EGA = FALSE )  # Print result summary(bfi_ega_consensus) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0764652282008741 (n = 100, ratio = 0.1)  Number of nodes: 25 Number of edges: 117 Edge density: 0.390  Non-zero edge weights:       M    SD    Min   Max  0.046 0.119 -0.269 0.548  ----  Consensus Method: Most Common (10000 iterations) Algorithm: Louvain Order: Higher  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  4  5  5  5  5  5   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -27.335"},{"path":"https://r-ega.net/articles/argument-flexibility.html","id":"changing-order","dir":"Articles","previous_headings":"Passing through community.consensus","what":"Changing order","title":"Argument Passing","text":"order can also changed. \"lower\" order used Hierarchical EGA (hierEGA; Jiménez et al., 2023) method can replicated using EGA specifying order argument.","code":"# Get lower order result bfi_ega_lower <- EGA(   bfi[,1:25], algorithm = \"louvain\",   order = \"lower\", plot.EGA = FALSE )  # Print result summary(bfi_ega_lower) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0764652282008741 (n = 100, ratio = 0.1)  Number of nodes: 25 Number of edges: 117 Edge density: 0.390  Non-zero edge weights:       M    SD    Min   Max  0.046 0.119 -0.269 0.548  ----  Consensus Method: Most Common (1000 iterations) Algorithm: Louvain Order: Lower  Number of communities:  6  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  5  5  5  6  6  6  6  6   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -24.718"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"set-up-transformers-nlp-and-genius-api","dir":"Articles","previous_headings":"","what":"Set Up Transformers NLP and Genius API","title":"EGA + Transformers NLP","text":"get started, {text} package needs installed set (see {text} installation instructions getting set ). set , load {text}: ’ll use another package called {simpleRgenius} scrape lyrics Genius lyrics website. package needs installed GitHub loaded: installing {simpleRgenius}, ’ll need set API Genius (necessary reproduce example). can follow instructions .","code":"library(text) # Install {devtools} (if necessary) if(!\"devtools\" %in% unlist(lapply(.libPaths(), list.files))){   install.packages(\"devtools\") }  # Install {simpleRgenius} devtools::install_github(\"AlexChristensen/simpleRgenius\")  # Load {simpleRgenius} library(simpleRgenius)"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"scraping-lyrics","dir":"Articles","previous_headings":"","what":"Scraping Lyrics","title":"EGA + Transformers NLP","text":"point, loaded {text} {simpleRgenius} well imported Genius API R’s environment (following along reproducing code). next step get songs Taylor Swift’s Midnights album:","code":"# First, let's get all of the song names midnights_songs <- c(   \"Lavender Haze\", \"Maroon\", \"Anti-Hero\",   \"Snow On The Beach\", \"You're On Your Own, Kid\",   \"Midnight Rain\", \"Question...?\", \"Vigilante Shit\",   \"Bejeweled\", \"Labyrinth\", \"Karma\",   \"Sweet Nothing\", \"Mastermind\",    \"The Great War\", \"Bigger Than The Whole Sky\",   \"Paris\", \"High Infidelity\", \"Glitch\",   \"Would've, Could've, Should've\",   \"Dear Reader\" )  # Next, let's get the lyrics midnights_lyrics <- get_lyrics(   artist_name = \"Taylor Swift\",   song_names = midnights_songs )"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"perform-zero-shot-classification","dir":"Articles","previous_headings":"","what":"Perform Zero-shot Classification","title":"EGA + Transformers NLP","text":"Next, zero-shot classification can performed. many different models huggingface choose . ’ll use Cross Encoder’s base RoBERTa model:","code":"midnights_zero <- textZeroShot(   sequences = midnights_lyrics$Lyric, # text   candidate_labels = c(     \"anxiety\", \"depression\", \"happiness\",     \"heartbreak\", \"love\", \"relationships\",     \"rebellious\", \"revenge\", \"romance\"   ),   # theme (same as sentiment analysis)   model = \"cross-encoder/nli-roberta-base\",   # model to use   multi_label = TRUE   # whether multiple labels can be true )"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"reformat-zero-shot-output-into-long-format","dir":"Articles","previous_headings":"","what":"Reformat Zero-shot Output into Long Format","title":"EGA + Transformers NLP","text":"analyze data {EGAnet}, data need wide format. first, let’s basic NLP visualization. following code (1) reformat data long format, (2) remove non-existent labels, (3) add back song names, (4) summarize lyrics song:","code":"# Load {tidyverse} library(tidyverse)  # Wrangle the data midnights_long <- midnights_zero %>%   pivot_longer(     cols = starts_with(\"labels_\") | starts_with(\"scores_\"),     # Obtain columns with labels and scores     names_to = c(\".value\", \"label_number\"),     # Push the names to new columns     names_pattern = \"(labels|scores)_(x_.*)\"     # Set up the patterning for labels and scores   )  # Remove NAs midnights_long <- na.omit(midnights_long)  # Initialize vector for song names song_names <- character(length = nrow(midnights_long))  # Create loop to store song names for(i in 1:nrow(midnights_long)){      # Get matches for lyric   lyric_match <- min(     match( # Use `min` to get only one index       midnights_long$sequence[i],       midnights_lyrics$Lyric     )   )      # Get song name   song_names[i] <- midnights_lyrics$Song[lyric_match]    }  # Create vector to add songs back midnights_long$song_name <- song_names  # Summarize by song midnights_summary <- midnights_long %>%   group_by(song_name, labels) %>%   summarize(     Probability = mean(       scores, na.rm = TRUE     )   )"},{"path":[]},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"keep-order-of-songs","dir":"Articles","previous_headings":"Basic NLP Visualization","what":"Keep Order of Songs","title":"EGA + Transformers NLP","text":"","code":"# Before visualizing... ## Create factor to keep songs in order midnights_summary$song_name <- factor(   midnights_summary$song_name,   levels = midnights_songs )"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"bar-plot-by-song","dir":"Articles","previous_headings":"Basic NLP Visualization","what":"Bar Plot by Song","title":"EGA + Transformers NLP","text":"","code":"# Visualize using histogram ggplot(   data = midnights_summary,   aes(x = Probability, y = labels, fill = labels) ) +   facet_wrap(~song_name) +   geom_histogram(stat = \"identity\") +   labs(     x = \"Probability\",     y = \"Sentiment\",     title = \"Midnights Album Sentiment\"   ) +   scale_y_discrete(limits = rev) + # reverse order   theme( # basic theme     panel.background = element_blank(),     legend.title = element_blank(),     plot.title = element_text(size = 16, hjust = 0.5),     axis.line = element_line(linewidth = 1),     axis.text = element_text(size = 12),     axis.title = element_text(size = 14),     strip.text = element_text(size = 10),     legend.text = element_text(size = 10),     axis.text.x = element_text(angle = 45, hjust = 1)   )"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"album-arch-of-relationships-theme","dir":"Articles","previous_headings":"Basic NLP Visualization","what":"Album Arch of “relationships” Theme","title":"EGA + Transformers NLP","text":"","code":"# Visualize using line plot midnights_summary %>%   mutate( # focus on relationships across songs     alpha = ifelse(labels == \"relationships\", 1, 0.25)   ) %>%   ggplot(     aes(       x = song_name, y = Probability, group = labels,        color = labels, alpha = alpha     )    ) +   geom_line(linewidth = 1) +   labs(     x = \"Song\",     y = \"Probability\",     title = \"Midnights Album Arch\"   ) +   theme( # basic theme     panel.background = element_blank(),     legend.title = element_blank(),     plot.title = element_text(size = 16, hjust = 0.5),     axis.line = element_line(linewidth = 1),     axis.text = element_text(size = 12),     axis.title = element_text(size = 14),     legend.text = element_text(size = 10),     legend.position = \"bottom\",     legend.key = element_rect(fill = NA), # remove grey box     axis.text.x = element_text(angle = 45, hjust = 1)   ) +   scale_alpha_identity(guide = \"none\")"},{"path":[]},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"reformat-lyrics-into-wide-format","dir":"Articles","previous_headings":"Get Dimensionality of Album","what":"Reformat Lyrics into Wide Format","title":"EGA + Transformers NLP","text":"","code":"# Make each sentiment a column with values midnights_wide <- midnights_long %>%   pivot_wider(     names_from = \"labels\",     values_from = \"scores\"   ) %>%   group_by(song_name, sequence) %>%   summarize(      anxiety = sum(anxiety, na.rm = TRUE), # CHANGE!     depression = sum(depression, na.rm = TRUE),     happiness = sum(happiness, na.rm = TRUE),     heartbreak = sum(heartbreak, na.rm = TRUE),     love = sum(love, na.rm = TRUE),     relationships = sum(relationships, na.rm = TRUE),     rebellious = sum(rebellious, na.rm = TRUE),     revenge = sum(revenge, na.rm = TRUE),     romance = sum(romance, na.rm = TRUE)   )"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"perform-ega","dir":"Articles","previous_headings":"Get Dimensionality of Album","what":"Perform EGA","title":"EGA + Transformers NLP","text":"","code":"# Load {EGAnet} library(EGAnet)  # Perform EGA midnights_ega <- EGA(midnights_wide[,-c(1:2)]) # Get summary summary(midnights_ega) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0860989626435201 (n = 100, ratio = 0.1)  Number of nodes: 9 Number of edges: 21 Edge density: 0.583  Non-zero edge weights:       M    SD    Min   Max  0.130 0.183 -0.077 0.486  ----  Algorithm:  Walktrap  Number of communities:  2        anxiety    depression     happiness    heartbreak          love              1             2             2             1             2  relationships    rebellious       revenge       romance              2             1             1             2   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -5.021"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"check-stability-of-ega","dir":"Articles","previous_headings":"Get Dimensionality of Album","what":"Check Stability of EGA","title":"EGA + Transformers NLP","text":"Overall, dimensions relative stable. depression theme goes first second dimension (roughly positive negative valence themes, respectively).","code":"# Perform bootstrap EGA midnights_boot <- bootEGA(midnights_wide[,-c(1:2)], seed = 12) # Get summary summary(midnights_boot) Model: GLASSO (EBIC) Correlations: auto Algorithm:  Walktrap Unidimensional Method:  Louvain  ----  EGA Type: EGA  Bootstrap Samples: 500 (Parametric)                                         2     3 Frequency:  0.996 0.004  Median dimensions: 2 [1.88, 2.12] 95% CI # Perform dimension stability dimensionStability(midnights_boot) EGA Type: EGA  Bootstrap Samples: 500 (Parametric)  Proportion Replicated in Dimensions:        anxiety    depression     happiness    heartbreak          love          1.000         0.528         1.000         1.000         1.000  relationships    rebellious       revenge       romance          0.998         0.998         0.996         1.000   ----  Structural Consistency:      1     2  0.996 0.558"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"invariance-between-the-taylor-swift-and-midnights-albums","dir":"Articles","previous_headings":"","what":"Invariance between the Taylor Swift and Midnights Albums","title":"EGA + Transformers NLP","text":"Taking analysis step , themes can analyzed configural metric invariance determine whether thematic differences lyrics Taylor Swift’s first recent albums. analysis mimics analyses might performed using text data intervention therapy study (e.g., pre/post, experiment/control). zero-shot classification analyses (including Cross Encoder RoBERTa model) performed using themes (.e., classes).","code":""},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"set-up-for-invariance","dir":"Articles","previous_headings":"Invariance between the Taylor Swift and Midnights Albums","what":"Set Up for Invariance","title":"EGA + Transformers NLP","text":"Check mean probabilities theme across albums Get p-values t-tests theme Based means, differences happiness rebellious. get set invariance, groups need created:","code":"# Look at the mean probabilities of both # the Taylor Swift and Midnights albums colMeans(swift_wide[,-c(1:2)]) anxiety    depression     happiness    heartbreak          love     0.29990807    0.08411358    0.17911406    0.43607021    0.18423720  relationships    rebellious       revenge       romance     0.43535133    0.63489752    0.34377482    0.26128967 colMeans(midnights_wide[,-c(1:2)]) anxiety    depression     happiness    heartbreak          love     0.26287701    0.06501335    0.09913873    0.38547405    0.14203493  relationships    rebellious       revenge       romance     0.44492999    0.50933669    0.34219791    0.20906364 sapply(   colnames(swift_wide)[-c(1:2)], function(theme){     t.test(       swift_wide[,theme], midnights_wide[,theme],        var.equal = TRUE     )$p.value   } ) anxiety    depression     happiness    heartbreak          love    0.297232759   0.131226252   0.020208667   0.273479141   0.260503614  relationships    rebellious       revenge       romance    0.808364926   0.003466896   0.965060122   0.169222094 # Set up groups groups <- c(   rep(\"Taylor Swift\", nrow(swift_wide)),   rep(\"Midnights\", nrow(midnights_wide)) )  # Combine datasets combined_wide <- rbind(   swift_wide[,-c(1:2)], midnights_wide[,-c(1,2)] )"},{"path":"https://r-ega.net/articles/ega-nlp.html","id":"perform-invariance","dir":"Articles","previous_headings":"Invariance between the Taylor Swift and Midnights Albums","what":"Perform Invariance","title":"EGA + Transformers NLP","text":"Based invariance, configural invariance metric non-invariance anxiety, depression, rebellious themes. anxiety depression themes greater connectivity Taylor Swift album rebellious themes greater connectivity Midnights album. essence, two albums captured relatively different negative themes.","code":"# Perform invariance ega_invariance <- invariance(   data = combined_wide,   groups = groups,   seed = 12 )  # View and plot results ega_invariance; plot(ega_invariance)  [1;mInvariance Results [0m   [4;m Comparison: Taylor Swift vs Midnights [0m                Membership Difference     p  p_BH sig                Direction anxiety                1      0.286 0.014 0.042   * Taylor Swift > Midnights depression             1      0.319 0.006 0.027  ** Taylor Swift > Midnights heartbreak             1     -0.121 0.276 0.497                              rebellious             1     -0.256 0.006 0.027  ** Taylor Swift < Midnights revenge                1      0.025 0.752 0.752                              happiness              2     -0.084 0.532 0.752                              love                   2     -0.122 0.262 0.497                              relationships          2      0.032 0.612 0.752                              romance                2      0.037 0.736 0.752                              ---- Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 'n.s.' 1"},{"path":"https://r-ega.net/articles/ega.html","id":"about-the-dataset","dir":"Articles","previous_headings":"","what":"About the Dataset","title":"Exploratory Graph Analysis","text":"25 personality self report items taken International Personality Item Pool (ipip.ori.org) included part Synthetic Aperture Personality Assessment (SAPA) web based personality assessment project. data 2800 subjects included demonstration set scale construction, factor analysis, Item Response Theory analysis. Three additional demographic variables (sex, education, age) also included. Description taken ?psychTools::bfi","code":""},{"path":"https://r-ega.net/articles/ega.html","id":"determine-redundancies","dir":"Articles","previous_headings":"","what":"Determine Redundancies","title":"Exploratory Graph Analysis","text":"Unique Variable Analysis (Christensen, Garrido, & Golino, 2023) uses weighted topological overlap measure (Nowick et al., 2009; see ?wto) estimated network. Values greater 0.25 determined considerable local dependence (.e., redundancy) handled. Based output , one pair variables cut-(quite substantially): Get angry easily. Get irritated easily. (ω\\omega = 0.431). default, UVA remove redundant variables (ω≥\\omega \\ge 0.25) except one based following rules: doublets (two variables): variable lowest maximum weighted topological overlap variables (one redundant ) retained removed triplets (three variables): variable highest mean weighted topological overlap variables redundant one another retained others removed variables removed automated process can viewed using: Moving forward, ’ll work reduced dataset obtained UVA function.","code":"# Load packages library(EGAnet); library(psychTools)  # Perform Unique Variable Analysis bfi_uva <- UVA(   data = bfi[,1:25],   key = as.character(bfi.dictionary$Item[1:25])   # Optional: provide item descriptions )  # Print results bfi_uva Variable pairs with wTO > 0.30 (large-to-very large redundancy)              node_i                node_j   wto  Get angry easily. Get irritated easily. 0.431  ----  Variable pairs with wTO > 0.25 (moderate-to-large redundancy)  ----  Variable pairs with wTO > 0.20 (small-to-moderate redundancy)                                      node_i                          Don't talk a lot.                    Am exacting in my work.  Am indifferent to the feelings of others.            Do things in a half-way manner.                Know how to comfort others.                          Get angry easily.                 Have frequent mood swings.          Inquire about others' well-being.                                 node_j   wto  Find it difficult to approach others. 0.226  Continue until everything is perfect. 0.225      Inquire about others' well-being. 0.219                         Waste my time. 0.209              Make people feel at ease. 0.207             Have frequent mood swings. 0.205                       Often feel blue. 0.204            Know how to comfort others. 0.203 bfi_uva$keep_remove $keep [1] \"Get irritated easily.\"  $remove [1] \"Get angry easily.\""},{"path":"https://r-ega.net/articles/ega.html","id":"perform-ega","dir":"Articles","previous_headings":"","what":"Perform EGA","title":"Exploratory Graph Analysis","text":"redundancies handled, EGA ready applied data:  reduced data, five dimensions recovered bfi dataset (consistent five factor model personality). can obtain summary output: summary contains several things interest. First, tells us model used estimate network (\"glasso\") parameters used model gamma (γ=0.5\\gamma = 0.5) lambda (λ=0.0597\\lambda = 0.0597). Second, descriptives network number nodes, edges, edge density, descriptive statistics edges. Third, tells us community detection algorithm used, number communities (dimensions), variable’s membership. Fourth, unidimensional method check (meaning unidimensional). Finally, Total Entropy Fit Index (tefi) provided, can used model comparison (see Golino et al., 2021). change appearance EGA plot, see Plotting","code":"bfi_ega <- EGA(data = bfi_uva$reduced_data) summary(bfi_ega) Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0597096451199323 (n = 100, ratio = 0.1)  Number of nodes: 24 Number of edges: 125 Edge density: 0.453  Non-zero edge weights:       M    SD    Min   Max  0.041 0.112 -0.270 0.396  ----  Algorithm:  Walktrap  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  5  5  5  5  5   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -24.989"},{"path":"https://r-ega.net/articles/ega.html","id":"check-stability-of-ega","dir":"Articles","previous_headings":"","what":"Check Stability of EGA","title":"Exploratory Graph Analysis","text":"Bootstrap EGA (Christensen & Golino, 2021) performs parametric (default) resampling procedure determine robustness empirical EGA analysis (using 500 iterations default). plot output bootEGA median network structure representing median value pairwise partial correlation across bootstraps. obtaining median value pairwise partial correlation, community detection algorithm applied (\"walktrap\" default). example, median structure matches empirical structure:  Although result common, means necessary. community detection algorithm applied adhoc median network structure, possible number content communities match empirical structure. possibility happens time--time mean anything wrong analysis instead might hint instability structure. Following basic descriptive statistics bootstrap analysis often informative: Much like empirical procedure, first information estimation methods algorithms used. , information bootstrap procedure including frequent number communities observed median number communities (95% confidence intervals). example, structure quite stable can taken preliminary evidence robust structure. frequency number communities used main evidence robustness. Instead, dimension item stability obtained better understand details.  output dimensionStability produces plot often variable replicating empirical structure across bootstraps. summary statistics produced also relay information well structural consistency. Structural consistency defined extent empirically derived dimension exactly (.e., identical variable composition) recovered replicate bootstrap samples (Christensen, Golino, & Silvia, 2020). general, values structural consistency item stability greater 0.70-0.75 reflect sufficient stability (Christensen & Golino, 2021). results demonstrate five dimension structure ’ve identified quite robust.","code":"# Perform Bootstrap EGA bfi_boot <- bootEGA(   data = bfi_uva$reduced_data,   seed = 1 # set seed for reproducibility ) bfi_compare <- compare.EGA.plots(   bfi_ega, bfi_boot,   labels = c(\"Empirical\", \"Bootstrap\") ) summary(bfi_boot) Model: GLASSO (EBIC) Correlations: auto Algorithm:  Walktrap Unidimensional Method:  Louvain  ----  EGA Type: EGA  Bootstrap Samples: 500 (Parametric)                                         4     5 Frequency:  0.046 0.954  Median dimensions: 5 [4.59, 5.41] 95% CI dimensionStability(bfi_boot) EGA Type: EGA  Bootstrap Samples: 500 (Parametric)  Proportion Replicated in Dimensions:     A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2    E3  1.000 1.000 1.000 0.998 1.000 1.000 1.000 1.000 1.000 1.000 0.998 0.998 0.998     E4    E5    N2    N3    N4    N5    O1    O2    O3    O4    O5  0.998 0.952 1.000 1.000 1.000 1.000 0.956 0.956 0.956 0.956 0.956   ----  Structural Consistency:      1     2     3     4     5  0.998 1.000 0.958 1.000 0.956"},{"path":"https://r-ega.net/articles/errors.html","id":"range-error","dir":"Articles","previous_headings":"","what":"“range” Error","title":"Errors","text":"range error function receives data (numeric values) outside expected range values. error frequently occurs polychoric.matrix auto.correlate underlying C code. set example, ’ll recode optimism dataset 5-point Likert scale -2 2 rather 1 5: error specifies issue occurred polychoric.matrix function. error says data minimum value -2 dataset function expects minimum value 0. Without getting bogged details, polychoric.matrix function fast efficient computing polychoric correlations, order make , needs take advantage clever indexing. C, indices start 0, values lower 0 means data need re-indexed lowest value 0 (highest value, applicable, 11). fix issue, can recode data:  recoding lowest value 0, error goes away EGA executes successfully.","code":"# Load {EGAnet} library(EGAnet)  # Recode the optimism dataset optimism_recoded <- apply(optimism, 2, function(x){x - 3})  # Estimate EGA ega_optimism <- EGA(data = optimism_recoded) Error in \"polychoric.matrix\" : Minimum value of 'data' (-2) does not match expected range(s). Values must range between: '0' and '11'  For more details on how to fix this error, see: https://r-ega.net/articles/errors.html#range-error # Get the minimum value minimum_value <- min(optimism_recoded, na.rm = TRUE)  # Print value minimum_value [1] -2 # Recode the values to start at zero optimism_fixed <- apply(   optimism_recoded, 2, function(x){     x + abs(minimum_value)   } )  # Estimate EGA ega_optimism <- EGA(data = optimism_fixed)"},{"path":"https://r-ega.net/articles/errors.html","id":"class-error","dir":"Articles","previous_headings":"","what":"“class” Error","title":"Errors","text":"class error function receives class expect: genTEFI function expects hierEGA class received EGA class object. error means wrong object class used function.","code":"# Estimate EGA ega_optimism <- EGA(data = optimism)  # Compute the Generalized Total Entropy Fit Index genTEFI(ega_optimism) Error in \"genTEFI\" : Input into 'data' is an object with 'EGA' class(es). Input is expected to be 'hierEGA' class(es)  For more details on how to fix this error, see: https://r-ega.net/articles/errors.html#class-error"},{"path":"https://r-ega.net/articles/errors.html","id":"object-error","dir":"Articles","previous_headings":"","what":"“object” Error","title":"Errors","text":"object error function receives object designed handle: , EGA expects receive matrix, data frame, tibble input list. data need converted one three object types proceeding analysis.","code":"# Estimate EGA using a list object opt.hier <- EGA(data = as.list(optimism)) Error in \"EGA\" : Input into 'data' is a 'list' object. Input is expected to be 'matrix', 'data.frame', 'tibble' object  For more details on how to fix this error, see: https://r-ega.net/articles/errors.html#object-error"},{"path":"https://r-ega.net/articles/errors.html","id":"typeof-error","dir":"Articles","previous_headings":"","what":"“typeof” Error","title":"Errors","text":"typeof error function receives data expected type: example, EGA expected input argument plot.EGA logical (TRUE FALSE) instead got character \"TRUE\". error tells input expected logical.","code":"# Estimate EGA using a character TRUE opt.hier <- EGA(data = optimism, plot.EGA = \"TRUE\") Error in \"EGA\" : Input into 'plot.EGA' is 'character' type. Input is expected to be 'logical' type  For more details on how to fix this error, see: https://r-ega.net/articles/errors.html#typeof-error"},{"path":"https://r-ega.net/articles/errors.html","id":"length-error","dir":"Articles","previous_headings":"","what":"“length” Error","title":"Errors","text":"length error function receives input longer (shorter) expected: time plot.EGA argument correct type input used (logical) many input. (2) says argument received two inputs expected 1.","code":"# Estimate EGA using two TRUEs opt.hier <- EGA(data = optimism, plot.EGA = c(TRUE, TRUE)) Error in \"EGA\" : Length of 'plot.EGA' (2) does not match expected length(s). Length must be: '1'  For more details on how to fix this error, see: https://r-ega.net/articles/errors.html#length-error"},{"path":"https://r-ega.net/articles/errors.html","id":"none-of-the-above","dir":"Articles","previous_headings":"","what":"None of the Above","title":"Errors","text":"’ve made far none errors apply, submit issue GitHub. Make sure provide minimal reproducible example (like demonstrated ) send data necessary expedite process getting error fixed.","code":""},{"path":"https://r-ega.net/articles/modular-approach.html","id":"alternative-networks","dir":"Articles","previous_headings":"","what":"Alternative Networks","title":"Using External Networks (and external packages)","text":"many different packages available estimate psychometric networks. One common package {bootnet}. bootnet::estimateNetwork offers many different methods estimate networks. \"ggmModSelect\" approach used example. network estimated, modular approach estimating EGA workflow can used. workflow ’s used internally EGA function. network coming {igraph} must converted using igraph2matrix function (e.g., ega_network <- igraph2matrix(igraph_network)). network matrix data frame object can used {EGAnet} functions like output estimateNetwork.","code":"# Load packages library(EGAnet); library(bootnet)  # Load data data <- wmt2[,7:24]  # Estimate network stepwise_result <- estimateNetwork(   data = data, default = \"ggmModSelect\", stepwise = TRUE )"},{"path":"https://r-ega.net/articles/modular-approach.html","id":"check-for-unidimensionality","dir":"Articles","previous_headings":"Alternative Networks","what":"Check for Unidimensionality","title":"Using External Networks (and external packages)","text":"standard unidimensional check uses Louvain Louvain algorithm zero-order correlation matrix (Christensen, 2023). output include memberships regardless whether data detected unidimensional. output, number communities 2 therefore unidimensional. number communities 1, need proceed multidimensional estimation.","code":"# Perform unidimensionality check unidimensional_membership <- community.unidimensional(data)  # Print unidimensional_membership Algorithm:  Louvain  Number of communities:  2   wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13      1     1     1     1     1     2     2     2     2     1     2     2     2  wmt14 wmt15 wmt16 wmt17 wmt18      2     2     2     2     2"},{"path":"https://r-ega.net/articles/modular-approach.html","id":"estimate-multidimensionality","dir":"Articles","previous_headings":"Alternative Networks","what":"Estimate Multidimensionality","title":"Using External Networks (and external packages)","text":"multidimensional estimation, estimated network used input. algorithm can set using number different algorithms (see ?community.detection) default use Walktrap algorithm. output, Walktrap estimates 2 communities.","code":"# Estimate multidimensionality multidimensional_membership <- community.detection(   stepwise_result$graph, algorithm = \"walktrap\" )  # Print multidimensional_membership Algorithm:  Walktrap  Number of communities:  2   wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13      1     1     1     1     1     1     2     2     2     1     2     2     2  wmt14 wmt15 wmt16 wmt17 wmt18      2     2     2     2     2"},{"path":"https://r-ega.net/articles/modular-approach.html","id":"obtain-final-memberships","dir":"Articles","previous_headings":"Alternative Networks","what":"Obtain Final Memberships","title":"Using External Networks (and external packages)","text":"shortcut obtain final memberships used EGA provided :","code":"wc <- EGAnet:::swiftelse(     # Check for whether unidimensional membership should be used     EGAnet:::unique_length(unidimensional_membership) == 1,     unidimensional_membership, multidimensional_membership     # Otherwise, use multidimensional membership   )"},{"path":"https://r-ega.net/articles/modular-approach.html","id":"plot","dir":"Articles","previous_headings":"Alternative Networks","what":"Plot","title":"Using External Networks (and external packages)","text":"order plot using {EGAnet}, network memberships need set EGA class object:","code":"# Set up EGA object ega_object <- list(   network = stepwise_result$graph,   wc = wc )  # Set `EGA` class class(ega_object) <- \"EGA\"  # Plot plot(ega_object)"},{"path":"https://r-ega.net/articles/modular-approach.html","id":"modularity","dir":"Articles","previous_headings":"Alternative Networks","what":"Modularity","title":"Using External Networks (and external packages)","text":"Modularity can also computed using estimated network appropriate memberships.","code":"modularity(stepwise_result$graph, wc) [1] 0.204308"},{"path":"https://r-ega.net/articles/modular-approach.html","id":"alternative-similarity-measures","dir":"Articles","previous_headings":"","what":"Alternative Similarity Measures","title":"Using External Networks (and external packages)","text":"default, {EGAnet} uses auto.correlate function compute appropriate correlations set pairwise variables. measures might need used {EGAnet} functions.","code":""},{"path":"https://r-ega.net/articles/modular-approach.html","id":"cosine-similarity","dir":"Articles","previous_headings":"Alternative Similarity Measures","what":"Cosine Similarity","title":"Using External Networks (and external packages)","text":"common example natural language processing cognitive science cosine similarity common association measure two terms. , ’ll show semantic network example {SemNeT} package. data participants performed verbal fluency task generated animals 1 minute. row represents participant column represents animal. 1 animal participant provided; 0 animal participant provide. animals_cosine object symmetric matrix represents cosine similarity animal. use cosine similarity matrix (alternative similarity matrix) {EGAnet} function, n number cases must set:","code":"# Load packages library(EGAnet); library(SemNeT)  # Compute cosine similarity animals_cosine <- similarity(open.binary, method = \"cosine\") # Compute EGA animals_ega <- EGA(   # Arguments for `EGA`   animals_cosine, n = nrow(open.binary), model = \"TMFG\",   # Arguments for `plot`   node.size = 4, label.size = 3, edge.size = 2 )"},{"path":"https://r-ega.net/articles/plotting.html","id":"basic-plot","dir":"Articles","previous_headings":"","what":"Basic Plot","title":"Plotting with {EGAnet}","text":"","code":"# Load necessary packages library(EGAnet); library(GGally); library(ggplot2)  # Estimate EGA ega.wmt <- EGA(wmt2[,7:24], plot.EGA = FALSE)  # Plot plot(ega.wmt)"},{"path":[]},{"path":"https://r-ega.net/articles/plotting.html","id":"change-names","dir":"Articles","previous_headings":"Legend","what":"Change Names","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt, legend.names = c(\"Dimension 1\", \"Dimension 2\"))"},{"path":"https://r-ega.net/articles/plotting.html","id":"remove-legend","dir":"Articles","previous_headings":"Legend","what":"Remove legend","title":"Plotting with {EGAnet}","text":"Handling legend title text can done using standard ?ggplot2::theme arguments","code":"plot(ega.wmt) + theme(legend.position = \"none\")"},{"path":[]},{"path":"https://r-ega.net/articles/plotting.html","id":"basic-title","dir":"Articles","previous_headings":"Title","what":"Basic Title","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt) + ggtitle(\"EGA Title\")"},{"path":"https://r-ega.net/articles/plotting.html","id":"adjusted-title-centered-larger-size-bold","dir":"Articles","previous_headings":"Title","what":"Adjusted Title (centered, larger size, bold)","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt) +    ggtitle(\"Better EGA Title\") +   theme(plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5))"},{"path":"https://r-ega.net/articles/plotting.html","id":"layout","dir":"Articles","previous_headings":"","what":"Layout","title":"Plotting with {EGAnet}","text":"available layout options, see ?sna::gplot.layout. Remove gplot.layout. use layout (e.g., gplot.layout.circle = layout = \"circle\")","code":""},{"path":"https://r-ega.net/articles/plotting.html","id":"circle","dir":"Articles","previous_headings":"Layout","what":"Circle","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt, layout = \"circle\")"},{"path":"https://r-ega.net/articles/plotting.html","id":"eigen","dir":"Articles","previous_headings":"Layout","what":"Eigen","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt, layout = \"eigen\")"},{"path":[]},{"path":"https://r-ega.net/articles/plotting.html","id":"colors","dir":"Articles","previous_headings":"Nodes","what":"Colors","title":"Plotting with {EGAnet}","text":"Change Colors Using Color Palette  Change Colors Using HEX Codes  quick color palette ideas, check color palette generator","code":"plot(ega.wmt, color.palette = \"blue.ridge2\") plot(ega.wmt, node.color = c(\"#F5815A\", \"#47BCC9\"))"},{"path":"https://r-ega.net/articles/plotting.html","id":"size","dir":"Articles","previous_headings":"Nodes","what":"Size","title":"Plotting with {EGAnet}","text":"Change Size based Node Strength","code":"plot(ega.wmt, node.size = 12) plot(ega.wmt, node.size = colSums(ega.wmt$network)^2 * 16)"},{"path":[]},{"path":"https://r-ega.net/articles/plotting.html","id":"size-1","dir":"Articles","previous_headings":"Edges","what":"Size","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt, edge.size = 12)"},{"path":"https://r-ega.net/articles/plotting.html","id":"transparency","dir":"Articles","previous_headings":"Edges","what":"Transparency","title":"Plotting with {EGAnet}","text":"","code":"plot(ega.wmt, edge.alpha = 0.1)"},{"path":"https://r-ega.net/articles/plotting.html","id":"colors-and-line-type","dir":"Articles","previous_headings":"Edges","what":"Colors and Line Type","title":"Plotting with {EGAnet}","text":"","code":"plot(   ega.wmt, edge.alpha = 1,   edge.lty = c( # line type     \"dashed\", # positive edge first     \"solid\" # negative edge second   ),   edge.color = c( # color     \"pink\", # positive edges first     \"black\" # negative edges second   ) )"},{"path":"https://r-ega.net/articles/plotting.html","id":"positive-only","dir":"Articles","previous_headings":"Edges","what":"Positive Only","title":"Plotting with {EGAnet}","text":"","code":"plot(   ega.wmt,   edge.color = c(     \"darkgreen\", # positive edges (default color)     \"white\" # negative edges second   ) )"},{"path":"https://r-ega.net/articles/plotting.html","id":"negative-only","dir":"Articles","previous_headings":"Edges","what":"Negative Only","title":"Plotting with {EGAnet}","text":"","code":"plot(   ega.wmt, edge.alpha = 1, # used to increase visibility    edge.color = c(     \"white\", # positive edges first     \"red\" # negative edges (default color)   ) )"},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"prng-in-eganet","dir":"Articles","previous_headings":"","what":"PRNG in {EGAnet}","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"decision use alternative PRNG {EGAnet} based three aims: (1) {EGAnet}’s PRNG results reproducible without affecting R’s PRNG, (2) statistical quality, (3) speed. algorithms used {EGAnet} open-source available C. seeds set C, affect PRNG R. bottom line: scripts {EGAnet} PRNG functions change PRNG R, keeping code reproducible regardless whether {EGAnet} PRNG functions remain script.","code":""},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"permutation-bootstrap-and-random-uniform","dir":"Articles","previous_headings":"PRNG in {EGAnet}","what":"Permutation, Bootstrap, and Random Uniform","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"xoshiro256++ (Blackman & Vigna, 2021) algorithm PRNG {EGAnet}. algorithm used wherever random numbers generated: permutation, pre-generating seeds (see Reproducibility), bootstrap resampling, generating uniform values 0 1 used random normal generation. xoshiro256++ robust generator creators claiming (verifying, see repeat flaws1, 2) passes known tests PRNG (including tests Mersenne Twister algorithms fail). Besides robust statistical quality, xoshiro256++ fast. show speed, benchmark comparison sample, sample.int (simpler, stricter version sample), equivalent function using xoshiro256++ PRNG performed. setup used 500 repetitions \"block\" order meaning iterations one method performed another. settings mirror default usage bootEGA. number values shuffled without replacement (N) manipulated power 10. ’s comparison: N = 10 N = 100 N = 1000 N = 10000 Focusing median values, pattern becomes clear: xoshiro256++ 2-6x faster base R’s sample sample.int.","code":"Unit: microseconds          expr min    lq     mean median    uq    max neval cld  xoshiro256++ 1.8 1.901 2.046578  1.902 2.100 17.701   500 a          sample 4.2 4.401 4.802186  4.501 4.801 43.700   500  b     sample.int 3.1 3.302 3.620432  3.501 3.801  7.102   500   c Unit: microseconds          expr   min    lq      mean median     uq    max neval cld  xoshiro256++ 2.501 2.602  3.004564 2.7010 2.9010 32.001   500 a          sample 8.302 8.951 10.678220 9.3000 9.8005 42.601   500  b     sample.int 7.200 7.702  8.519796 8.1005 8.4020 25.300   500   c Unit: microseconds          expr    min      lq      mean median     uq     max neval cld  xoshiro256++  8.301  8.6010  9.304808  8.801  9.101  60.201   500 a          sample 47.301 49.2505 51.768590 49.800 50.401 105.800   500  b     sample.int 43.801 45.6010 49.985602 46.301 47.251 185.001   500   c Unit: microseconds          expr     min       lq     mean   median       uq       max neval cld  xoshiro256++  70.501  73.7015 101.6722  75.3010  98.3010  8055.401   500  a         sample 468.602 495.4510 519.5600 499.0000 504.0510 10295.201   500   b    sample.int 439.401 460.3020 483.3456 463.9015 469.8515  8857.901   500    c"},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"random-normal","dir":"Articles","previous_headings":"PRNG in {EGAnet}","what":"Random Normal","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"Ziggurat method (Marsaglia & Tsang, 2000) fast robust method generate random normal data (Thomas et al., 2007). Dirk Eddelbuettel fantastic write-approach C++ implementation {RcppZiggurat}, details provided . Eddelbuettel compares write-, different PRNG can used Ziggurat method (including Mersenne Twister; Leong et al., 2005). {EGAnet}, xoshiro256++ used, supplying fast statistically robust random uniform values Ziggurat method. conditions benchmark comparison sample functions performed generate random normal data Ziggurat method. comparison performed {EGAnet}’s Ziggurat, {RcppZiggurat}’s zrnorm, base R’s rnorm. ’s comparison: N = 10 N = 100 N = 1000 N = 10000 Focusing median values, {EGAnet}’s implementation starts slowest generating 10 values. N increases, {EGAnet}’s Ziggurat keeps pace {RcppZiggurat}’s implementation outpaces rnorm 2-6x. gap {RcppZiggurat} {EGAnet} starts widen N becomes greater 1000000 (median = 5.32 5.70 milliseconds, respectively). practice, speed difference hardly noticeable.","code":"Unit: nanoseconds          expr  min   lq     mean median   uq   max neval cld        EGAnet 1200 1301 1461.380 1401.0 1501 14901   500 a    RcppZiggurat  700  702  958.232  801.0  901 40401   500  b          rnorm 1000 1101 1236.780 1101.5 1202  6101   500   c Unit: microseconds          expr   min    lq     mean median    uq    max neval cld        EGAnet 1.602 1.801 2.259408  1.901 2.101 25.901   500 a    RcppZiggurat 1.000 1.202 1.536390  1.400 1.501 35.201   500  b          rnorm 3.601 4.000 4.313174  4.201 4.401 22.801   500   c Unit: microseconds          expr    min     lq     mean median      uq    max neval cld        EGAnet  5.401  6.301  6.58418  6.502  6.8010 21.301   500 a    RcppZiggurat  4.701  5.502  5.96425  5.801  6.1015 44.601   500  b          rnorm 31.702 32.800 33.37257 33.101 33.5020 47.100   500   c Unit: microseconds          expr     min      lq      mean   median       uq      max neval cld        EGAnet  51.301  53.600  59.48418  54.6005  65.7515  121.201   500 a   RcppZiggurat  46.001  49.401  73.27382  51.9505  65.7010 7548.500   500  b           rnorm 319.700 328.001 353.45898 339.0015 341.2010 7854.400   500   c"},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"Reproducibility fundamental integrity scientific research yet reproducibility opposite randomness. Nevertheless, reproducing results require randomness (e.g., bootstrap, permutation) necessary. {EGAnet} tackles problem two different ways: (1) pre-generating seeds using PRNG C (2) using internal functions maintain R’s PRNG state. Pre-generating seeds C (using xoshiro256++) avoids potential conflicts R’s PRNG. N seeds generated based single seed function (e.g., seed = 1234). Using single seed, resulting pre-generated seeds always . seeds expected independent (due PRNG) set “thread safe” using local storage meaning minimal chance unexpected behavior using parallel processing (.e., ncores > 1). default, R’s PRNG thread safe requires consideration parallelization. internal functions store_state() restore_state() store current state R’s PRNG start {EGAnet} PRNG function restore state end, respectively. strategy alone enough ensure consistent results PRNG {EGAnet}. see reproducibility action, ’s minimal example R: scripts {EGAnet} reproducible, two things need see: (1) exact values running runif(10) twice running runif(10) PRNG {EGAnet} function running twice row without running {EGAnet} PRNG (2) exact values running PRNG {EGAnet} function running PRNG R function like runif(10). ’s result:   results runif interspersed bootEGA fully reproduced. example, Leading Eigenvector (uni.method = \"LE\") used Louvain algorithm uses PRNG controlled {EGAnet}. details reproducibility Louvain algorithm, see Louvain Reproducibility.","code":"# Set R's PRNG state set.seed(1)  # Perform `runif(10)` once runif(10) [1] 0.26550866 0.37212390 0.57285336 0.90820779 0.20168193 0.89838968  [7] 0.94467527 0.66079779 0.62911404 0.06178627 # Perform `runif(10)` again runif(10) [1] 0.2059746 0.1765568 0.6870228 0.3841037 0.7698414 0.4976992 0.7176185  [8] 0.9919061 0.3800352 0.7774452 # Load {EGAnet} library(EGAnet)  # Set R's PRNG state set.seed(1)  # Perform `runif(10)` once runif(10) [1] 0.26550866 0.37212390 0.57285336 0.90820779 0.20168193 0.89838968  [7] 0.94467527 0.66079779 0.62911404 0.06178627 # Perform `bootEGA` and set seed to `1234` boot <- bootEGA(wmt2[,7:24], uni.method = \"LE\", seed = 1234, plot.typicalStructure = FALSE) # Print summary summary(boot) Model: GLASSO (EBIC) Correlations: auto Algorithm:  Walktrap Unidimensional Method:  Leading Eigenvector  ----  EGA Type: EGA  Bootstrap Samples: 500 (Parametric)                                                           1     2     3     4     5 Frequency:  0.024 0.636 0.294 0.044 0.002  Median dimensions: 2 [0.79, 3.21] 95% CI # Perform `runif(10)` (again) runif(10) [1] 0.2059746 0.1765568 0.6870228 0.3841037 0.7698414 0.4976992 0.7176185  [8] 0.9919061 0.3800352 0.7774452 # Perform `bootEGA` and set seed to `1234` (again) boot <- bootEGA(wmt2[,7:24], uni.method = \"LE\", seed = 1234, plot.typicalStructure = FALSE) # Print summary (again) summary(boot) Model: GLASSO (EBIC) Correlations: auto Algorithm:  Walktrap Unidimensional Method:  Leading Eigenvector  ----  EGA Type: EGA  Bootstrap Samples: 500 (Parametric)                                                           1     2     3     4     5 Frequency:  0.024 0.636 0.294 0.044 0.002  Median dimensions: 2 [0.79, 3.21] 95% CI"},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"random-results","dir":"Articles","previous_headings":"","what":"Random Results","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"Random results PRNG functions {EGAnet} achieved setting seed = NULL. message pop-letting know results reproducible, sure save data leaving R/RStudio. setting seed = NULL, n seeds pre-generated rather using defined seed seeds set based computer’s clock time nanoseconds date January 1st1^{\\text{st}}, 1970 UT. strategy means unless can pinpoint exact nanosecond (.e., 0.000000001 second) computer grabbed clock time, ’re unlikely get exact seed (results!) . Although PRNG never truly random (see true RNG), results ’ll get certainly hard reproduce.","code":""},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"louvain-reproducibility","dir":"Articles","previous_headings":"","what":"Louvain Reproducibility","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"Louvain algorithm represents special case reproducibility {EGAnet} package. default, Louvain algorithm shuffles order nodes performed using PRNG. PRNG {igraph} controlled {EGAnet} therefore results usually similar exactly :   Notice results similar exactly (frequencies 1 3 slightly different). data generated bootEGA exactly shuffles performed Louvain algorithm {igraph} . similarity results may vary stable data (itemStability can help gauge ). Implementing reproducible Louvain work--progress goal future {EGAnet} versions.","code":"# Load {EGAnet} library(EGAnet)  # Set R's PRNG state set.seed(1)  # Perform `bootEGA` and set seed to `1234` boot <- bootEGA(wmt2[,7:24], seed = 1234, plot.typicalStructure = FALSE) # Print summary summary(boot) Model: GLASSO (EBIC) Correlations: auto Algorithm:  Walktrap Unidimensional Method:  Louvain  ----  EGA Type: EGA  Bootstrap Samples: 500 (Parametric)                                                        1    2   3     4     5 Frequency:  0.012 0.64 0.3 0.046 0.002  Median dimensions: 2 [0.81, 3.19] 95% CI # Perform `bootEGA` and set seed to `1234` (again) boot <- bootEGA(wmt2[,7:24], seed = 1234, plot.typicalStructure = FALSE) # Print summary (again) summary(boot) Model: GLASSO (EBIC) Correlations: auto Algorithm:  Walktrap Unidimensional Method:  Louvain  ----  EGA Type: EGA  Bootstrap Samples: 500 (Parametric)                                                           1     2     3     4     5 Frequency:  0.004 0.644 0.304 0.046 0.002  Median dimensions: 2 [0.83, 3.17] 95% CI"},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"Blackman, D., & Vigna, S. (2021). Scrambled linear pseudorandom number generators. ACM Transactions Mathematical Software (TOMS), 47(4), 1-32. https://doi.org/10.1145/3460772 Leong, P. H., Zhang, G., Lee, D. U., Luk, W., & Villasenor, J. D. (2005). Comment Implementation Ziggurat method. Journal Statistical Software, 12(7), 1-4. https://doi.org/10.18637/jss.v012.i07 Marsaglia, G., & Tsang, W. W. (2000). ziggurat method generating random variables. Journal Statistical Software, 5, 1-7. https://doi.org/10.18637/jss.v005.i08 Thomas, D. B., Luk, W., Leong, P. H., & Villasenor, J. D. (2007). Gaussian random number generators. ACM Computing Surveys (CSUR), 39(4), 11-es. https://doi.org/10.1145/1287620.1287622","code":""},{"path":"https://r-ega.net/articles/reproducibility-prng.html","id":"source-code","dir":"Articles","previous_headings":"","what":"Source Code","title":"Reproducibility and Pseudorandom Number Generation (PRNG)","text":"xoshiro256++ Ziggurat 1 running program xoshiro256++, issue repeats present; however, recommended Splitmix64 generator seed setting, issue go away. {EGAnet} implements xoshiro256++ Splitmix64 generator. Splitmix64 may fully resolve issue makes less likely. 2 contention contemporary PRNG space. PCG xo(ro)shiro families PRNG two recent developments considered high quality PRNGs (among others). Despite tension exists, choosing one developments general improvement software default PRNGs. decision use xoshiro256++ came speed ease implementation integration within {EGAnet} Ziggurat method.","code":""},{"path":"https://r-ega.net/articles/research.html","id":"ega-workflows","dir":"Articles","previous_headings":"","what":"EGA Workflows","title":"Publications","text":"Brown, G. P., Delgadillo, J., & Golino, H. (2023). Distinguishing dimensions original Dysfunctional Attitude Scale archival clinical sample. Cognitive Therapy Research, 47(1), 69–83. doi: 10.1007/s10608-022-10333-w Maertens, R., Götz, F. M., Golino, H., Roozenbeek, J., Schneider, C. R., Kyrychenko, Y., Kerr, J. R., Stieger, S., McClanahan, W. P., & Drabot, K. (2023). Misinformation Susceptibility Test (MIST): psychometrically validated measure news veracity discernment. Behavior Research Methods, 1–37. doi: 10.3758/s13428-023-02124-2","code":""},{"path":"https://r-ega.net/articles/research.html","id":"bayesian-gaussian-graphical-model","dir":"Articles","previous_headings":"","what":"Bayesian Gaussian Graphical Model","title":"Publications","text":"model = \"BGGM\" EGA Shi, D., Christensen, . P., Day, E., Golino, H., & Garrido, L. E. (2023). Bayesian approach dimensionality assessment psychological networks. PsyArXiv. doi: 10.31234/osf.io/9rcev","code":""},{"path":"https://r-ega.net/articles/research.html","id":"bootstrap-exploratory-graph-analysis","dir":"Articles","previous_headings":"","what":"Bootstrap Exploratory Graph Analysis","title":"Publications","text":"bootEGA dimensionStability itemStability Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34(6), 1095–1108. doi: 10.1002/per.2265 Christensen, . P., & Golino, H. (2021). Estimating stability psychological dimensions via bootstrap exploratory graph analysis: Monte Carlo simulation tutorial. Psych, 3(3), 479–500. doi: 10.3390/psych3030032 Golino, H., Lillard, . S., Becker, ., & Christensen, . P. (2021). Investigating structure Children’s Concentration Empathy Scale using exploratory graph analysis. Psychological Test Adaptation Development, 2(1), 35–49. doi: 10.1027/2698-1866/a000008","code":""},{"path":"https://r-ega.net/articles/research.html","id":"dynamic-exploratory-graph-analysis","dir":"Articles","previous_headings":"","what":"Dynamic Exploratory Graph Analysis","title":"Publications","text":"dynEGA Golino, H., Christensen, . P., Moulder, R., Kim, S., & Boker, S. M. (2022). Modeling latent topics social media using Dynamic Exploratory Graph Analysis: case right-wing left-wing trolls 2016 US elections. Psychometrika, 87(1), 156–187. doi: 10.1007/s11336-021-09820-y Heshmati, S., Rombaoa, J. P., Merritt, S., & Christensen, . P. (2024). Well-personalized experience: intraindividual approach dynamic well-networks daily life. PsyArXiv. doi: 10.31234/osf.io/b65xh","code":""},{"path":"https://r-ega.net/articles/research.html","id":"ega-nlp","dir":"Articles","previous_headings":"","what":"EGA + NLP","title":"Publications","text":"Kjellström, S., & Golino, H. (2019). Mining concepts health responsibility using text mining exploratory graph analysis. Scandinavian Journal Occupational Therapy, 26(6), 395–410. doi: 10.1080/11038128.2018.1455896 Golino, H., Christensen, . P., Moulder, R., Kim, S., & Boker, S. M. (2022). Modeling latent topics social media using Dynamic Exploratory Graph Analysis: case right-wing left-wing trolls 2016 US elections. Psychometrika, 87(1), 156–187. doi: 10.1007/s11336-021-09820-y Maertens, R., Götz, F. M., Golino, H., Roozenbeek, J., Schneider, C. R., Kyrychenko, Y., Kerr, J. R., Stieger, S., McClanahan, W. P., & Drabot, K. (2023). Misinformation Susceptibility Test (MIST): psychometrically validated measure news veracity discernment. Behavior Research Methods, 1–37. doi: 10.3758/s13428-023-02124-2","code":""},{"path":"https://r-ega.net/articles/research.html","id":"entropy-fit-indices","dir":"Articles","previous_headings":"","what":"Entropy Fit Indices","title":"Publications","text":"EGA.fit entropyFit genTEFI tefi vn.entropy Golino, H., Jiménez, M., Garrido, L. E., & Christensen, . P. (2024). Generalized Total Entropy Fit Index: new fit index dimensionality analysis bifactor structures multiple general factors SEM network psychometrics. PsyArXiv. doi:[10.31234/osf.io/5g3hb](research/Golino et al. - 2024 - Generalized Total Entropy Fit Index new fit ind.pdf){target=“_blank”} Golino, H., Moulder, R., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (2021). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research, 56(6), 874–902. doi: 10.1080/00273171.2020.1779642 Jamison, L., Christensen, . P., & Golino, H. (2021). Optimizing Walktrap’s community detection networks using Total Entropy Fit Index. PsyArXiv. doi: 10.31234/osf.io/9pj2m","code":""},{"path":"https://r-ega.net/articles/research.html","id":"exploratory-graph-analysis","dir":"Articles","previous_headings":"","what":"Exploratory Graph Analysis","title":"Publications","text":"EGA Golino, H., & Epskamp, S. (2017). Exploratory graph analysis: new approach estimating number dimensions psychological research. PLoS ONE, 12(6), e0174035. doi: 10.1371/journal.pone.0174035 Golino, H., & Demetriou, . (2017). Estimating dimensionality intelligence like data using Exploratory Graph Analysis. Intelligence, 62, 54–70. doi: 10.1016/j.intell.2017.02.007 Christensen, . P., Gross, G. M., Golino, H. F., Silvia, P. J., & Kwapil, T. R. (2019). Exploratory graph analysis multidimensional schizotypy scale. Schizophrenia Research, 206, 43–51. doi: 10.1016/j.schres.2018.12.018 Golino, H., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Sadana, R., Thiyagarajan, J. ., & Martinez-Molina, . (2020). Investigating performance exploratory graph analysis traditional techniques identify number latent factors: simulation tutorial. Psychological Methods, 25(3), 292–320. doi: 10.1037/met0000255 Christensen, . P., Garrido, L. E., Guerra-Peña, K., & Golino, H. (2023). Comparing community detection algorithms psychometric networks: Monte Carlo simulation. Behavior Research Methods, 1–21. doi: 10.3758/s13428-023-02106-4","code":""},{"path":"https://r-ega.net/articles/research.html","id":"exploratory-graph-analysis-with-total-entropy-fit-index","dir":"Articles","previous_headings":"","what":"Exploratory Graph Analysis with Total Entropy Fit Index","title":"Publications","text":"EGA.fit Jamison, L., Christensen, . P., & Golino, H. (2021). Optimizing Walktrap’s community detection networks using Total Entropy Fit Index. PsyArXiv. doi: 10.31234/osf.io/9pj2m","code":""},{"path":"https://r-ega.net/articles/research.html","id":"hierarchical-exploratory-graph-analysis","dir":"Articles","previous_headings":"","what":"Hierarchical Exploratory Graph Analysis","title":"Publications","text":"hierEGA Golino, H., Thiyagarajan, J. ., Sadana, R., Teles, M., Christensen, . P., & Boker, S. M. (2020). Investigating broad domains intrinsic capacity, functional ability environment: exploratory graph analysis approach improving analytical methodologies measuring healthy aging. PsyArXiv. doi: 10.31234/osf.io/hj5mc Christensen, . P., Cardillo, E. R., & Chatterjee, . (2022). kind impacts can artwork viewers? Establishing taxonomy aesthetic impacts. British Journal Psychology. doi: 10.1111/bjop.12623 Jiménez, M., Abad, F. J., Garcia-Garzon, E., Golino, H., Christensen, . P., & Garrido, L. E. (2023). Dimensionality assessment bifactor structures multiple general factors: network psychometrics approach. Psychological Methods. doi: 10.1037/met0000590","code":""},{"path":"https://r-ega.net/articles/research.html","id":"loadings-comparison-test","dir":"Articles","previous_headings":"","what":"Loadings Comparison Test","title":"Publications","text":"LCT Christensen, . P., & Golino, H. (2021). Factor network model? Predictions neural networks. Journal Behavioral Data Science, 1(1), 85–126. doi: 10.35566/jbds/v1n1/p5","code":""},{"path":"https://r-ega.net/articles/research.html","id":"measurement-invariance","dir":"Articles","previous_headings":"","what":"Measurement Invariance","title":"Publications","text":"invariance Jamison, L., Golino, H., & Christensen, . P. (2022). Metric invariance exploratory graph analysis via permutation testing. PsyArXiv. doi: 10.31234/osf.io/j4rx9","code":""},{"path":"https://r-ega.net/articles/research.html","id":"network-loadings-and-scores","dir":"Articles","previous_headings":"","what":"Network Loadings and Scores","title":"Publications","text":"net.loads net.scores Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34(6), 1095–1108. doi: 10.1002/per.2265 Christensen, . P., & Golino, H. (2021). equivalency factor network loadings. Behavior Research Methods, 53(4), 1563–1580. doi: 10.3758/s13428-020-01500-6 Golino, H., Christensen, . P., Moulder, R., Kim, S., & Boker, S. M. (2022). Modeling latent topics social media using Dynamic Exploratory Graph Analysis: case right-wing left-wing trolls 2016 US elections. Psychometrika, 87(1), 156–187. doi: 10.1007/s11336-021-09820-y","code":""},{"path":"https://r-ega.net/articles/research.html","id":"network-psychometrics-information-theory","dir":"Articles","previous_headings":"","what":"Network Psychometrics + Information Theory","title":"Publications","text":"boot.ergoInfo ergoInfo infoCluster jsd Golino, H., Nesselroade, J., & Christensen, . P. (2022). Towards psychology individuals: ergodicity information index bottom-approach finding generalizations. PsyArXiv. doi: 10.31234/osf.io/th6rm","code":""},{"path":"https://r-ega.net/articles/research.html","id":"total-correlation","dir":"Articles","previous_headings":"","what":"Total Correlation","title":"Publications","text":"totalCor totalCorMat Felix, L. M., Mansur-Alves, M., Teles, M., Jamison, L., & Golino, H. (2021). Longitudinal impact effects booster sessions cognitive training program healthy older adults. Archives Gerontology Geriatrics, 94, 104337. doi: 10.1016/j.archger.2021.104337","code":""},{"path":"https://r-ega.net/articles/research.html","id":"random-intercept-exploratory-graph-analysis","dir":"Articles","previous_headings":"","what":"Random-Intercept Exploratory Graph Analysis","title":"Publications","text":"riEGA Garcia-Pardina, ., Abad, F. J., Christensen, . P., Golino, H., & Garrido, L. E. (2022). Dimensionality assessment presence wording effects: network psychometric factorial approach. PsyArXiv. doi: 10.31234/osf.io/7yqau","code":""},{"path":"https://r-ega.net/articles/research.html","id":"triangulated-maximally-filtered-graph","dir":"Articles","previous_headings":"","what":"Triangulated Maximally Filtered Graph","title":"Publications","text":"TMFG Christensen, . P., Kenett, Y. N., Aste, T., Silvia, P. J., & Kwapil, T. R. (2018). Network structure Wisconsin Schizotypy Scales–Short Forms: Examining psychometric network filtering approaches. Behavior Research Methods, 50(6), 2531–2550. doi: 10.3758/s13428-018-1032-9 Christensen, . P., Cotter, K. N., & Silvia, P. J. (2019). Reopening openness experience: network analysis four openness experience inventories. Journal Personality Assessment, 101(6), 574–588. doi: 10.1080/00223891.2018.1467428 Christensen, . P., Cardillo, E. R., & Chatterjee, . (2022). kind impacts can artwork viewers? Establishing taxonomy aesthetic impacts. British Journal Psychology. doi: 10.1111/bjop.12623","code":""},{"path":"https://r-ega.net/articles/research.html","id":"unidimensionality","dir":"Articles","previous_headings":"","what":"Unidimensionality","title":"Publications","text":"community.unidimensional Golino, H., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Sadana, R., Thiyagarajan, J. ., & Martinez-Molina, . (2020). Investigating performance exploratory graph analysis traditional techniques identify number latent factors: simulation tutorial. Psychological Methods, 25(3), 292–320. doi: 10.1037/met0000255 Christensen, . P., Garrido, L. E., Guerra-Peña, K., & Golino, H. (2023). Comparing community detection algorithms psychometric networks: Monte Carlo simulation. Behavior Research Methods, 1–21. doi: 10.3758/s13428-023-02106-4","code":""},{"path":"https://r-ega.net/articles/research.html","id":"unique-variable-analysis","dir":"Articles","previous_headings":"","what":"Unique Variable Analysis","title":"Publications","text":"UVA Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34(6), 1095–1108. doi: 10.1002/per.2265 Christensen, . P., Garrido, L. E., & Golino, H. (2023). Unique variable analysis: network psychometrics method detect local dependence. Multivariate Behavioral Research, 1–18. doi: 10.1080/00273171.2023.2194606","code":""},{"path":"https://r-ega.net/articles/whats-changed.html","id":"faster","dir":"Articles","previous_headings":"","what":"Faster","title":"What's Changed?","text":"new {EGAnet} fast. Nearly functions optimized, resulting 2-15x faster code previous versions. Analyses used take minutes now take seconds. biggest difference? Fast computation tetrachoric polychoric correlations correlations core {EGAnet} functions. Unfortunately, aren’t many implementations R quickly compute correlations. , ’ve implemented tetrachoric polychoric correlations C. ’s comparison {EGAnet}’s auto.correlate, former implementation {qgraph}’s cor_auto, {psych}’s polychoric, recently published fast implementation R: {Turbofuns}’s PolychoricRM (using 1 core). demonstration used bfi dataset {psych} 100 repetitions: auto.correlate’s median time par PolychoricRM. auto.correlate includes several checks compute Pearson’s correlations continuous data polyserial correlations continuous ordinal data similar cor_auto; however, auto.correlate 6x faster. Compared polychoric, auto.correlate 33x faster. put speed difference context: auto.correlate completes one full bootEGA gets 100 iterations second bootEGA time cor_auto completes first 100 iterations first bootEGA.","code":"Unit: milliseconds       expr       min        lq       mean     median         uq       max neval cld     EGAnet   75.1616   75.4386   77.57433   75.74405   78.19075  201.0211   500  a   Turbofuns   79.5288   79.7113   80.45382   79.87415   80.30210   97.3525   500  a      qgraph  437.7368  449.0530  490.07021  456.72130  560.37485  743.6972   500   b       psych 2555.8532 2586.6863 2701.75927 2603.60790 2727.74910 4682.7300   500   c"},{"path":"https://r-ega.net/articles/whats-changed.html","id":"more-flexible","dir":"Articles","previous_headings":"","what":"More Flexible","title":"What's Changed?","text":"Functions modular build allow combinations previously unthinkable. Want use {igraph}’s cluster_spinglass EGA? can Want see itemStability hierEGA? can Want perform bootEGA EGA.fit using BGGM consensus clustering Louvain (community.consensus)? ’s lot… can flexibility warrants disclaimer: Just can, doesn’t mean ! Keep best practices mind. see full range flexibility, check Argument Passing","code":""},{"path":"https://r-ega.net/articles/whats-changed.html","id":"more-informative","dir":"Articles","previous_headings":"","what":"More Informative","title":"What's Changed?","text":"Functions S3 print, summary, plot methods updated. Functions didn’t print, summary, plot methods now . print summary methods designed give information want without hassle. ’s EGA’s summary output: Model algorithm information, network descriptives, community memberships, fit (Total Entropy Fit Index) provided every *EGA function. information everything (perhaps !) need write reproducible Methods section. plot? ’s much flexibility needs page","code":"Model: GLASSO (EBIC with gamma = 0.5) Correlations: auto Lambda: 0.0764652282008741 (n = 100, ratio = 0.1)  Number of nodes: 25 Number of edges: 117 Edge density: 0.390  Non-zero edge weights:       M    SD    Min   Max  0.046 0.119 -0.269 0.548  ----  Algorithm:  Walktrap  Number of communities:  5  A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 N1 N2 N3 N4 N5 O1 O2 O3 O4 O5   1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  4  5  5  5  5  5   ----  Unidimensional Method: Louvain Unidimensional: No  ----  TEFI: -27.335"},{"path":"https://r-ega.net/articles/whats-changed.html","id":"more-reproducible","dir":"Articles","previous_headings":"","what":"More Reproducible","title":"What's Changed?","text":"Like polychoric correlations, ’ve implemented high quality open-source pseudorandom number generation (PRNG) C instead R. change avoids potential conflicts seed set script seed set {EGAnet} PRNG function. short, results can replicated, time time . gritty details, head Reproducibility PRNG details ’s changed, check NEWS","code":""},{"path":"https://r-ega.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hudson Golino. Author, maintainer. Alexander Christensen. Author. Robert Moulder. Contributor. Luis E. Garrido. Contributor. Laura Jamison. Contributor. Dingjing Shi. Contributor.","code":""},{"path":"https://r-ega.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Golino, H., & Christensen, . P. (2024). EGAnet: Exploratory Graph Analysis – framework estimating number dimensions multivariate data using network psychometrics. https://doi.org/10.32614/CRAN.package.EGAnet","code":"@Manual{EGAnet,   title = {EGAnet: Exploratory Graph Analysis – A framework for estimating the number of dimensions in multivariate data using network psychometrics},   author = {Golino, Hudson and Christensen, {Alexander P}},   year = {2024},   url = {https://r-ega.net},   doi = {10.32614/CRAN.package.EGAnet},   note = {R package version 2.0.9}, }"},{"path":"https://r-ega.net/reference/CFA.html","id":null,"dir":"Reference","previous_headings":"","what":"CFA Fit of EGA or hierEGA Structure — CFA","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"Verifies fit structure suggested EGA hierEGA using confirmatory factor analysis","code":""},{"path":"https://r-ega.net/reference/CFA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"","code":"CFA(ega.obj, data, estimator, plot.CFA = TRUE, layout = \"spring\", ...)"},{"path":"https://r-ega.net/reference/CFA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"ega.obj EGA object hierEGA data Matrix data frame. consist variables used analysis estimator estimator used confirmatory factor analysis. 'WLSMV' estimator choice ordinal variables. 'ML' 'WLS' interval variables. See lavOptions details plot.CFA Logical. CFA structure standardized loadings plot? Defaults TRUE layout Layout plot (see semPaths). Defaults \"spring\" ... Arguments passed cfa","code":""},{"path":"https://r-ega.net/reference/CFA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"Returns list containing: fit Output cfa summary Summary output lavaan-class fit.measures Fit measures: chi-squared, degrees freedom, p-value, CFI, RMSEA, GFI, NFI. Additional fit measures can applied using fitMeasures function (see examples)","code":""},{"path":"https://r-ega.net/reference/CFA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"Demonstrative use  Christensen, . P., Gross, G. M., Golino, H., Silvia, P. J., & Kwapil, T. R. (2019). Exploratory graph analysis Multidimensional Schizotypy Scale. Schizophrenia Research, 206, 43-51. Initial implementation  Golino, H., & Epskamp, S. (2017). Exploratory graph analysis: new approach estimating number dimensions psychological research. PLoS ONE, 12, e0174035.","code":""},{"path":"https://r-ega.net/reference/CFA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"Hudson F. Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/CFA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CFA Fit of EGA or hierEGA Structure — CFA","text":"","code":"# Load data wmt <- wmt2[,7:24]  if (FALSE) { # \\dontrun{ # Estimate EGA ega.wmt <- EGA(   data = wmt,   plot.EGA = FALSE # No plot for CRAN checks )  # Fit CFA model to EGA results cfa.wmt <- CFA(   ega.obj = ega.wmt, estimator = \"WLSMV\",   plot.CFA = FALSE, # No plot for CRAN checks   data = wmt )  # Additional fit measures lavaan::fitMeasures(cfa.wmt$fit, fit.measures = \"all\")} # }"},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"function uses glasso package (Friedman, Hastie Tibshirani, 2011) compute sparse gaussian graphical model graphical lasso (Friedman, Hastie & Tibshirani, 2008). tuning parameter chosen using Extended Bayesian Information criterion (EBIC) described Foygel & Drton (2010).","code":""},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"","code":"EBICglasso.qgraph(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   gamma = 0.5,   penalize.diagonal = FALSE,   nlambda = 100,   lambda.min.ratio = 0.1,   returnAllResults = FALSE,   penalizeMatrix,   countDiagonal = FALSE,   refit = FALSE,   model.selection = c(\"EBIC\", \"JSD\"),   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"data Matrix data frame. consist variables used analysis n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset gamma Numeric (length = 1) EBIC tuning parameter. Defaults 0.50 generally good choice. Setting 0 cause regular BIC used penalize.diagonal Boolean (length = 1). diagonal penalized? Defaults FALSE nlambda Numeric (length = 1). Number lambda values test. Defaults 100 lambda.min.ratio Numeric (length = 1). Ratio lowest lambda value compared maximal lambda. Defaults 0.1. NOTE qgraph sets default 0.01 returnAllResults Boolean (length = 1). Whether results returned. Defaults FALSE (network ). Set TRUE access glassopath output penalizeMatrix Boolean matrix. Optional logical matrix indicate elements penalized countDiagonal Boolean (length = 1). diagonal counted EBIC computation? Defaults FALSE. Set TRUE mimic qgraph < 1.3 behavior (recommended!) refit Boolean (length = 1). optimal graph refitted without LASSO regularization? Defaults FALSE model.selection Character (length = 1). lambda selected within GLASSO. Defaults \"EBIC\". \"JSD\" experimental used otherwise verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Arguments sent glasso","code":""},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"partial correlation matrix","code":""},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"glasso run 100 values tuning parameter logarithmically spaced maximal value tuning parameter edges zero, lambda_max, lambda_max/100. graphs EBIC computed graph best EBIC selected. partial correlation matrix computed using wi2net returned.","code":""},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"Instantiation GLASSO  Friedman, J., Hastie, T., & Tibshirani, R. (2008). Sparse inverse covariance estimation graphical lasso. Biostatistics, 9, 432-441. glasso + EBIC  Foygel, R., & Drton, M. (2010). Extended Bayesian information criteria Gaussian graphical models. Advances neural information processing systems (pp. 604-612). glasso package  Friedman, J., Hastie, T., & Tibshirani, R. (2011). glasso: Graphical lasso-estimation Gaussian graphical models. R package version 1.7. Tutorial EBICglasso  Epskamp, S., & Fried, E. . (2018). tutorial regularized partial correlation networks. Psychological Methods, 23(4), 617–634.","code":""},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"Sacha Epskamp; maintanence, Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen gmail.com>","code":""},{"path":"https://r-ega.net/reference/EBICglasso.qgraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EBICglasso from qgraph 1.4.4 — EBICglasso.qgraph","text":"","code":"# Obtain data wmt <- wmt2[,7:24]  # Compute graph with tuning = 0 (BIC) BICgraph <- EBICglasso.qgraph(data = wmt, gamma = 0)  # Compute graph with tuning = 0.5 (EBIC) EBICgraph <- EBICglasso.qgraph(data = wmt, gamma = 0.5)"},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates EGA for Multidimensional Structures — EGA.estimate","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"basic function estimate EGA multidimensional structures. function include unidimensional check plot results. function can used streamlined approach quick EGA estimation unidimensionality visualization priority","code":""},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"","code":"EGA.estimate(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"data Matrix data frame. consist variables used analysis n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus","code":""},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"Returns list containing: network matrix containing network estimated using link[EGAnet]{network.estimation} wc vector representing community (dimension) membership node network. NA values mean node disconnected network n.dim scalar many total dimensions identified network cor.data zero-order correlation matrix n Number cases data","code":""},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"Original simulation implementation EGA  Golino, H. F., & Epskamp, S. (2017). Exploratory graph analysis: new approach estimating number dimensions psychological research. PLoS ONE, 12, e0174035. Introduced unidimensional checks, simulation continuous dichotomous data  Golino, H., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Sadana, R., & Thiyagarajan, J. . (2020). Investigating performance Exploratory Graph Analysis traditional techniques identify number latent factors: simulation tutorial. Psychological Methods, 25, 292-320. Compared igraph community detection algorithms, simulation continuous polytomous data  Christensen, . P., Garrido, L. E., Guerra-Pena, K., & Golino, H. (2023). Comparing community detection algorithms psychometric networks: Monte Carlo simulation. Behavior Research Methods.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"Alexander P. Christensen <alexpaulchristensen gmail.com> Hudson Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/EGA.estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates EGA for Multidimensional Structures — EGA.estimate","text":"","code":"# Obtain data wmt <- wmt2[,7:24]  # Estimate EGA ega.wmt <- EGA.estimate(data = wmt)  # Estimate EGA with TMFG ega.wmt.tmfg <- EGA.estimate(data = wmt, model = \"TMFG\")  # Estimate EGA with an {igraph} function (Fast-greedy) ega.wmt.greedy <- EGA.estimate(   data = wmt,   algorithm = igraph::cluster_fast_greedy )"},{"path":"https://r-ega.net/reference/EGA.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"Estimates best fitting model using EGA. number steps cluster_walktrap detection algorithm varied unique community solutions compared using tefi.","code":""},{"path":"https://r-ega.net/reference/EGA.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"","code":"EGA.fit(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   plot.EGA = TRUE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/EGA.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"data Matrix data frame. consist variables used analysis n Numeric (length = 1). Sample size data correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function. Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details. Note: Leiden algorithm default Constant Potts Model objective function (objective_function = \"CPM\"). Set objective_function = \"modularity\" use modularity instead (see examples). default, searches along resolutions 0 max(abs(network)) maximum absolute edge weight network 0.01 increments (resolution_parameter = seq.int(0, max(abs(network)), 0.01)). modularity, searches along resolutions 0 2 0.05 increments (resolution_parameter = seq.int(0, 2, 0.05)) default. Use argument resolution_parameter change search parameters (see examples) \"louvain\" — See community.consensus details. default, searches along resolutions 0 2 0.05 increments (resolution_parameter = seq.int(0, 2, 0.05)). Use argument resolution_parameter change search parameters (see examples) \"walktrap\" — algorithm default. See cluster_walktrap details. default, searches along 3 8 steps (steps = 3:8). Use argument steps change search parameters (see examples) plot.EGA Boolean. TRUE, returns plot network estimated dimensions. Defaults TRUE verbose Boolean. Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, EGA.estimate","code":""},{"path":"https://r-ega.net/reference/EGA.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"Returns list containing: EGA EGA results best fitting solution EntropyFit tefi fit values solution Lowest.EntropyFit best fitting solution based tefi parameter.space Parameter values used search space","code":""},{"path":"https://r-ega.net/reference/EGA.fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"Entropy fit measures  Golino, H., Moulder, R. G., Shi, D., Christensen, . P., Garrido, L. E., Neito, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (press). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research. Simulation EGA.fit  Jamison, L., Christensen, . P., & Golino, H. (review). Optimizing Walktrap's community detection networks using Total Entropy Fit Index. PsyArXiv. Leiden algorithm  Traag, V. ., Waltman, L., & Van Eck, N. J. (2019). Louvain Leiden: guaranteeing well-connected communities. Scientific Reports, 9(1), 1-12. Louvain algorithm  Blondel, V. D., Guillaume, J. L., Lambiotte, R., & Lefebvre, E. (2008). Fast unfolding communities large networks. Journal Statistical Mechanics: Theory Experiment, 2008(10), P10008. Walktrap algorithm  Pons, P., & Latapy, M. (2006). Computing communities large networks using random walks. Journal Graph Algorithms Applications, 10, 191-218.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/EGA.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/EGA.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EGA Optimal Model Fit using the Total Entropy Fit Index (tefi) — EGA.fit","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate optimal EGA with Walktrap fit.walktrap <- EGA.fit(   data = wmt, algorithm = \"walktrap\",   steps = 3:8, # default   plot.EGA = FALSE # no plot for CRAN checks )  # Estimate optimal EGA with Leiden and CPM fit.leiden <- EGA.fit(   data = wmt, algorithm = \"leiden\",   objective_function = \"CPM\", # default   # resolution_parameter = seq.int(0, max(abs(network)), 0.01),   # For CPM, the default max resolution parameter   # is set to the largest absolute edge in the network   plot.EGA = FALSE # no plot for CRAN checks )  # Estimate optimal EGA with Leiden and modularity fit.leiden <- EGA.fit(   data = wmt, algorithm = \"leiden\",   objective_function = \"modularity\",   resolution_parameter = seq.int(0, 2, 0.05),   # default for modularity   plot.EGA = FALSE # no plot for CRAN checks )  if (FALSE) { # \\dontrun{ # Estimate optimal EGA with Louvain fit.louvain <- EGA.fit(   data = wmt, algorithm = \"louvain\",   resolution_parameter = seq.int(0, 2, 0.05), # default   plot.EGA = FALSE # no plot for CRAN checks )} # }"},{"path":"https://r-ega.net/reference/EGA.html","id":null,"dir":"Reference","previous_headings":"","what":"Exploratory Graph Analysis — EGA","title":"Exploratory Graph Analysis — EGA","text":"Estimates number communities (dimensions) dataset correlation matrix using network estimation method (Golino & Epskamp, 2017; Golino et al., 2020). , community detection algorithm applied (Christensen et al., 2023) multidimensional data. unidimensional check also applied based findings Golino et al. (2020) Christensen (2023)","code":""},{"path":"https://r-ega.net/reference/EGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exploratory Graph Analysis — EGA","text":"","code":"EGA(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   plot.EGA = TRUE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/EGA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exploratory Graph Analysis — EGA","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" plot.EGA Boolean (length = 1). Defaults TRUE. Whether plot returned results. Set FALSE plot verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, community.unidimensional","code":""},{"path":"https://r-ega.net/reference/EGA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exploratory Graph Analysis — EGA","text":"Returns list containing: network matrix containing network estimated using link[EGAnet]{network.estimation} wc vector representing community (dimension) membership node network. NA values mean node disconnected network n.dim scalar many total dimensions identified network correlation zero-order correlation matrix n Number cases data dim.variables ordered matrix item allocation TEFI link[EGAnet]{tefi} estimated structure plot.EGA Plot output plot.EGA = TRUE","code":""},{"path":"https://r-ega.net/reference/EGA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exploratory Graph Analysis — EGA","text":"Original simulation implementation EGA  Golino, H. F., & Epskamp, S. (2017). Exploratory graph analysis: new approach estimating number dimensions psychological research. PLoS ONE, 12, e0174035. Current implementation EGA, introduced unidimensional checks, continuous dichotomous data  Golino, H., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Sadana, R., & Thiyagarajan, J. . (2020). Investigating performance Exploratory Graph Analysis traditional techniques identify number latent factors: simulation tutorial. Psychological Methods, 25, 292-320. Compared igraph community detection algorithms, introduced Louvain algorithm, simulation continuous polytomous data Also implements Leading Eigenvalue unidimensional method  Christensen, . P., Garrido, L. E., Pena, K. G., & Golino, H. (2023). Comparing community detection algorithms psychological data: Monte Carlo simulation. Behavior Research Methods. Comprehensive unidimensionality simulation  Christensen, . P. (2023). Unidimensional community detection: Monte Carlo simulation, grid search, comparison. PsyArXiv. Compared igraph community detection algorithms, simulation continuous polytomous data  Christensen, . P., Garrido, L. E., Guerra-Pena, K., & Golino, H. (2023). Comparing community detection algorithms psychometric networks: Monte Carlo simulation. Behavior Research Methods.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/EGA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Exploratory Graph Analysis — EGA","text":"Hudson Golino <hfg9s virginia.edu>, Alexander P. Christensen <alexpaulchristensen gmail.com>, Maria Dolores Nieto <acinodam gmail.com> Luis E. Garrido <garrido.luiseduardo gmail.com>","code":""},{"path":"https://r-ega.net/reference/EGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exploratory Graph Analysis — EGA","text":"","code":"# Obtain data wmt <- wmt2[,7:24]  # Estimate EGA ega.wmt <- EGA(   data = wmt,   plot.EGA = FALSE # No plot for CRAN checks )  # Print results print(ega.wmt) #> Model: GLASSO (EBIC with gamma = 0.5) #> Correlations: auto #> Lambda: 0.0648639582532287 (n = 100, ratio = 0.1) #>  #> Number of nodes: 18 #> Number of edges: 96 #> Edge density: 0.627 #>  #> Non-zero edge weights:  #>      M    SD    Min   Max #>  0.082 0.060 -0.013 0.363 #>  #> ---- #>  #> Algorithm:  Walktrap #>  #> Number of communities:  2 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     2     2     2     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     2     2     2  #>  #> ---- #>  #> Unidimensional Method: Louvain #> Unidimensional: No #>  #> ---- #>  #> TEFI: -11.171  # Estimate EGAtmfg ega.wmt.tmfg <- EGA(   data = wmt, model = \"TMFG\",   plot.EGA = FALSE # No plot for CRAN checks )  # Estimate EGA with Louvain algorithm ega.wmt.louvain <- EGA(   data = wmt, algorithm = \"louvain\",   plot.EGA = FALSE # No plot for CRAN checks )  # Estimate EGA with an {igraph} function (Fast-greedy) ega.wmt.greedy <- EGA(   data = wmt,   algorithm = igraph::cluster_fast_greedy,   plot.EGA = FALSE # No plot for CRAN checks )"},{"path":"https://r-ega.net/reference/EGAnet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EGAnet-package — EGAnet-package","title":"EGAnet-package — EGAnet-package","text":"Implements Exploratory Graph Analysis (EGA) framework dimensionality psychometric assessment. EGA estimates number dimensions psychological data using network estimation methods community detection algorithms. bootstrap method provided assess stability dimensions items. Fit evaluated using Entropy Fit family indices. Unique Variable Analysis evaluates extent items locally dependent (redundant). Network loadings provide similar information factor loadings can used compute network scores. bootstrap permutation approach available assess configural metric invariance. Hierarchical structures can detected using Hierarchical EGA. Time series intensive longitudinal data can analyzed using Dynamic EGA, supporting individual, group, population level assessments.","code":""},{"path":"https://r-ega.net/reference/EGAnet-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EGAnet-package — EGAnet-package","text":"Christensen, . P. (2023). Unidimensional community detection: Monte Carlo simulation, grid search, comparison. PsyArXiv.  # Related functions: community.unidimensional Christensen, . P., Garrido, L. E., & Golino, H. (2023). Unique variable analysis: network psychometrics method detect local dependence. Multivariate Behavioral Research.  # Related functions: UVA Christensen, . P., Garrido, L. E., Guerra-Pena, K., & Golino, H. (2023). Comparing community detection algorithms psychometric networks: Monte Carlo simulation. Behavior Research Methods.  # Related functions: EGA Christensen, . P., & Golino, H. (2021a). Estimating stability number factors via Bootstrap Exploratory Graph Analysis: tutorial. Psych, 3(3), 479-500.  # Related functions: bootEGA, dimensionStability, # itemStability Christensen, . P., & Golino, H. (2021b). Factor network model? Predictions neural networks. Journal Behavioral Data Science, 1(1), 85-126.  # Related functions: LCT Christensen, . P., & Golino, H. (2021c). equivalency factor network loadings. Behavior Research Methods, 53, 1563-1580.  # Related functions: LCT net.loads Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34, 1095-1108.  # Related functions: bootEGA, dimensionStability, # EGA, itemStability, UVA Christensen, . P., Gross, G. M., Golino, H., Silvia, P. J., & Kwapil, T. R. (2019). Exploratory graph analysis Multidimensional Schizotypy Scale. Schizophrenia Research, 206, 43-51. # Related functions: CFA EGA Golino, H., Christensen, . P., Moulder, R., Kim, S., & Boker, S. M. (2021). Modeling latent topics social media using Dynamic Exploratory Graph Analysis: case right-wing left-wing trolls 2016 US elections. Psychometrika.  # Related functions: dynEGA simDFM Golino, H., & Demetriou, . (2017). Estimating dimensionality intelligence like data using Exploratory Graph Analysis. Intelligence, 62, 54-70.  # Related functions: EGA Golino, H., & Epskamp, S. (2017). Exploratory graph analysis: new approach estimating number dimensions psychological research. PLoS ONE, 12, e0174035.  # Related functions: CFA, EGA, bootEGA Golino, H., Moulder, R., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (2020). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research.  # Related functions: entropyFit, tefi, vn.entropy Golino, H., Nesselroade, J. R., & Christensen, . P. (2022). Towards psychology individuals: ergodicity information index bottom-approach finding generalizations. PsyArXiv.  # Related functions: boot.ergoInfo, ergoInfo, jsd, infoCluster Golino, H., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Sadana, R., Thiyagarajan, J. ., & Martinez-Molina, . (2020). Investigating performance exploratory graph analysis traditional techniques identify number latent factors: simulation tutorial. Psychological Methods, 25, 292-320.  # Related functions: EGA Golino, H., Thiyagarajan, J. ., Sadana, M., Teles, M., Christensen, . P., & Boker, S. M. (2020). Investigating broad domains intrinsic capacity, functional ability, environment: exploratory graph analysis approach improving analytical methodologies measuring healthy aging. PsyArXiv.  # Related functions: EGA.fit tefi Jamison, L., Christensen, . P., & Golino, H. (2021). Optimizing Walktrap's community detection networks using Total Entropy Fit Index. PsyArXiv.  # Related functions: EGA.fit tefi Jamison, L., Golino, H., & Christensen, . P. (2023). Metric invariance exploratory graph analysis via permutation testing. PsyArXiv.  # Related functions: invariance Shi, D., Christensen, . P., Day, E., Golino, H., & Garrido, L. E. (2023). Bayesian approach dimensionality assessment psychological networks. PsyArXiv  # Related functions: EGA","code":""},{"path":[]},{"path":"https://r-ega.net/reference/EGAnet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EGAnet-package — EGAnet-package","text":"Hudson Golino <hfg9s@virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Plot Methods for EGAnet — EGAnet-plot","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"General usage plots created EGAnet's S3 methods. Plots across EGAnet package leverage GGally's ggnet2 ggplot2's ggplot. plots allow full usage gg* series functionality therefore plotting arguments referenced packages rather EGAnet. sections list functions usage S3 plot methods. plot methods intended generic without many arguments nearly arguments passed ggnet2 ggplot. constraints placed certain plots keep EGAnet style throughout (network) plots package, aware settings changing plot output, settings might fixed maintain EGAnet style","code":""},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General Usage","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"","code":"plot(x, ...)  plot.dynEGA(x, base = 1, id = NULL, ...)  plot.dynEGA.Group(x, base = 1, ...)  plot.dynEGA.Individual(x, base = 1, id = NULL, ...)  plot.hierEGA(   x, plot.type = c(\"multilevel\", \"separate\"),   color.match = FALSE, ... )  plot.invariance(x, p_type = c(\"p\", \"p_BH\"), p_value = 0.05, ...)"},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":"general-arguments","dir":"Reference","previous_headings":"","what":"General Arguments","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"x — EGAnet object available S3 plot method (see full list ) color.palette — Character (vector). Either character (length = 1) pre-defined palettes color_palette_EGA character (length = total number communities) using HEX codes (see Color Palettes Examples sections) layout — Character (length = 1). Layouts can set using gplot.layout ending layout name; example, gplot.layout.circle can set functions using layout = \"circle\" mode = \"circle\" (see Examples) base — Numeric (length = 1). Plot used base configuration networks. Uses number order plots input. Defaults 1 first plot id — Numeric index(es) character name(s). IDs use plotting dynEGA level = \"individual\". Defaults NULL 4 IDs drawn random plot.type — Character (length = 1). Whether hierEGA networks plotted stacked, \"multilevel\" fashion \"separate\" plots. Defaults \"multilevel\" color.match — Boolean (length = 1). Whether lower order community colors hierEGA plot \"matched\" used border color higher order communities. Defaults FALSE p_type — Character (length = 1). Type p-value plotting invariance. Defaults \"p\" uncorrected p-value. Set \"p_BH\" Benjamini-Hochberg corrected p-value p_value — Numeric (length = 1). p-value use alongside p_type plotting invariance. Defaults 0.05 ... — Additional arguments pass ggnet2 gplot.layout (see Examples)","code":""},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":"-ega-plots","dir":"Reference","previous_headings":"","what":"*EGA Plots","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"bootEGA, dynEGA, EGA, EGA.estimate, EGA.fit, hierEGA, invariance, riEGA","code":""},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":"all-available-s-plot-methods","dir":"Reference","previous_headings":"","what":"All Available S3 Plot Methods","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"boot.ergoInfo, bootEGA, dynEGA, dynEGA.Group, dynEGA.Individual, dynEGA.Population, EGA, EGA.estimate, EGA.fit, hierEGA, infoCluster, invariance, itemStability, riEGA","code":""},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":"color-palettes","dir":"Reference","previous_headings":"","what":"Color Palettes","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"color_palette_EGA implement color palettes EGAnet. main EGAnet style palette \"polychrome\". palette currently 40 colors likely need expand (e.g., hierEGA demands lot colors). color.palette argument also accept HEX code colors length number communities plot. network plots, color.palette argument can used select color palettes color_palette_EGA well color scheme RColorBrewer worked examples , see Plots {EGAnet}","code":""},{"path":"https://r-ega.net/reference/EGAnet-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Plot Methods for EGAnet — EGAnet-plot","text":"","code":"# \\donttest{ # Using different arguments in {GGally}'s `ggnet2` plot(ega.wmt, node.size = 6, edge.size = 4)   # Using a different layout in {sna}'s `gplot.layout` plot(ega.wmt, layout = \"circle\") # 'layout' argument  plot(ega.wmt, mode = \"circle\") # 'mode' argument   # Using different color palettes with `color_palette_EGA`  ## Pre-defined palette plot(ega.wmt, color.palette = \"blue.ridge2\")   ## University of Virginia colors plot(ega.wmt, color.palette = c(\"#232D4B\", \"#F84C1E\"))   ## Vanderbilt University colors ## (with additional {GGally} `ggnet2` argument) plot(   ega.wmt, color.palette = c(\"#FFFFFF\", \"#866D4B\"),   label.color = \"#000000\" )# }"},{"path":"https://r-ega.net/reference/EGM.compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare EGM with EFA — EGM.compare","title":"Compare EGM with EFA — EGM.compare","text":"Estimates EGM based EGA uses number communities number dimensions exploratory factor analysis (EFA) using fa","code":""},{"path":"https://r-ega.net/reference/EGM.compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare EGM with EFA — EGM.compare","text":"","code":"EGM.compare(data, constrained = FALSE, rotation = \"geominQ\", ...)"},{"path":"https://r-ega.net/reference/EGM.compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare EGM with EFA — EGM.compare","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix constrained Boolean (length = 1). Whether memberships communities added constraint optimizing network loadings. Defaults FALSE freely estimate loading similar exploratory factor analysis. Note: default differs EGM. Constraining loadings puts EGM deficit relative EFA therefore biases comparability methods. best leave default unconstrained using function. rotation Character. rotation use obtain simpler structure EFA. list rotations, see rotations options. Defaults \"geominQ\" ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, community.unidimensional, EGA, EGM, net.loads, fa","code":""},{"path":"https://r-ega.net/reference/EGM.compare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare EGM with EFA — EGM.compare","text":"Hudson F. Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/EGM.compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare EGM with EFA — EGM.compare","text":"","code":"# Get depression data data <- depression[,24:44]  # Compare EGM (using EGA) with EFA if (FALSE) { # \\dontrun{ results <- EGM.compare(data)  # Print summary summary(results)} # }"},{"path":"https://r-ega.net/reference/EGM.html","id":null,"dir":"Reference","previous_headings":"","what":"Exploratory Graph Model — EGM","title":"Exploratory Graph Model — EGM","text":"Function fit Exploratory Graph Model","code":""},{"path":"https://r-ega.net/reference/EGM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exploratory Graph Model — EGM","text":"","code":"EGM(   data,   EGM.model = c(\"standard\", \"EGA\"),   communities = NULL,   structure = NULL,   search = FALSE,   p.in = NULL,   p.out = NULL,   opt = c(\"AIC\", \"BIC\", \"CFI\", \"chisq\", \"logLik\", \"RMSEA\", \"SRMR\", \"TEFI\", \"TEFI.adj\",     \"TLI\"),   constrained = TRUE,   verbose = TRUE,   ... )"},{"path":"https://r-ega.net/reference/EGM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exploratory Graph Model — EGM","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix EGM.model Character vector (length = 1). Sets procedure conduct EGM. Available options: \"EGA\" (default) — Applies EGA obtain (sparse) regularized network structure, communities, memberships \"standard\" — Applies standard EGM model estimates communities based non-regularized empirical partial correlation matrix sparsity set using p.p.communities Numeric vector (length = 1). Number communities use \"standard\" type EGM. Defaults NULL. Providing input use communities memberships output Walktrap algorithm (cluster_walktrap) based empirical non-regularized partial correlation matrix structure Numeric character vector (length = ncol(data)). Can theoretical factors structure detected EGA. Defaults NULL search Boolean (length = 1). Whether search parameters conducted. Defaults FALSE. Set TRUE select model variety parameters optimizes opt objective p.Numeric vector (length = 1). Probability node randomly linked nodes community. Within community edges set zero based quantile(x, prob = 1 - p.) ensuring lowest edge values set zero (.e., probable randomly connected). used EGM.type = \"standard\". Defaults NULL must set p.Numeric vector (length = 1). Probability node randomly linked nodes community. community edges set zero based quantile(x, prob = 1 - p.) ensuring lowest edge values set zero (.e., probable randomly connected). used EGM.type = \"standard\". Defaults NULL must set opt Character vector (length = 1). Fit index used select searching models (applies EGM.type = \"search\"). Available options include: \"AIC\" \"BIC\" \"CFI\" \"chisq\" \"logLik\" \"RMSEA\" \"SRMR\" \"TEFI\" \"TEFI.adj\" \"TLI\" Defaults \"SRMR\" constrained Boolean (length = 1). Whether memberships communities added constraint optimizing network loadings. Defaults TRUE ensures assigned loadings guaranteed never smaller cross-loadings. Set FALSE freely estimate loading similar exploratory factor analysis verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, community.unidimensional, EGA, net.loads","code":""},{"path":"https://r-ega.net/reference/EGM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Exploratory Graph Model — EGM","text":"Hudson F. Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/EGM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exploratory Graph Model — EGM","text":"","code":"# Get depression data data <- depression[,24:44]  # Estimate EGM (using EGA) egm_ega <- EGM(data)  # Estimate EGM (using EGA) specifying communities egm_ega_communities <- EGM(data, communities = 3)  # Estimate EGM (using EGA) specifying structure egm_ega_structure <- EGM(   data, structure = c(     1, 1, 1, 2, 1, 1, 1,     1, 1, 1, 3, 2, 2, 2,     2, 3, 3, 3, 3, 3, 2   ) )  # Estimate EGM (using standard) egm_standard <- EGM(   data, EGM.model = \"standard\",   communities = 3, # specify number of communities   p.in = 0.95, # probability of edges *in* each community   p.out = 0.80 # probability of edges *between* each community )  if (FALSE) { # \\dontrun{ # Estimate EGM (using EGA search) egm_ega_search <- EGM(   data, EGM.model = \"EGA\", search = TRUE )  # Estimate EGM (using EGA search and AIC criterion) egm_ega_search_AIC <- EGM(   data, EGM.model = \"EGA\", search = TRUE, opt = \"AIC\" )  # Estimate EGM (using search) egm_search <- EGM(   data, EGM.model = \"standard\", search = TRUE,   communities = 3, # need communities or structure   p.in = 0.95 # only need 'p.in' )} # }"},{"path":"https://r-ega.net/reference/Embed.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-delay Embedding — Embed","title":"Time-delay Embedding — Embed","text":"Reorganizes single observed time series embedded matrix. embedded matrix constructed replicates individual time series offset time. function requires two parameters, one specifies number observations used (.e., number embedded dimensions) specifies number observations offset successive embeddings","code":""},{"path":"https://r-ega.net/reference/Embed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-delay Embedding — Embed","text":"","code":"Embed(x, E, tau)"},{"path":"https://r-ega.net/reference/Embed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-delay Embedding — Embed","text":"x Numeric vector. observed time series reorganized time-delayed embedded matrix. E Numeric (length = 1). Number embedded dimensions number observations used. E = 5, example, generate matrix five columns corresponding five consecutive observations across row embedded matrix tau Numeric (length = 1). Number observations offset successive embeddings. tau one uses adjacent observations. Default tau = 1","code":""},{"path":"https://r-ega.net/reference/Embed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-delay Embedding — Embed","text":"Returns numeric matrix","code":""},{"path":"https://r-ega.net/reference/Embed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-delay Embedding — Embed","text":"Deboeck, P. R., Montpetit, M. ., Bergeman, C. S., & Boker, S. M. (2009) Using derivative estimates describe intraindividual variability multiple time scales. Psychological Methods, 14, 367-386.","code":""},{"path":"https://r-ega.net/reference/Embed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time-delay Embedding — Embed","text":"Pascal Deboeck <pascal.deboeck psych.utah.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/Embed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-delay Embedding — Embed","text":"","code":"# A time series with 8 time points time_series <- 49:56  # Time series embedding Embed(time_series, E = 5, tau = 1) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   49   50   51   52   53 #> [2,]   50   51   52   53   54 #> [3,]   51   52   53   54   55 #> [4,]   52   53   54   55   56"},{"path":"https://r-ega.net/reference/LCT.html","id":null,"dir":"Reference","previous_headings":"","what":"Loadings Comparison Test — LCT","title":"Loadings Comparison Test — LCT","text":"algorithm identify whether data generated factor network model using factor network loadings. algorithm uses heuristics based theory simulation. heuristics submitted several deep learning neural networks 240,000 samples per model varying parameters.","code":""},{"path":"https://r-ega.net/reference/LCT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loadings Comparison Test — LCT","text":"","code":"LCT(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   iter = 100,   seed = NULL,   verbose = TRUE,   ... )"},{"path":"https://r-ega.net/reference/LCT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loadings Comparison Test — LCT","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" iter Numeric (length = 1). Number replicate samples drawn multivariate normal distribution (uses MASS::mvrnorm). Defaults 100 (recommended) seed Numeric (length = 1). Defaults NULL random results. Set reproducible results. See Reproducibility PRNG details random number generation EGAnet verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress ... Additional arguments can passed auto.correlate, network.estimation, community.detection, community.consensus, EGA","code":""},{"path":"https://r-ega.net/reference/LCT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loadings Comparison Test — LCT","text":"Returns list containing: empirical Prediction model based empirical dataset bootstrap Prediction model based means loadings across bootstrap replicate samples proportion Proportions models suggested across bootstraps","code":""},{"path":"https://r-ega.net/reference/LCT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Loadings Comparison Test — LCT","text":"Model training validation  Christensen, . P., & Golino, H. (2021). Factor network model? Predictions neural networks. Journal Behavioral Data Science, 1(1), 85-126.","code":""},{"path":"https://r-ega.net/reference/LCT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Loadings Comparison Test — LCT","text":"Hudson F. Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen gmail.com>","code":""},{"path":"https://r-ega.net/reference/LCT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loadings Comparison Test — LCT","text":"","code":"# Get data data <- psych::bfi[,1:25]  if (FALSE) # Compute LCT ## Factor model LCT(data) # \\dontrun{}"},{"path":"https://r-ega.net/reference/TMFG.html","id":null,"dir":"Reference","previous_headings":"","what":"Triangulated Maximally Filtered Graph — TMFG","title":"Triangulated Maximally Filtered Graph — TMFG","text":"Applies Triangulated Maximally Filtered Graph (TMFG) filtering method (see Massara et al., 2016). TMFG method uses structural constraint limits number zero-order correlations included network (3n - 6; n number variables). TMFG algorithm begins identifying four variables largest sum correlations variables. , iteratively adds variable largest sum three correlations nodes already network variables added network. structure can associated inverse correlation matrix (.e., precision matrix) turned GGM (.e., partial correlation network) using Local-Global Inversion Method (LoGo; see Barfuss et al., 2016 details). See Details information","code":""},{"path":"https://r-ega.net/reference/TMFG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triangulated Maximally Filtered Graph — TMFG","text":"","code":"TMFG(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   partial = FALSE,   returnAllResults = FALSE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/TMFG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triangulated Maximally Filtered Graph — TMFG","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix n Numeric (length = 1). Sample size correlation matrix input data. Defaults NULL. n necessary provided better functionality EGAnet corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset partial Boolean (length = 1). Whether partial correlations output. Defaults FALSE. TMFG method based zero-order correlations; Local-Global Inversion Method (LoGo; see Barfuss et al., 2016 details) uses decomposability TMFG network obtain inverse covariance structure network (converted partial correlations). Set TRUE obtain partial correlations LoGo method returnAllResults Boolean (length = 1). Whether results returned. Defaults FALSE (network ). Set TRUE access separators cliques verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate","code":""},{"path":"https://r-ega.net/reference/TMFG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triangulated Maximally Filtered Graph — TMFG","text":"Returns network list containing: network filtered adjacency matrix separators separators (3-cliques) network cliques cliques (4-cliques) network","code":""},{"path":"https://r-ega.net/reference/TMFG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Triangulated Maximally Filtered Graph — TMFG","text":"TMFG method applies structural constraint network, restrains network retain certain number edges (3n-6, n number nodes; Massara et al., 2016). network also composed 3- 4-node cliques (.e., sets connected nodes; triangle tetrahedron, respectively). TMFG method constructs network using zero-order correlations resulting network can associated inverse covariance matrix (yielding GGM; Barfuss, Massara, Di Matteo, & Aste, 2016). Notably, TMFG can use association measure thus assume data multivariate normal. Construction begins forming tetrahedron four nodes highest sum correlations greater average correlation correlation matrix. Next, algorithm iteratively identifies node maximizes sum correlations connected set three nodes (triangles) already included network adds node network. process completed every node connected network. process, network automatically generates called planar network. planar network network drawn sphere edges crossing (often, however, networks depicted edges crossing; Tumminello, Aste, Di Matteo, & Mantegna, 2005).","code":""},{"path":"https://r-ega.net/reference/TMFG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Triangulated Maximally Filtered Graph — TMFG","text":"Local-Global Inversion Method  Barfuss, W., Massara, G. P., Di Matteo, T., & Aste, T. (2016). Parsimonious modeling information filtering networks. Physical Review E, 94, 062306. Psychometric network introduction TMFG  Christensen, . P., Kenett, Y. N., Aste, T., Silvia, P. J., & Kwapil, T. R. (2018). Network structure Wisconsin Schizotypy Scales-Short Forms: Examining psychometric network filtering approaches. Behavior Research Methods, 50, 2531-2550. Triangulated Maximally Filtered Graph  Massara, G. P., Di Matteo, T., & Aste, T. (2016). Network filtering big data: Triangulated maximally filtered graph. Journal Complex Networks, 5, 161-178.","code":""},{"path":"https://r-ega.net/reference/TMFG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Triangulated Maximally Filtered Graph — TMFG","text":"Alexander Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/TMFG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triangulated Maximally Filtered Graph — TMFG","text":"","code":"# TMFG filtered network TMFG(wmt2[,7:24]) #>            wmt1      wmt2      wmt3      wmt4      wmt5      wmt6      wmt7 #> wmt1  1.0000000 0.5308147 0.4204303 0.0000000 0.4476835 0.0000000 0.0000000 #> wmt2  0.5308147 1.0000000 0.6486396 0.0000000 0.5570605 0.5152450 0.0000000 #> wmt3  0.4204303 0.6486396 1.0000000 0.0000000 0.4143219 0.5268500 0.0000000 #> wmt4  0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.4730469 0.4453915 #> wmt5  0.4476835 0.5570605 0.4143219 0.0000000 1.0000000 0.4347379 0.0000000 #> wmt6  0.0000000 0.5152450 0.5268500 0.4730469 0.4347379 1.0000000 0.5447217 #> wmt7  0.0000000 0.0000000 0.0000000 0.4453915 0.0000000 0.5447217 1.0000000 #> wmt8  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.4894769 0.5081548 #> wmt9  0.0000000 0.4637356 0.0000000 0.0000000 0.0000000 0.5220343 0.3961022 #> wmt10 0.0000000 0.5163552 0.4776316 0.4881654 0.0000000 0.5496942 0.4761164 #> wmt11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3686565 0.4130321 #> wmt12 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3693883 #> wmt13 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt14 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.4677051 #> wmt15 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.4499222 #> wmt16 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt17 0.0000000 0.0000000 0.0000000 0.3468635 0.0000000 0.4349659 0.3866176 #> wmt18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>            wmt8      wmt9     wmt10     wmt11     wmt12     wmt13     wmt14 #> wmt1  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt2  0.0000000 0.4637356 0.5163552 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt3  0.0000000 0.0000000 0.4776316 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt4  0.0000000 0.0000000 0.4881654 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt5  0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt6  0.4894769 0.5220343 0.5496942 0.3686565 0.0000000 0.0000000 0.0000000 #> wmt7  0.5081548 0.3961022 0.4761164 0.4130321 0.3693883 0.0000000 0.4677051 #> wmt8  1.0000000 0.4857008 0.0000000 0.3605484 0.0000000 0.0000000 0.0000000 #> wmt9  0.4857008 1.0000000 0.5677137 0.0000000 0.4362098 0.4378465 0.5266469 #> wmt10 0.0000000 0.5677137 1.0000000 0.0000000 0.0000000 0.4171669 0.4578349 #> wmt11 0.3605484 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 #> wmt12 0.0000000 0.4362098 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 #> wmt13 0.0000000 0.4378465 0.4171669 0.0000000 0.0000000 1.0000000 0.0000000 #> wmt14 0.0000000 0.5266469 0.4578349 0.0000000 0.0000000 0.0000000 1.0000000 #> wmt15 0.0000000 0.4350710 0.0000000 0.0000000 0.4490240 0.0000000 0.4541116 #> wmt16 0.0000000 0.4457227 0.4401890 0.0000000 0.0000000 0.4150783 0.3890664 #> wmt17 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt18 0.0000000 0.0000000 0.2864095 0.0000000 0.0000000 0.0000000 0.3283947 #>           wmt15     wmt16     wmt17     wmt18 #> wmt1  0.0000000 0.0000000 0.0000000 0.0000000 #> wmt2  0.0000000 0.0000000 0.0000000 0.0000000 #> wmt3  0.0000000 0.0000000 0.0000000 0.0000000 #> wmt4  0.0000000 0.0000000 0.3468635 0.0000000 #> wmt5  0.0000000 0.0000000 0.0000000 0.0000000 #> wmt6  0.0000000 0.0000000 0.4349659 0.0000000 #> wmt7  0.4499222 0.0000000 0.3866176 0.0000000 #> wmt8  0.0000000 0.0000000 0.0000000 0.0000000 #> wmt9  0.4350710 0.4457227 0.0000000 0.0000000 #> wmt10 0.0000000 0.4401890 0.0000000 0.2864095 #> wmt11 0.0000000 0.0000000 0.0000000 0.0000000 #> wmt12 0.4490240 0.0000000 0.0000000 0.0000000 #> wmt13 0.0000000 0.4150783 0.0000000 0.0000000 #> wmt14 0.4541116 0.3890664 0.0000000 0.3283947 #> wmt15 1.0000000 0.0000000 0.0000000 0.0000000 #> wmt16 0.0000000 1.0000000 0.0000000 0.3348244 #> wmt17 0.0000000 0.0000000 1.0000000 0.0000000 #> wmt18 0.0000000 0.3348244 0.0000000 1.0000000 #> attr(,\"methods\") #> attr(,\"methods\")$corr #> [1] \"auto\" #>  #> attr(,\"methods\")$partial #> [1] FALSE #>   # Partial correlations using the LoGo method TMFG(wmt2[,7:24], partial = TRUE) #>             wmt1       wmt2        wmt3      wmt4        wmt5       wmt6 #> wmt1  0.00000000 0.26318198 0.097775847 0.0000000 0.204527092 0.00000000 #> wmt2  0.26318198 0.00000000 0.386184801 0.0000000 0.283583405 0.04565927 #> wmt3  0.09777585 0.38618480 0.000000000 0.0000000 0.003334298 0.19477357 #> wmt4  0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.14187094 #> wmt5  0.20452709 0.28358341 0.003334298 0.0000000 0.000000000 0.15313759 #> wmt6  0.00000000 0.04565927 0.194773567 0.1418709 0.153137594 0.00000000 #> wmt7  0.00000000 0.00000000 0.000000000 0.1466689 0.000000000 0.14721836 #> wmt8  0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.13519759 #> wmt9  0.00000000 0.10810521 0.000000000 0.0000000 0.000000000 0.12925700 #> wmt10 0.00000000 0.13690147 0.101979977 0.2257212 0.000000000 0.09105689 #> wmt11 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.11574943 #> wmt12 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.00000000 #> wmt13 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.00000000 #> wmt14 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.00000000 #> wmt15 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.00000000 #> wmt16 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.00000000 #> wmt17 0.00000000 0.00000000 0.000000000 0.1298545 0.000000000 0.20469347 #> wmt18 0.00000000 0.00000000 0.000000000 0.0000000 0.000000000 0.00000000 #>              wmt7      wmt8       wmt9      wmt10     wmt11     wmt12     wmt13 #> wmt1   0.00000000 0.0000000  0.0000000 0.00000000 0.0000000 0.0000000 0.0000000 #> wmt2   0.00000000 0.0000000  0.1081052 0.13690147 0.0000000 0.0000000 0.0000000 #> wmt3   0.00000000 0.0000000  0.0000000 0.10197998 0.0000000 0.0000000 0.0000000 #> wmt4   0.14666893 0.0000000  0.0000000 0.22572120 0.0000000 0.0000000 0.0000000 #> wmt5   0.00000000 0.0000000  0.0000000 0.00000000 0.0000000 0.0000000 0.0000000 #> wmt6   0.14721836 0.1351976  0.1292570 0.09105689 0.1157494 0.0000000 0.0000000 #> wmt7   0.00000000 0.2332657 -0.1418146 0.09702665 0.1935173 0.1183172 0.0000000 #> wmt8   0.23326567 0.0000000  0.2237212 0.00000000 0.1400661 0.0000000 0.0000000 #> wmt9  -0.14181458 0.2237212  0.0000000 0.15971303 0.0000000 0.2050178 0.1783173 #> wmt10  0.09702665 0.0000000  0.1597130 0.00000000 0.0000000 0.0000000 0.1466414 #> wmt11  0.19351735 0.1400661  0.0000000 0.00000000 0.0000000 0.0000000 0.0000000 #> wmt12  0.11831721 0.0000000  0.2050178 0.00000000 0.0000000 0.0000000 0.0000000 #> wmt13  0.00000000 0.0000000  0.1783173 0.14664137 0.0000000 0.0000000 0.0000000 #> wmt14  0.17855513 0.0000000  0.2141408 0.07059072 0.0000000 0.0000000 0.0000000 #> wmt15  0.18110329 0.0000000  0.1141128 0.00000000 0.0000000 0.2571845 0.0000000 #> wmt16  0.00000000 0.0000000  0.1271244 0.13320286 0.0000000 0.0000000 0.2219959 #> wmt17  0.13902348 0.0000000  0.0000000 0.00000000 0.0000000 0.0000000 0.0000000 #> wmt18  0.00000000 0.0000000  0.0000000 0.07521198 0.0000000 0.0000000 0.0000000 #>            wmt14     wmt15     wmt16     wmt17      wmt18 #> wmt1  0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt2  0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt3  0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt4  0.00000000 0.0000000 0.0000000 0.1298545 0.00000000 #> wmt5  0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt6  0.00000000 0.0000000 0.0000000 0.2046935 0.00000000 #> wmt7  0.17855513 0.1811033 0.0000000 0.1390235 0.00000000 #> wmt8  0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt9  0.21414082 0.1141128 0.1271244 0.0000000 0.00000000 #> wmt10 0.07059072 0.0000000 0.1332029 0.0000000 0.07521198 #> wmt11 0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt12 0.00000000 0.2571845 0.0000000 0.0000000 0.00000000 #> wmt13 0.00000000 0.0000000 0.2219959 0.0000000 0.00000000 #> wmt14 0.00000000 0.1920542 0.1052853 0.0000000 0.16557114 #> wmt15 0.19205422 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt16 0.10528526 0.0000000 0.0000000 0.0000000 0.19041163 #> wmt17 0.00000000 0.0000000 0.0000000 0.0000000 0.00000000 #> wmt18 0.16557114 0.0000000 0.1904116 0.0000000 0.00000000 #> attr(,\"methods\") #> attr(,\"methods\")$corr #> [1] \"auto\" #>  #> attr(,\"methods\")$partial #> [1] TRUE #>"},{"path":"https://r-ega.net/reference/UVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique Variable Analysis — UVA","title":"Unique Variable Analysis — UVA","text":"Identifies locally dependent (redundant) variables multivariate dataset using EBICglasso.qgraph network estimation method weighted topological overlap (see Christensen, Garrido, & Golino, 2023 details)","code":""},{"path":"https://r-ega.net/reference/UVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique Variable Analysis — UVA","text":"","code":"UVA(   data = NULL,   network = NULL,   n = NULL,   key = NULL,   uva.method = c(\"MBR\", \"EJP\"),   cut.off = 0.25,   reduce = TRUE,   reduce.method = c(\"latent\", \"mean\", \"remove\", \"sum\"),   auto = TRUE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/UVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique Variable Analysis — UVA","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix. Defaults NULL network Symmetric matrix data frame. symmetric network. Defaults NULL data network provided, UVA use network data (rather estimating network data) n Numeric (length = 1). Sample size data provided correlation matrix. Defaults NULL key Character vector (length = ncol(data)). Item key labeling variables results uva.method Character (length = 1). Whether method described Christensen, Garrido, Golino (2023) publication Multivariate Behavioral Research (\"MBR\") Christensen, Golino, Silvia (2020) publication European Journal Personality (\"EJP\") used. Defaults \"MBR\" Based simulation accumulating empirical evidence, methods described Christensen, Golino, Silvia (2020) adaptive alpha outdated. Evidence supports using single cut-value (regardless continuous, polytomous, dichotomous data; Christensen, Garrido, & Golino, 2023) cut.Numeric (length = 1). Cut-used determine pairwise wto values considered locally dependent (redundant). Must values 0 1. Defaults 0.25 cut-value recommended based extensive simulation (Christensen, Garrido, & Golino, 2023). Printing result provide gradient pairwise redundancies increments 0.20, 0.25, 0.30. Use print summary output rather adjusting cut-value reduce Logical (length = 1). Whether redundancies reduced data. Defaults TRUE reduce.method Character (length = 1). Method reduce redundancies. Available options: \"latent\" — Computes latent variables using cfa three redundant variables. variables coded direction, recoded necessary. warning produced variables flipped \"mean\" — Computes mean redundant variables. variables coded direction, recoded necessary. warning produced variables flipped \"remove\" — Removes one variable set redundant variables \"sum\" — Computes sum redundant variables. variables coded direction, recoded necessary. warning produced variables flipped auto Logical (length = 1). Whether reduce occur automatically. reduce.method = \"remove\", automated decision process follows: Two variables — variable lowest maximum wto variables (one redundant ) retained removed Three variables — variable highest mean wto variables redundant one another retained others removed verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed old versions UVA EGA cfa","code":""},{"path":"https://r-ega.net/reference/UVA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unique Variable Analysis — UVA","text":"recent simulation implementation  Christensen, . P., Garrido, L. E., & Golino, H. (2023). Unique variable analysis: network psychometrics method detect local dependence. Multivariate Behavioral Research. Conceptual foundation outdated methods  Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34(6), 1095-1108. Weighted topological overlap  Nowick, K., Gernat, T., Almaas, E., & Stubbs, L. (2009). Differences human chimpanzee gene expression patterns define evolving network transcription factors brain. Proceedings National Academy Sciences, 106, 22358-22363. Selection CFA Estimator  Rhemtulla, M., Brosseau-Liard, P. E., & Savalei, V. (2012). can categorical variables treated continuous? comparison robust continuous categorical SEM estimation methods suboptimal conditions. Psychological Methods, 17(3), 354-373.","code":""},{"path":"https://r-ega.net/reference/UVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique Variable Analysis — UVA","text":"","code":"# Perform UVA uva.wmt <- UVA(wmt2[,7:24])  # Show summary summary(uva.wmt) #> Variable pairs with wTO > 0.30 (large-to-very large redundancy) #>  #> ---- #>  #> Variable pairs with wTO > 0.25 (moderate-to-large redundancy) #>  #> ---- #>  #> Variable pairs with wTO > 0.20 (small-to-moderate redundancy) #>  #>  node_i node_j  wto #>    wmt2   wmt3 0.25"},{"path":"https://r-ega.net/reference/auto.correlate.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic correlations — auto.correlate","title":"Automatic correlations — auto.correlate","text":"wrapper similar cor_auto. minor adjustments make function simpler function within EGAnet. NA values treated categories (behavior differs cor_auto)","code":""},{"path":"https://r-ega.net/reference/auto.correlate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic correlations — auto.correlate","text":"","code":"auto.correlate(   data,   corr = c(\"cosine\", \"kendall\", \"pearson\", \"spearman\"),   ordinal.categories = 7,   forcePD = TRUE,   na.data = c(\"pairwise\", \"listwise\"),   empty.method = c(\"none\", \"zero\", \"all\"),   empty.value = c(\"none\", \"point_five\", \"one_over\"),   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/auto.correlate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic correlations — auto.correlate","text":"data Matrix data frame. consist variables used analysis corr Character (length = 1). standard correlation method used. Defaults \"pearson\". Using \"pearson\" compute polychoric, tetrachoric, polyserial, biserial correlations categorical categorical/continuous correlations default. obtain \"pearson\" correlations regardless, use cor. options \"kendall\" \"spearman\" provided completeness use cor. cosine also available ordinal.categories Numeric (length = 1). number categories variable considered continuous. Defaults 7 categories 8 considered continuous forcePD Boolean (length = 1). Whether positive definite matrix enforced. Defaults TRUE na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset empty.method Character (length = 1). Method empty cell correction polychoric.matrix. Defaults \"none\" Available options: \"none\" — Adds value (empty.value = \"none\") empirical joint frequency table two variables \"zero\" — Adds empty.value cells zero joint frequency table two variables \"\" — Adds empty.value joint frequency table two variables empty.value Character (length = 1). Value add joint frequency table cells polychoric.matrix. Defaults \"none\". Accepts numeric values 0 1 specific methods: \"none\" — Adds value (0) empirical joint  frequency table two variables \"point_five\" — Adds 0.5 cells defined empty.method \"one_over\" — Adds 1 / n n equals number cells based empty.method. empty.method = \"zero\", n equals number zero cells verbose Boolean (length = 1). Whether messages printed. Defaults FALSE ... actually used makes easier general functionality package","code":""},{"path":"https://r-ega.net/reference/auto.correlate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatic correlations — auto.correlate","text":"Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/auto.correlate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic correlations — auto.correlate","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Obtain correlations wmt_corr <- auto.correlate(wmt)"},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"Tests Ergodicity Information Index obtained empirical sample distribution EII obtained variant bootstrap sampling (see Details procedure)","code":""},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"","code":"boot.ergoInfo(   dynEGA.object,   EII,   use = c(\"edge.list\", \"unweighted\", \"weighted\"),   shuffles = 5000,   iter = 100,   ncores,   verbose = TRUE )"},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"dynEGA.object dynEGA dynEGA.ind.pop object. dynEGA object, level = c(\"individual\", \"population\") required EII ergoInfo object used estimate Empirical Ergodicity Information Index estimated value EII estimated using ergoInfo function. Inherits use ergoInfo. ergoInfo object provided, estimated use Character (length = 1). string indicating network element used compute algorithm complexity, list edges weights network. Defaults use = \"unweighted\". Current options : \"edge.list\" — Calculates algorithm complexity using list edges \"unweighted\" — Calculates algorithm complexity using binary weights encoded prime transformed network. 0 = edge absent 1 = edge present \"weighted\" — Calculates algorithm complexity using weights encoded prime-weight transformed network shuffles Numeric. Number shuffles used compute Kolmogorov complexity. Defaults 5000 iter Numeric (length = 1). Number replica samples generate bootstrap analysis. Defaults 100 (1000 robustness) ncores Numeric (length = 1). Number cores use computing results. Defaults ceiling(parallel::detectCores() / 2) half computer's processing power. Set 1 use parallel computing unsure many cores computer , type: parallel::detectCores() verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress","code":""},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"Returns list containing: empirical.ergoInfo Empirical Ergodicity Information Index boot.ergoInfo values Ergodicity Information Index obtained bootstrap p.value two-sided p-value bootstrap test Ergodicity Information Index. null hypothesis empirical Ergodicity Information index equal greater expected value EII small variation population structure effect Indicates wheter empirical EII greater less bootstrap distribution EII. interpretation can interpret result test plain English","code":""},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"traditional bootstrap sampling, individual participants resampled replacement empirical sample. process time consuming carried across v number variables, n number participants, t number time points, number iterations. Instead, boot.ergoInfo uses premise ergodic process establish efficient test works directly sample's networks. ergodic process, expectation individuals systematic relationship population. Destroying relationship result significant loss information. Following conjecture, boot.ergoInfo shuffles random subset edges exist population equal number shared edges individual. individual's unique edges remain , controlling unique information. result replicate individual contains total number edges actual individual shared information population scrambled. process repeated individual create replicate sample repeated X iterations (e.g., 100). approach creates sampling distribution represents expected information population individuals random process generates shared information . shared information population individuals empirical sample sufficiently meaningful, process result significant information loss. interpret results: result boot.ergoInfo sampling distribution EII values expected process random (null distribution). empirical EII value greater significantly different null distribution, empirical data can expected generated nonergodic process population structure sufficient describe individuals. empirical EII value significantly lower null distribution, empirical data can described population structure – population structure sufficient describe individuals.","code":""},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"Original Implementation  Golino, H., Nesselroade, J. R., & Christensen, . P. (2022). Toward psychology individuals: ergodicity information index bottom-approach finding generalizations. PsyArXiv.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"Hudson Golino <hfg9s virginia.edu> & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/boot.ergoInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Test for the Ergodicity Information Index — boot.ergoInfo","text":"","code":"# Obtain simulated data sim.data <- sim.dynEGA  if (FALSE) { # \\dontrun{ # Dynamic EGA individual and population structures dyn1 <- dynEGA.ind.pop(   data = sim.dynEGA[,-26], n.embed = 5, tau = 1,   delta = 1, id = 25, use.derivatives = 1,   model = \"glasso\", ncores = 2, corr = \"pearson\" )  # Empirical Ergodicity Information Index eii1 <- ergoInfo(dynEGA.object = dyn1, use = \"unweighted\")  # Bootstrap Test for Ergodicity Information Index testing.ergoinfo <- boot.ergoInfo(   dynEGA.object = dyn1, EII = eii1,   ncores = 2, use = \"unweighted\" )  # Plot result plot(testing.ergoinfo)  # Example using `dynEGA` dyn2 <- dynEGA(   data = sim.dynEGA, n.embed = 5, tau = 1,   delta = 1, use.derivatives = 1, ncores = 2,   level = c(\"individual\", \"population\") )  # Empirical Ergodicity Information Index eii2 <- ergoInfo(dynEGA.object = dyn2, use = \"unweighted\")  # Bootstrap Test for Ergodicity Information Index testing.ergoinfo2 <- boot.ergoInfo(   dynEGA.object = dyn2, EII = eii2,   ncores = 2 )  # Plot result plot(testing.ergoinfo2)} # }"},{"path":"https://r-ega.net/reference/boot.wmt.html","id":null,"dir":"Reference","previous_headings":"","what":"bootEGA Results of wmt2Data — boot.wmt","title":"bootEGA Results of wmt2Data — boot.wmt","text":"bootEGA results boot.wmt <- bootEGA(wmt2[,7:24], seed = 1234)","code":""},{"path":"https://r-ega.net/reference/boot.wmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bootEGA Results of wmt2Data — boot.wmt","text":"","code":"data(boot.wmt)"},{"path":"https://r-ega.net/reference/boot.wmt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"bootEGA Results of wmt2Data — boot.wmt","text":"list 12 objects (see Value bootEGA)","code":""},{"path":"https://r-ega.net/reference/boot.wmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bootEGA Results of wmt2Data — boot.wmt","text":"","code":"data(\"boot.wmt\")"},{"path":"https://r-ega.net/reference/bootEGA.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Exploratory Graph Analysis — bootEGA","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"bootEGA Estimates number dimensions iter bootstraps using empirical zero-order correlation matrix (\"parametric\") \"resampling\" empirical dataset (non-parametric). bootEGA estimates typical median network structure, formed median mean pairwise (partial) correlations iter bootstraps (see Details information typical median network structure).","code":""},{"path":"https://r-ega.net/reference/bootEGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"","code":"bootEGA(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   iter = 500,   type = c(\"parametric\", \"resampling\"),   ncores,   EGA.type = c(\"EGA\", \"EGA.fit\", \"hierEGA\", \"riEGA\"),   plot.itemStability = TRUE,   typicalStructure = FALSE,   plot.typicalStructure = FALSE,   seed = NULL,   verbose = TRUE,   ... )"},{"path":"https://r-ega.net/reference/bootEGA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"data Matrix data frame. consist variables used analysis n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" iter Numeric (length = 1). Number replica samples generate bootstrap analysis. Defaults 500 (recommended) type Character (length = 1). type bootstrap performed? Defaults \"parametric\". Available options: \"parametric\" — Generates iter new datasets (multivariate normal random distributions) based original dataset using mvrnorm \"resampling\" — Generates iter new datasets random subsamples original data ncores Numeric (length = 1). Number cores use computing results. Defaults ceiling(parallel::detectCores() / 2) half computer's processing power. Set 1 use parallel computing unsure many cores computer , type: parallel::detectCores() EGA.type Character (length = 1). Type EGA model use. Defaults \"EGA\" Available options: \"EGA\" — Uses standard exploratory graph analysis \"EGA.fit\" — Uses tefi determine best fit EGA \"hierEGA\" — Uses hierarchical exploratory graph analysis \"riEGA\" — Uses random-intercept exploratory graph analysis Arguments EGA.type can added (see links details specific function arguments) plot.itemStability Boolean (length = 1). plot produced item.replication? Defaults TRUE typicalStructure Boolean (length = 1). TRUE, returns median (\"glasso\" \"BGGM\") mean (\"TMFG\") network structure estimates dimensions (see Details information). Defaults FALSE plot.typicalStructure Boolean (length = 1). TRUE, returns plot typical network structure. Defaults FALSE seed Numeric (length = 1). Defaults NULL random results. Set reproducible results. See Reproducibility PRNG details random number generation EGAnet verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress ... Additional arguments can passed auto.correlate, network.estimation, community.detection, community.consensus, EGA, EGA.fit, hierEGA, riEGA","code":""},{"path":"https://r-ega.net/reference/bootEGA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"Returns list containing: iter Number replica samples bootstrap bootGraphs list containing networks replica sample boot.wc matrix membership assignments replica network variables columns replicas across rows boot.ndim Number dimensions identified replica sample summary.table data frame containing number replica samples, median, standard deviation, standard error, 95% confidence intervals, quantiles (lower = 2.5% upper = 97.5%) frequency data frame containing proportion times number dimensions identified (e.g., .85 1,000 = 850 times specific number dimensions found) TEFI tefi value replica sample type Type bootstrap used EGA Output empirical EGA results (output vary based EGA.type) EGA.type Type *EGA function used typicalGraph list containing: graph — Network matrix median network structure typical.dim.variables — ordered matrix item allocation wc — Membership assignments median network plot.typical.ega Plot output plot.typicalStructure = TRUE","code":""},{"path":"https://r-ega.net/reference/bootEGA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"typical network structure derived median (mean) value pairwise relationship. values tend reflect \"typical\" value taken edge across bootstrap networks. Afterward, community detection algorithm applied typical network bootstrap networks. community detection algorithm applied typical network structure, possibility community algorithm determines different number dimensions median number derived bootstraps. typical network structure (number dimensions) may match empirical EGA number dimensions median number dimensions bootstrap. result known bug.","code":""},{"path":"https://r-ega.net/reference/bootEGA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"Original implementation bootEGA  Christensen, . P., & Golino, H. (2021). Estimating stability number factors via Bootstrap Exploratory Graph Analysis: tutorial. Psych, 3(3), 479-500.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/bootEGA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/bootEGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Exploratory Graph Analysis — bootEGA","text":"","code":"# Load data wmt <- wmt2[,7:24]  if (FALSE) { # \\dontrun{ # Standard EGA parametric example boot.wmt <- bootEGA(   data = wmt, iter = 500,   type = \"parametric\", ncores = 2 )  # Standard resampling example boot.wmt <- bootEGA(   data = wmt, iter = 500,   type = \"resampling\", ncores = 2 )  # Example using {igraph} `cluster_*` function boot.wmt.spinglass <- bootEGA(   data = wmt, iter = 500,   algorithm = igraph::cluster_spinglass,   # use any function from {igraph}   type = \"parametric\", ncores = 2 )  # EGA fit example boot.wmt.fit <- bootEGA(   data = wmt, iter = 500,   EGA.type = \"EGA.fit\",   type = \"parametric\", ncores = 2 )  # Hierarchical EGA example boot.wmt.hier <- bootEGA(   data = wmt, iter = 500,   EGA.type = \"hierEGA\",   type = \"parametric\", ncores = 2 )  # Random-intercept EGA example boot.wmt.ri <- bootEGA(   data = wmt, iter = 500,   EGA.type = \"riEGA\",   type = \"parametric\", ncores = 2 )} # }"},{"path":"https://r-ega.net/reference/color_palette_EGA.html","id":null,"dir":"Reference","previous_headings":"","what":"EGA Color Palettes — color_palette_EGA","title":"EGA Color Palettes — color_palette_EGA","text":"Color palettes plotting ggnet2 EGA network plots","code":""},{"path":"https://r-ega.net/reference/color_palette_EGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EGA Color Palettes — color_palette_EGA","text":"","code":"color_palette_EGA(   name = c(\"polychrome\", \"blue.ridge1\", \"blue.ridge2\", \"rainbow\", \"rio\", \"itacare\",     \"grayscale\"),   wc,   sorted = FALSE )"},{"path":"https://r-ega.net/reference/color_palette_EGA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EGA Color Palettes — color_palette_EGA","text":"name Character. Name color scheme (see RColorBrewer). Defaults \"polychrome\". EGA palettes: \"polychrome\" — Default 40 color palette \"grayscale\" — \"grayscale\", \"greyscale\", \"colorblind\" produce plots suitable publication purposes \"blue.ridge1\" — Palette inspired Blue Ridge Mountains \"blue.ridge2\" — Second palette inspired Blue Ridge Mountains \"rainbow\" — Rainbow colors. Default qgraph \"rio\" — Palette inspired Rio de Janiero, Brazil \"itacare\" — Palette inspired Itacare, Brazil custom colors, enter HEX codes dimension vector wc Numeric vector. vector representing community (dimension) membership node network. NA values mean node disconnected network sorted Boolean. colors sorted wc? Defaults FALSE","code":""},{"path":"https://r-ega.net/reference/color_palette_EGA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EGA Color Palettes — color_palette_EGA","text":"Vector colors community memberships","code":""},{"path":[]},{"path":"https://r-ega.net/reference/color_palette_EGA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EGA Color Palettes — color_palette_EGA","text":"Hudson Golino <hfg9s virginia.edu>, Alexander P. Christensen <alexpaulchristensen gmail.com>","code":""},{"path":"https://r-ega.net/reference/color_palette_EGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EGA Color Palettes — color_palette_EGA","text":"","code":"# Default color_palette_EGA(name = \"polychrome\", wc = ega.wmt$wc) #>  [1] \"#F03D2D\" \"#F03D2D\" \"#F03D2D\" \"#F03D2D\" \"#F03D2D\" \"#90DDF0\" \"#90DDF0\" #>  [8] \"#90DDF0\" \"#90DDF0\" \"#90DDF0\" \"#90DDF0\" \"#90DDF0\" \"#90DDF0\" \"#90DDF0\" #> [15] \"#90DDF0\" \"#90DDF0\" \"#90DDF0\" \"#90DDF0\"  # Blue Ridge Moutains 1 color_palette_EGA(name = \"blue.ridge1\", wc = ega.wmt$wc) #>  [1] \"#272a39\" \"#272a39\" \"#272a39\" \"#272a39\" \"#272a39\" \"#24547e\" \"#24547e\" #>  [8] \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" #> [15] \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\"  # Custom color_palette_EGA(name = c(\"#7FD1B9\", \"#24547e\"), wc = ega.wmt$wc) #>   #7FD1B9   #7FD1B9   #7FD1B9   #7FD1B9   #7FD1B9   #24547e   #24547e   #24547e  #> \"#7FD1B9\" \"#7FD1B9\" \"#7FD1B9\" \"#7FD1B9\" \"#7FD1B9\" \"#24547e\" \"#24547e\" \"#24547e\"  #>   #24547e   #24547e   #24547e   #24547e   #24547e   #24547e   #24547e   #24547e  #> \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\" \"#24547e\"  #>   #24547e   #24547e  #> \"#24547e\" \"#24547e\""},{"path":"https://r-ega.net/reference/community.compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares Community Detection Solutions Using Permutation — community.compare","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"permutation implementation determine statistical significance whether community comparison measure different zero","code":""},{"path":"https://r-ega.net/reference/community.compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"","code":"community.compare(   base,   comparison,   method = c(\"vi\", \"nmi\", \"split.join\", \"rand\", \"adjusted.rand\"),   iter = 1000,   shuffle.base = TRUE,   verbose = TRUE,   seed = NULL )"},{"path":"https://r-ega.net/reference/community.compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"base Character numeric vector. vector characters numbers treated baseline communities comparison Character numeric vector (length = length(base)). vector characters numbers treated baseline communities method Character (length = 1). Comparison metrics compare. Defaults \"adjusted.rand\". Available options: \"vi\" — Variation information (Meila, 2003) \"nmi\" — Normalized mutual information (Danon et al., 2003) \"split.join\" — Split-join distance (Dongen, 2000) \"rand\" — Rand index (Rand, 1971) \"adjusted.rand\" — adjusted Rand index (Hubert & Arabie, 1985; Steinley, 2004) iter Numeric (length = 1). Number permutations perform. Defaults 1000 (recommended) shuffle.base Boolean (length = 1). Whether base cluster solution shuffled. Defaults TRUE remain consistent original implementation (Qannari et al., 2014); however, theoretical standpoint, might make sense shuffle comparison determine whether specifically different recognized base verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress seed Numeric (length = 1). Defaults NULL random results. Set reproducible results. See Reproducibility PRNG details random number generation EGAnet","code":""},{"path":"https://r-ega.net/reference/community.compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"Returns data frame containing method used (Method), empirical observed value (Empirical), p-value based permutation test (p.value)","code":""},{"path":"https://r-ega.net/reference/community.compare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"Implementation Permutation Test  Qannari, E. M., Courcoux, P., & Faye, P. (2014). Significance test adjusted Rand index. Application free sorting task. Food Quality Preference, 32, 93–97. Variation Information  Meila, M. (2003, August). Comparing clusterings variation information. Learning Theory Kernel Machines: 16th Annual Conference Learning Theory 7th Kernel Workshop, COLT/Kernel 2003, Washington, DC, USA, August 24-27, 2003. Proceedings (pp. 173-187). Berlin, DE: Springer Berlin Heidelberg. Normalized Mutual Information  Danon, L., Diaz-Guilera, ., Duch, J., & Arenas, . (2005). Comparing community structure identification. Journal Statistical Mechanics: Theory Experiment, 2005(09), P09008. Split-join Distance  Dongen, S. (2000). Performance criteria graph clustering Markov cluster experiments. CWI (Centre Mathematics Computer Science). Rand Index  Rand, W. M. (1971). Objective criteria evaluation clustering methods. Journal American Statistical Association, 66(336), 846-850. Adjusted Rand Index  Hubert, L., & Arabie, P. (1985). Comparing partitions. Journal Classification, 2, 193-218. Steinley, D. (2004). Properties Hubert-Arabie adjusted rand index. Psychological Methods, 9(3), 386.","code":""},{"path":"https://r-ega.net/reference/community.compare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/community.compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares Community Detection Solutions Using Permutation — community.compare","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate network network <- EBICglasso.qgraph(data = wmt)  # Compute Edge Betweenness edge_between <- community.detection(network, algorithm = \"edge_betweenness\") #> Warning: At vendor/cigraph/src/community/edge_betweenness.c:503 : Membership vector will be selected based on the highest modularity score.  # Compute Fast Greedy fast_greedy <- community.detection(network, algorithm = \"fast_greedy\")  # Perform permutation test community.compare(edge_between, fast_greedy) #> Warning: This implementation of `community.compare` is experimental.  #>  #> The underlying function and/or output may change until the results have been appropriately vetted and validated. #> Warning: Some values were NA. These indices were removed: 3 #> Argument 'seed' is set to `NULL`. Results will not be reproducible. Set 'seed' for reproducible results #>                Method Empirical p.value #> 1 Adjusted Rand Index 0.2724426   0.005"},{"path":"https://r-ega.net/reference/community.consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"Applies consensus clustering method introduced (Lancichinetti & Fortunato, 2012). original implementation method applies community detection algorithm repeatedly network. stochastic networks, algorithm likely identify different community solutions many repeated applications.","code":""},{"path":"https://r-ega.net/reference/community.consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"","code":"community.consensus(   network,   order = c(\"lower\", \"higher\"),   resolution = 1,   consensus.method = c(\"highest_modularity\", \"iterative\", \"most_common\", \"lowest_tefi\"),   consensus.iter = 1000,   correlation.matrix = NULL,   allow.singleton = FALSE,   membership.only = TRUE,   ... )"},{"path":"https://r-ega.net/reference/community.consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"network Matrix igraph network object order Character (length = 1). Defaults \"higher\". Whether \"lower\" \"higher\" order memberships Louvain algorithm obtained consensus. \"lower\" order Louvain memberships first initial pass Louvain algorithm whereas \"higher\" order Louvain memberships last pass Louvain algorithm resolution Numeric (length = 1). parameter adjusts modularity allow algorithm prefer smaller (resolution > 1) larger (0 < resolution < 1) communities. Defaults 1 (standard modularity computation) consensus.method Character (length = 1). Defaults \"most_common\". Available options arriving consensus (Note: methods except \"iterative\" considered experimental validated): \"highest_modularity\" — EXPERIMENTAL. Selects community solution highest modularity across applications. Modularity reasonable metric identifying number communities network comes limitations (e.g., resolution limit) \"iterative\" — original approach proposed Lancichinetti & Fortunato (2012). See \"Details\" information \"most_common\" — Selects community solution appears frequently across applications. idea behind method solution appears often likely solution algorithm well reproducible. Can less stable number nodes increase requiring larger value consensus.iter.  method default \"lowest_tefi\" — EXPERIMENTAL. Selects community solution lowest Total Entropy Fit Index (tefi) across applications. TEFI reasonable metric identify number communities network based Golino, Moulder et al. (2020) consensus.iter Numeric (length = 1). Number algorithm applications network. Defaults 1000 correlation.matrix Symmetric matrix. Used computation tefi. needed consensus.method = \"tefi\" allow.singleton Boolean (length = 1). Whether singleton single node communities allowed. Defaults FALSE. FALSE, singleton communities set missing (NA); otherwise, TRUE, singleton communities allowed membership.Boolean. Whether memberships output. Defaults TRUE. Set FALSE obtain output community detection algorithm ... actually used makes easier general functionality package","code":""},{"path":"https://r-ega.net/reference/community.consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"Returns either vector selected solution list membership.= FALSE: selected_solution Resulting solution consensus method memberships Matrix memberships across consensus iterations proportion_table methods use frequency, table reports frequencies alongside corresponding memberships","code":""},{"path":"https://r-ega.net/reference/community.consensus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"goal consensus clustering method identify stable solution across algorithm applications derive \"consensus\" clustering. standard \"iterative\" approach apply community detection algorithm N times. , co-occurrence matrix created representing often pair nodes co-occurred across applications. Based cut-value (e.g., 0.30), co-occurrences value set zero, forming \"new\" sparse network. procedure proceeds nodes co-occur nodes community (proportion 1.00). Variations procedure also available package experimental. Use experimental procedures caution. work necessary experimental procedures validated time, seed setting consensus clustering supported","code":""},{"path":"https://r-ega.net/reference/community.consensus.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"Louvain algorithm  Blondel, V. D., Guillaume, J.-L., Lambiotte, R., & Lefebvre, E. (2008). Fast unfolding communities large networks. Journal Statistical Mechanics: Theory Experiment, 2008(10), P10008. Consensus clustering  Lancichinetti, ., & Fortunato, S. (2012). Consensus clustering complex networks. Scientific Reports, 2(1), 1–7. Entropy fit indices  Golino, H., Moulder, R. G., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (2020). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research.","code":""},{"path":"https://r-ega.net/reference/community.consensus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/community.consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies the Consensus Clustering Method (Louvain only) — community.consensus","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate correlation matrix correlation.matrix <- auto.correlate(wmt)  # Estimate network network <- EBICglasso.qgraph(data = wmt)  # Compute standard Louvain with highest modularity approach community.consensus(   network,   consensus.method = \"highest_modularity\" ) #> Consensus Method: Highest Modularity (1000 iterations) #> Algorithm: Louvain #> Order: Higher #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute standard Louvain with iterative (original) approach community.consensus(   network,   consensus.method = \"iterative\" ) #> Consensus Method: Iterative (1000 iterations) #> Algorithm: Louvain #> Order: Higher #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute standard Louvain with most common approach community.consensus(   network,   consensus.method = \"most_common\" ) #> Consensus Method: Most Common (1000 iterations) #> Algorithm: Louvain #> Order: Higher #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute standard Louvain with lowest TEFI approach community.consensus(   network,   consensus.method = \"lowest_tefi\",   correlation.matrix = correlation.matrix ) #> Consensus Method: Lowest TEFI (1000 iterations) #> Algorithm: Louvain #> Order: Higher #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2"},{"path":"https://r-ega.net/reference/community.detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Community Detection Algorithm — community.detection","title":"Apply a Community Detection Algorithm — community.detection","text":"General function apply community detection algorithms available igraph. Follows EGAnet approach setting singleton disconnected nodes missing (NA)","code":""},{"path":"https://r-ega.net/reference/community.detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Community Detection Algorithm — community.detection","text":"","code":"community.detection(   network,   algorithm = c(\"edge_betweenness\", \"fast_greedy\", \"fluid\", \"infomap\", \"label_prop\",     \"leading_eigen\", \"leiden\", \"louvain\", \"optimal\", \"spinglass\", \"walktrap\"),   allow.singleton = FALSE,   membership.only = TRUE,   ... )"},{"path":"https://r-ega.net/reference/community.detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Community Detection Algorithm — community.detection","text":"network Matrix igraph network object algorithm Character igraph cluster_* function (length = 1). Available options: \"edge_betweenness\" — See cluster_edge_betweenness details \"fast_greedy\" — See cluster_fast_greedy details \"fluid\" — See cluster_fluid_communities details \"infomap\" — See cluster_infomap details \"label_prop\" — See cluster_label_prop details \"leading_eigen\" — See cluster_leading_eigen details \"leiden\" — See cluster_leiden details. Note: Leiden algorithm default modularity objective function (objective_function = \"modularity\"). Set objective_function = \"CPM\" use Constant Potts Model instead (see examples) \"louvain\" — See cluster_louvain details \"optimal\" — See cluster_optimal details \"spinglass\" — See cluster_spinglass details \"walktrap\" — See cluster_walktrap details allow.singleton Boolean (length = 1). Whether singleton single node communities allowed. Defaults FALSE. FALSE, singleton communities set missing (NA); otherwise, TRUE, singleton communities allowed membership.Boolean (length = 1). Whether memberships output. Defaults TRUE. Set FALSE obtain output community detection algorithm ... Additional arguments passed igraph's community detection functions (see algorithm link arguments algorithm)","code":""},{"path":"https://r-ega.net/reference/community.detection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Community Detection Algorithm — community.detection","text":"Returns memberships community detection algorithm","code":""},{"path":"https://r-ega.net/reference/community.detection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply a Community Detection Algorithm — community.detection","text":"Csardi, G., & Nepusz, T. (2006). igraph software package complex network research. InterJournal, Complex Systems, 1695.","code":""},{"path":"https://r-ega.net/reference/community.detection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a Community Detection Algorithm — community.detection","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/community.detection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Community Detection Algorithm — community.detection","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate network network <- EBICglasso.qgraph(data = wmt)  # Compute Edge Betweenness community.detection(network, algorithm = \"edge_betweenness\") #> Warning: At vendor/cigraph/src/community/edge_betweenness.c:503 : Membership vector will be selected based on the highest modularity score. #> Algorithm:  Edge Betweenness #>  #> Number of communities:  4 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1    NA     2     2     2     2     3     1     4     3     2     1  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     4     2     1     2     3   # Compute Fast Greedy community.detection(network, algorithm = \"fast_greedy\") #> Algorithm:  Fast-greedy #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute Fluid community.detection(   network, algorithm = \"fluid\",   no.of.communities = 2 # needs to be set ) #> Algorithm:  Fluid #>  #> Number of communities:  2 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     1     2     1     1     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     1     1     1   # Compute Infomap community.detection(network, algorithm = \"infomap\") #> Algorithm:  Infomap #>  #> Number of communities:  1 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     1     1     1     1     1     1     1     1  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     1     1     1     1     1   # Compute Label Propagation community.detection(network, algorithm = \"label_prop\") #> Algorithm:  Label Propagation #>  #> Number of communities:  1 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     1     1     1     1     1     1     1     1  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     1     1     1     1     1   # Compute Leading Eigenvector community.detection(network, algorithm = \"leading_eigen\") #> Algorithm:  Leading Eigenvector #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     1     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     3     3     2     2   # Compute Leiden (with modularity) community.detection(   network, algorithm = \"leiden\",   objective_function = \"modularity\" ) #> Algorithm:  Leiden with Modularity #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute Leiden (with CPM) community.detection(   network, algorithm = \"leiden\",   objective_function = \"CPM\",   resolution_parameter = 0.05 # \"edge density\" ) #> Algorithm:  Leiden with Constant Potts Model #>  #> Number of communities:  4 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     4     4   # Compute Louvain community.detection(network, algorithm = \"louvain\") #> Algorithm:  Louvain #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute Optimal (identifies maximum modularity solution) community.detection(network, algorithm = \"optimal\") #> Algorithm:  Optimal #>  #> Number of communities:  3 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     2     2     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     2     3     2     2   # Compute Spinglass community.detection(network, algorithm = \"spinglass\") #> Algorithm:  Spinglass #>  #> Number of communities:  5 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     3     3     4     4     3  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     3     4     3     5     5   # Compute Walktrap community.detection(network, algorithm = \"walktrap\") #> Algorithm:  Walktrap #>  #> Number of communities:  2 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     2     2     2     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     2     2     2   # Example with {igraph} network community.detection(   convert2igraph(network), algorithm = \"walktrap\" ) #> Algorithm:  Walktrap #>  #> Number of communities:  2 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     2     2     2     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     2     2     2"},{"path":"https://r-ega.net/reference/community.homogenize.html","id":null,"dir":"Reference","previous_headings":"","what":"Homogenize Community Memberships — community.homogenize","title":"Homogenize Community Memberships — community.homogenize","text":"Memberships community detection algorithms always align numerically. function seeks homogenize community memberships target membership (membership homogenize toward) one memberships. function core dimensionStability itemStability functions","code":""},{"path":"https://r-ega.net/reference/community.homogenize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Homogenize Community Memberships — community.homogenize","text":"","code":"community.homogenize(target.membership, convert.membership)"},{"path":"https://r-ega.net/reference/community.homogenize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Homogenize Community Memberships — community.homogenize","text":"target.membership Vector, matrix, data frame. target memberships memberships input convert.membership homogenize toward convert.membership Vector, matrix, data frame. Either vector memberships length target.membership matrix data frame many membership solutions either across rows columns length target.membership (function automatically determine orientation precedence given solutions across rows)","code":""},{"path":"https://r-ega.net/reference/community.homogenize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Homogenize Community Memberships — community.homogenize","text":"Returns vector matrix length size convert.membership memberships homogenized toward target.membership","code":""},{"path":"https://r-ega.net/reference/community.homogenize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Homogenize Community Memberships — community.homogenize","text":"Original implementation bootEGA  Christensen, . P., & Golino, H. (2021). Estimating stability number factors via Bootstrap Exploratory Graph Analysis: tutorial. Psych, 3(3), 479-500.","code":""},{"path":"https://r-ega.net/reference/community.homogenize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Homogenize Community Memberships — community.homogenize","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/community.homogenize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Homogenize Community Memberships — community.homogenize","text":"","code":"# Get network network <- network.estimation(wmt2[,7:24])  # Apply Walktrap network_walktrap <- community.detection(   network, algorithm = \"walktrap\" )  # Apply Louvain network_louvain <- community.detection(   network, algorithm = \"louvain\" )  # Homogenize toward Walktrap community.homogenize(network_walktrap, network_louvain) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    1    1    1    1    1    2    2    2    3     3     2     2     3     3 #>      [,15] [,16] [,17] [,18] #> [1,]     2     3     2     2"},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":null,"dir":"Reference","previous_headings":"","what":"Approaches to Detect Unidimensional Communities — community.unidimensional","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"function apply several approaches detect unidimensional community networks. many different approaches recently expanding correlation matrix orthogonal correlations (\"expand\"), applying Leading Eigenvalue community detection algorithm cluster_leading_eigen correlation matrix (\"LE\"), applying Louvain community detection algorithm cluster_louvain correlation matrix (\"louvain\"). necessarily intended individual use – better use EGA","code":""},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"","code":"community.unidimensional(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"data Matrix data frame. consist variables desired analysis n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" verbose Boolean. Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate, network.estimation, community.consensus, community.detection","code":""},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"Returns memberships community detection algorithm. memberships output regardless whether network unidimensional","code":""},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"Expand approach  Golino, H., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Sadana, R., Thiyagarajan, J. ., & Martinez-Molina, . (2020). Investigating performance exploratory graph analysis traditional techniques identify number latent factors: simulation tutorial. Psychological Methods, 25, 292-320. Leading Eigenvector approach  Christensen, . P., Garrido, L. E., Guerra-Pena, K., & Golino, H. (2023). Comparing community detection algorithms psychometric networks: Monte Carlo simulation. Behavior Research Methods. Louvain approach  Christensen, . P. (2023). Unidimensional community detection: Monte Carlo simulation, grid search, comparison. PsyArXiv.","code":""},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/community.unidimensional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approaches to Detect Unidimensional Communities — community.unidimensional","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Louvain with Consensus Clustering (default) community.unidimensional(wmt) #> Algorithm:  Louvain #>  #> Number of communities:  2 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     1     2     2     2     1     2     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     2     2     2   # Leading Eigenvector community.unidimensional(wmt, uni.method = \"LE\") #> Algorithm:  Leading Eigenvector #>  #> Number of communities:  2 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     1     2     2     2     1     2     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     2     2     2   # Expand community.unidimensional(wmt, uni.method = \"expand\") #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     1     1     1     1     2     2     2     2     2     2     2     2  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     2     2     2     2     2"},{"path":"https://r-ega.net/reference/compare.EGA.plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","title":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","text":"Organizes EGA plots comparison. Ensures nodes placed layout maximize comparison","code":""},{"path":"https://r-ega.net/reference/compare.EGA.plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","text":"","code":"compare.EGA.plots(   ...,   input.list = NULL,   base = 1,   labels = NULL,   rows = NULL,   columns = NULL,   plot.all = TRUE )"},{"path":"https://r-ega.net/reference/compare.EGA.plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","text":"... Handles multiple arguments: *EGA objects — can dropped without argument designation. function search across input find necessary EGAnet objects ggnet2 arguments — can passed along ggnet2 gplot.layout — can specified using mode =  layout =  using name layout (e.g., mode = \"circle\" produce circle layout gplot.layout). default, layout qgraph input.list List. Bypasses ... argument favor using list input base Numeric (length = 1). Plot used base configuration networks. Uses number order plots input. Defaults 1 first plot labels Character (length input). Labels EGAnet object rows Numeric (length = 1). Number rows spread plots across columns Numeric (length = 1). Number columns spread plots plot.Boolean (length = 1). Whether plot produced just output. Defaults TRUE. Set FALSE avoid plotting (still obtain plot objects)","code":""},{"path":"https://r-ega.net/reference/compare.EGA.plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","text":"Visual comparison EGAnet objects","code":""},{"path":[]},{"path":"https://r-ega.net/reference/compare.EGA.plots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","text":"Alexander Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/compare.EGA.plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visually Compare Two or More EGAnet plots — compare.EGA.plots","text":"","code":"# Obtain WMT-2 data wmt <- wmt2[,7:24]  # Draw random samples of 300 cases sample1 <- wmt[sample(1:nrow(wmt), 300),] sample2 <- wmt[sample(1:nrow(wmt), 300),]  # Estimate EGAs ega1 <- EGA(sample1)  ega2 <- EGA(sample2)   # \\donttest{ # Compare EGAs via plot compare.EGA.plots(   ega1, ega2,   base = 1, # use \"ega1\" as base for comparison   labels = c(\"Sample 1\", \"Sample 2\"),   rows = 1, columns = 2 )  #> $all  #>  #> $individual #> $individual[[1]]  #>  #> $individual[[2]]  #>  #>   # Change layout to circle plots compare.EGA.plots(   ega1, ega2,   labels = c(\"Sample 1\", \"Sample 2\"),   mode = \"circle\" )# }  #> $all  #>  #> $individual #> $individual[[1]]  #>  #> $individual[[2]]  #>  #>"},{"path":"https://r-ega.net/reference/convert2igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert networks to igraph — convert2igraph","title":"Convert networks to igraph — convert2igraph","text":"Converts networks igraph format","code":""},{"path":"https://r-ega.net/reference/convert2igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert networks to igraph — convert2igraph","text":"","code":"convert2igraph(A, diagonal = 0)"},{"path":"https://r-ega.net/reference/convert2igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert networks to igraph — convert2igraph","text":"Matrix data frame. N x N matrix N number nodes diagonal Numeric. Value placed diagonal . Defaults 0","code":""},{"path":"https://r-ega.net/reference/convert2igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert networks to igraph — convert2igraph","text":"Returns network igraph format","code":""},{"path":"https://r-ega.net/reference/convert2igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert networks to igraph — convert2igraph","text":"Hudson Golino <hfg9s virginia.edu> & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/convert2igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert networks to igraph — convert2igraph","text":"","code":"convert2igraph(ega.wmt$network) #> IGRAPH 8e00ad6 U-W- 18 96 --  #> + attr: FALSE (v/c), weight (e/n) #> + edges from 8e00ad6: #>  [1]  1-- 2  1-- 3  1-- 4  1-- 5  1--10  1--11  1--16  1--17  2-- 3  2-- 4 #> [11]  2-- 5  2-- 6  2-- 8  2-- 9  2--10  2--14  3-- 4  3-- 6  3-- 7  3-- 8 #> [21]  3--10  3--11  3--12  3--13  3--16  3--18  4-- 5  4-- 6  4-- 7  4-- 8 #> [31]  4-- 9  4--10  4--15  4--17  5-- 6  5-- 7  5-- 8  5--10  5--11  5--12 #> [41]  5--13  5--16  5--17  6-- 7  6-- 8  6-- 9  6--10  6--11  6--12  6--13 #> [51]  6--15  6--16  6--17  7-- 8  7--10  7--11  7--13  7--14  7--15  7--17 #> [61]  8-- 9  8--11  8--12  8--16  8--18  9--10  9--12  9--13  9--14  9--15 #> [71]  9--16 10--11 10--13 10--14 10--16 10--18 11--12 11--15 11--16 11--17 #> + ... omitted several edges"},{"path":"https://r-ega.net/reference/convert2tidygraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert networks to tidygraph — convert2tidygraph","title":"Convert networks to tidygraph — convert2tidygraph","text":"Converts networks tidygraph format","code":""},{"path":"https://r-ega.net/reference/convert2tidygraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert networks to tidygraph — convert2tidygraph","text":"","code":"convert2tidygraph(EGA.object)"},{"path":"https://r-ega.net/reference/convert2tidygraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert networks to tidygraph — convert2tidygraph","text":"EGA.object single EGAnet object containing outputs $network $wc","code":""},{"path":"https://r-ega.net/reference/convert2tidygraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert networks to tidygraph — convert2tidygraph","text":"Returns network tidygraph format","code":""},{"path":"https://r-ega.net/reference/convert2tidygraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert networks to tidygraph — convert2tidygraph","text":"Dominique Makowski, Hudson Golino <hfg9s virginia.edu>, & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/convert2tidygraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert networks to tidygraph — convert2tidygraph","text":"","code":"convert2tidygraph(ega.wmt) #> $nodes #>     name dimension #> 1   wmt1         1 #> 2   wmt2         1 #> 3   wmt3         1 #> 4   wmt4         1 #> 5   wmt5         1 #> 6   wmt6         2 #> 7   wmt7         2 #> 8   wmt8         2 #> 9   wmt9         2 #> 10 wmt10         2 #> 11 wmt11         2 #> 12 wmt12         2 #> 13 wmt13         2 #> 14 wmt14         2 #> 15 wmt15         2 #> 16 wmt16         2 #> 17 wmt17         2 #> 18 wmt18         2 #>  #> $edges #>     from to        link #> 2      1  2 0.205041395 #> 3      1  3 0.025198584 #> 4      1  4 0.209507443 #> 5      1  5 0.102058273 #> 10     1 10 0.059728988 #> 11     1 11 0.039250855 #> 16     1 16 0.069626954 #> 17     1 17 0.047807805 #> 19     2  1 0.205041395 #> 21     2  3 0.363174777 #> 22     2  4 0.019810038 #> 23     2  5 0.230291306 #> 24     2  6 0.064983548 #> 26     2  8 0.028360071 #> 27     2  9 0.053482836 #> 28     2 10 0.085442664 #> 32     2 14 0.063311145 #> 37     3  1 0.025198584 #> 38     3  2 0.363174777 #> 40     3  4 0.075373042 #> 42     3  6 0.152920281 #> 43     3  7 0.014709997 #> 44     3  8 0.017918677 #> 46     3 10 0.057181149 #> 47     3 11 0.088170795 #> 48     3 12 0.039730183 #> 49     3 13 0.034791513 #> 52     3 16 0.022959169 #> 54     3 18 0.012613989 #> 55     4  1 0.209507443 #> 56     4  2 0.019810038 #> 57     4  3 0.075373042 #> 59     4  5 0.096245153 #> 60     4  6 0.067310562 #> 61     4  7 0.079396201 #> 62     4  8 0.077452284 #> 63     4  9 0.018242864 #> 64     4 10 0.121240438 #> 69     4 15 0.072379120 #> 71     4 17 0.034125613 #> 73     5  1 0.102058273 #> 74     5  2 0.230291306 #> 76     5  4 0.096245153 #> 78     5  6 0.012703703 #> 79     5  7 0.063427340 #> 80     5  8 0.014020511 #> 82     5 10 0.030459472 #> 83     5 11 0.033349775 #> 84     5 12 0.102637012 #> 85     5 13 0.072096984 #> 88     5 16 0.023815115 #> 89     5 17 0.123927607 #> 92     6  2 0.064983548 #> 93     6  3 0.152920281 #> 94     6  4 0.067310562 #> 95     6  5 0.012703703 #> 97     6  7 0.155069001 #> 98     6  8 0.106495118 #> 99     6  9 0.099829836 #> 100    6 10 0.132591941 #> 101    6 11 0.006736274 #> 102    6 12 0.001836519 #> 103    6 13 0.043306825 #> 105    6 15 0.106874171 #> 106    6 16 0.024587674 #> 107    6 17 0.129182165 #> 111    7  3 0.014709997 #> 112    7  4 0.079396201 #> 113    7  5 0.063427340 #> 114    7  6 0.155069001 #> 116    7  8 0.182132311 #> 118    7 10 0.057316344 #> 119    7 11 0.122658354 #> 121    7 13 0.063190150 #> 122    7 14 0.129880429 #> 123    7 15 0.093190085 #> 125    7 17 0.063682622 #> 128    8  2 0.028360071 #> 129    8  3 0.017918677 #> 130    8  4 0.077452284 #> 131    8  5 0.014020511 #> 132    8  6 0.106495118 #> 133    8  7 0.182132311 #> 135    8  9 0.139053068 #> 137    8 11 0.059099440 #> 138    8 12 0.118491586 #> 142    8 16 0.048320844 #> 144    8 18 0.080984436 #> 146    9  2 0.053482836 #> 148    9  4 0.018242864 #> 150    9  6 0.099829836 #> 152    9  8 0.139053068 #> 154    9 10 0.198544958 #> 156    9 12 0.118482744 #> 157    9 13 0.104299706 #> 158    9 14 0.193308625 #> 159    9 15 0.037405091 #> 160    9 16 0.091114904 #> 163   10  1 0.059728988 #> 164   10  2 0.085442664 #> 165   10  3 0.057181149 #> 166   10  4 0.121240438 #> 167   10  5 0.030459472 #> 168   10  6 0.132591941 #> 169   10  7 0.057316344 #> 171   10  9 0.198544958 #> 173   10 11 0.075170295 #> 175   10 13 0.069530854 #> 176   10 14 0.067465168 #> 178   10 16 0.084525058 #> 180   10 18 0.005726423 #> 181   11  1 0.039250855 #> 183   11  3 0.088170795 #> 185   11  5 0.033349775 #> 186   11  6 0.006736274 #> 187   11  7 0.122658354 #> 188   11  8 0.059099440 #> 190   11 10 0.075170295 #> 192   11 12 0.061476902 #> 195   11 15 0.048902139 #> 196   11 16 0.068598913 #> 197   11 17 0.001795742 #> 198   11 18 0.075462425 #> 201   12  3 0.039730183 #> 203   12  5 0.102637012 #> 204   12  6 0.001836519 #> 206   12  8 0.118491586 #> 207   12  9 0.118482744 #> 209   12 11 0.061476902 #> 212   12 14 0.027208487 #> 213   12 15 0.187004269 #> 215   12 17 0.113771734 #> 219   13  3 0.034791513 #> 221   13  5 0.072096984 #> 222   13  6 0.043306825 #> 223   13  7 0.063190150 #> 225   13  9 0.104299706 #> 226   13 10 0.069530854 #> 230   13 14 0.092090227 #> 231   13 15 0.051392764 #> 232   13 16 0.148346160 #> 236   14  2 0.063311145 #> 241   14  7 0.129880429 #> 243   14  9 0.193308625 #> 244   14 10 0.067465168 #> 246   14 12 0.027208487 #> 247   14 13 0.092090227 #> 249   14 15 0.135282456 #> 250   14 16 0.042714625 #> 251   14 17 0.042612075 #> 252   14 18 0.083977048 #> 256   15  4 0.072379120 #> 258   15  6 0.106874171 #> 259   15  7 0.093190085 #> 261   15  9 0.037405091 #> 263   15 11 0.048902139 #> 264   15 12 0.187004269 #> 265   15 13 0.051392764 #> 266   15 14 0.135282456 #> 268   15 16 0.093084909 #> 270   15 18 0.076420880 #> 271   16  1 0.069626954 #> 273   16  3 0.022959169 #> 275   16  5 0.023815115 #> 276   16  6 0.024587674 #> 278   16  8 0.048320844 #> 279   16  9 0.091114904 #> 280   16 10 0.084525058 #> 281   16 11 0.068598913 #> 283   16 13 0.148346160 #> 284   16 14 0.042714625 #> 285   16 15 0.093084909 #> 287   16 17 0.028523364 #> 288   16 18 0.106791750 #> 289   17  1 0.047807805 #> 292   17  4 0.034125613 #> 293   17  5 0.123927607 #> 294   17  6 0.129182165 #> 295   17  7 0.063682622 #> 299   17 11 0.001795742 #> 300   17 12 0.113771734 #> 302   17 14 0.042612075 #> 304   17 16 0.028523364 #> 306   17 18 0.183194088 #> 309   18  3 0.012613989 #> 314   18  8 0.080984436 #> 316   18 10 0.005726423 #> 317   18 11 0.075462425 #> 320   18 14 0.083977048 #> 321   18 15 0.076420880 #> 322   18 16 0.106791750 #> 323   18 17 0.183194088 #>"},{"path":"https://r-ega.net/reference/cosine.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine similarity — cosine","title":"Cosine similarity — cosine","text":"Computes cosine similarity","code":""},{"path":"https://r-ega.net/reference/cosine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine similarity — cosine","text":"","code":"cosine(x, y = NULL, ...)"},{"path":"https://r-ega.net/reference/cosine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine similarity — cosine","text":"x Numeric vector, matrix, data frame. nrow(x) > 1, x treated matrix compute n n similarity matrix (y used!) y Numeric vector, matrix, data frame. used x single variable. Used compute similarity one variable n variables. Defaults NULL ... actually used makes easier general functionality package","code":""},{"path":"https://r-ega.net/reference/cosine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cosine similarity — cosine","text":"missing values: 0 used replace missing values. using (matrix) multiplication, 0 value cancels product rendering missing value \"counting\" sums","code":""},{"path":"https://r-ega.net/reference/cosine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cosine similarity — cosine","text":"Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/cosine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine similarity — cosine","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Obtain cosines wmt_cosine <- cosine(wmt)"},{"path":"https://r-ega.net/reference/depression.html","id":null,"dir":"Reference","previous_headings":"","what":"Depression Data — depression","title":"Depression Data — depression","text":"response matrix (n = 574) Beck Depression Inventory, Beck Anxiety Inventory, Athens Insomnia Scale.","code":""},{"path":"https://r-ega.net/reference/depression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depression Data — depression","text":"","code":"data(depression)"},{"path":"https://r-ega.net/reference/depression.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Depression Data — depression","text":"574x78 response matrix","code":""},{"path":"https://r-ega.net/reference/depression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Depression Data — depression","text":"","code":"data(\"depression\")"},{"path":"https://r-ega.net/reference/dimensionStability.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimension Stability Statistics from bootEGA — dimensionStability","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"Based bootEGA results, function computes stability dimensions. Stability computed assessing proportion times original dimension exactly replicated across bootstrap samples","code":""},{"path":"https://r-ega.net/reference/dimensionStability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"","code":"dimensionStability(bootega.obj, IS.plot = TRUE, structure = NULL, ...)"},{"path":"https://r-ega.net/reference/dimensionStability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"bootega.obj bootEGA object .plot Boolean (length = 1). plot produced item.replication? Defaults TRUE structure Numeric (length = number variables). theoretical pre-defined structure. Defaults NULL empirical EGA result bootega.obj ... Additional arguments. Used deprecated arguments previous versions itemStability","code":""},{"path":"https://r-ega.net/reference/dimensionStability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"Returns list containing: dimension.stability list containing: structural.consistency — proportion times empirical EGA dimension exactly replicates across bootEGA samples average.item.stability — average item stability empirical EGA dimension item.stability Results itemStability","code":""},{"path":"https://r-ega.net/reference/dimensionStability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"Original implementation bootEGA  Christensen, . P., & Golino, H. (2021). Estimating stability number factors via Bootstrap Exploratory Graph Analysis: tutorial. Psych, 3(3), 479-500. Conceptual introduction  Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34(6), 1095-1108.","code":""},{"path":"https://r-ega.net/reference/dimensionStability.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/dimensionStability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimension Stability Statistics from bootEGA — dimensionStability","text":"","code":"# Load data wmt <- wmt2[,7:24]  if (FALSE) { # \\dontrun{ # Estimate bootstrap EGA boot.wmt <- bootEGA(   data = wmt, iter = 500,   type = \"parametric\", ncores = 2 )} # }  # Estimate stability statistics dimensionStability(boot.wmt)  #> EGA Type: EGA  #> Bootstrap Samples: 500 (Parametric) #>  #> Proportion Replicated in Dimensions: #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #> 1.000 1.000 1.000 0.882 0.966 0.562 0.884 0.888 0.906 0.428 0.776 0.940 0.904  #> wmt14 wmt15 wmt16 wmt17 wmt18  #> 0.918 0.928 0.908 0.830 0.908  #>  #> ---- #>  #> Structural Consistency: #>  #>     1     2  #> 0.860 0.356"},{"path":"https://r-ega.net/reference/dnn.weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Loadings Comparison Test Deep Learning Neural Network Weights — dnn.weights","title":"Loadings Comparison Test Deep Learning Neural Network Weights — dnn.weights","text":"list weights four different neural network models: random vs. non-random model (r_nr_weights), low correlation factor vs. network model (lf_n_weights), high correlation variables less equal factors vs. network model (hlf_n_weights), high correlation variables greater factors vs. network model (hgf_n_weights)","code":""},{"path":"https://r-ega.net/reference/dnn.weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loadings Comparison Test Deep Learning Neural Network Weights — dnn.weights","text":"","code":"data(dnn.weights)"},{"path":"https://r-ega.net/reference/dnn.weights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Loadings Comparison Test Deep Learning Neural Network Weights — dnn.weights","text":"list length 4","code":""},{"path":"https://r-ega.net/reference/dnn.weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loadings Comparison Test Deep Learning Neural Network Weights — dnn.weights","text":"","code":"data(\"dnn.weights\")"},{"path":"https://r-ega.net/reference/dynEGA.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Exploratory Graph Analysis — dynEGA","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"Estimates dynamic communities multivariate time series (e.g., panel data, longitudinal data, intensive longitudinal data) multiple time scales different levels analysis: individuals (intraindividual structure), groups, population (interindividual structure)","code":""},{"path":"https://r-ega.net/reference/dynEGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"","code":"dynEGA(   data,   id = NULL,   group = NULL,   n.embed = 5,   tau = 1,   delta = 1,   use.derivatives = 1,   level = c(\"individual\", \"group\", \"population\"),   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   ncores,   verbose = TRUE,   ... )"},{"path":"https://r-ega.net/reference/dynEGA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"data Matrix data frame. Participants variable long format row t represents observations variables time point t participant. next row, t + 1, represents next measurement occasion participant. next participant's data immediately follow, pattern, previous participant data ID variable labeled \"ID\"; otherwise, assumed data represent population groups, data Group variable labeled \"Group\"; otherwise, assumed groups data Arguments id group can specified tell function column data use ID Group variable, respectively measurement occasion variable necessary removed data proceeding analysis id Numeric character (length = 1). Number name column identifying individual. Defaults NULL group Numeric character (length = 1). Number column identifying group membership. Defaults NULL n.embed Numeric (length = 1). Defaults 5. Number embedded dimensions (number observations used Embed function). example, \"n.embed = 5\" use five consecutive observations estimate single derivative tau Numeric (length = 1). Defaults 1. Number observations offset successive embeddings Embed function. Generally recommended leave \"\" delta Numeric (length = 1). Defaults 1. time successive observations time series (.e, lag). Generally recommended leave \"\" use.derivatives Numeric (length = 1). Defaults 1. order derivative used analysis. Available options: 0 — derivatives; consistent moving average 1 — First-order derivatives; interpreted \"velocity\" rate change time 2 — Second-order derivatives; interpreted \"acceleration\" rate rate change time Generally recommended leave \"\" level Character vector (length 3). character vector indicating level(s) estimate: \"individual\" — Estimates EGA individual data (intraindividual structure; requires \"ID\" column, see data) \"group\" — Estimates EGA group data (group structure; requires \"Group\" column, see data) \"population\" — Estimates EGA across data (interindividual structure) corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" ncores Numeric (length = 1). Number cores use computing results. Defaults ceiling(parallel::detectCores() / 2) half computer's processing power. Set 1 use parallel computing unsure many cores computer , type: parallel::detectCores() verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, EGA","code":""},{"path":"https://r-ega.net/reference/dynEGA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"list containing: Derivatives list containing: Estimates — list length unique IDs containing data frames zero- second-order derivatives ID data EstimatesDF — data frame derivatives across IDs containing columns zero- second-order derivatives well id group variables (group automatically set 1 group provided) dynEGA list containing: population — level includes \"populaton\", EGA results entire sample group — level includes \"group\", list containing EGA results group individual — level includes \"individual\", list containing EGA results id","code":""},{"path":"https://r-ega.net/reference/dynEGA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"Derivatives variable's time series participant estimated using generalized local linear approximation (see glla). EGA applied derivatives model variables changing together time. Variables change together time detected communities","code":""},{"path":"https://r-ega.net/reference/dynEGA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"Generalized local linear approximation  Boker, S. M., Deboeck, P. R., Edler, C., & Keel, P. K. (2010) Generalized local linear approximation derivatives time series. S.-M. Chow, E. Ferrer, & F. Hsieh (Eds.), Notre Dame series quantitative methodology. Statistical methods modeling human dynamics: interdisciplinary dialogue, (p. 161-178). Routledge/Taylor & Francis Group. Deboeck, P. R., Montpetit, M. ., Bergeman, C. S., & Boker, S. M. (2009) Using derivative estimates describe intraindividual variability multiple time scales. Psychological Methods, 14(4), 367-386. Original dynamic EGA implementation  Golino, H., Christensen, . P., Moulder, R. G., Kim, S., & Boker, S. M. (2021). Modeling latent topics social media using Dynamic Exploratory Graph Analysis: case right-wing left-wing trolls 2016 US elections. Psychometrika. Time delay embedding procedure  Savitzky, ., & Golay, M. J. (1964). Smoothing differentiation data simplified least squares procedures. Analytical Chemistry, 36(8), 1627-1639.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/dynEGA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/dynEGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Exploratory Graph Analysis — dynEGA","text":"","code":"# Population structure simulated_population <- dynEGA(   data = sim.dynEGA, level = \"population\"   # uses simulated data in package   # useful to understand how data should be structured )  # Group structure simulated_group <- dynEGA(   data = sim.dynEGA, level = \"group\"   # uses simulated data in package   # useful to understand how data should be structured )  if (FALSE) { # \\dontrun{ # Individual structure simulated_individual <- dynEGA(   data = sim.dynEGA, level = \"individual\",   ncores = 2, # use more for quicker results   verbose = TRUE # progress bar )  # Population, group, and individual structure simulated_all <- dynEGA(   data = sim.dynEGA,   level = c(\"individual\", \"group\", \"population\"),   ncores = 2, # use more for quicker results   verbose = TRUE # progress bar )  # Plot population plot(simulated_all$dynEGA$population)  # Plot groups plot(simulated_all$dynEGA$group)  # Plot individual plot(simulated_all$dynEGA$individual, id = 1)  # Step through all plots # Unless `id` is specified, 4 random IDs # will be drawn from individuals plot(simulated_all)} # }"},{"path":"https://r-ega.net/reference/dynEGA.ind.pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","title":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","text":"wrapper function estimate intraindividiual (level = \"individual\") interindividual (level = \"population\") structures using dynEGA","code":""},{"path":"https://r-ega.net/reference/dynEGA.ind.pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","text":"","code":"dynEGA.ind.pop(   data,   id = NULL,   n.embed = 5,   tau = 1,   delta = 1,   use.derivatives = 1,   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   ncores,   verbose = TRUE,   ... )"},{"path":"https://r-ega.net/reference/dynEGA.ind.pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","text":"data Matrix data frame. Participants variable long format row t represents observations variables time point t participant. next row, t + 1, represents next measurement occasion participant. next participant's data immediately follow, pattern, previous participant data ID variable labeled \"ID\"; otherwise, assumed data represent population groups, data Group variable labeled \"Group\"; otherwise, assumed groups data Arguments id group can specified tell function column data use ID Group variable, respectively measurement occasion variable necessary removed data proceeding analysis id Numeric character (length = 1). Number name column identifying individual. Defaults NULL n.embed Numeric (length = 1). Defaults 5. Number embedded dimensions (number observations used Embed function). example, \"n.embed = 5\" use five consecutive observations estimate single derivative tau Numeric (length = 1). Defaults 1. Number observations offset successive embeddings Embed function. Generally recommended leave \"\" delta Numeric (length = 1). Defaults 1. time successive observations time series (.e, lag). Generally recommended leave \"\" use.derivatives Numeric (length = 1). Defaults 1. order derivative used analysis. Available options: 0 — derivatives; consistent moving average 1 — First-order derivatives; interpreted \"velocity\" rate change time 2 — Second-order derivatives; interpreted \"acceleration\" rate rate change time Generally recommended leave \"\" corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" ncores Numeric (length = 1). Number cores use computing results. Defaults ceiling(parallel::detectCores() / 2) half computer's processing power. Set 1 use parallel computing unsure many cores computer , type: parallel::detectCores() verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, EGA","code":""},{"path":"https://r-ega.net/reference/dynEGA.ind.pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","text":"output EGAnet{dynEGA} returning list objects level = \"individual\" level = \"population\"","code":""},{"path":[]},{"path":"https://r-ega.net/reference/dynEGA.ind.pop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","text":"Hudson Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/dynEGA.ind.pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intra- and Inter-individual dynEGA — dynEGA.ind.pop","text":"","code":"# Obtain data sim.dynEGA <- sim.dynEGA # bypasses CRAN checks  if (FALSE) { # \\dontrun{ # Dynamic EGA individual and population structure dyn.ega1 <- dynEGA.ind.pop(   data = sim.dynEGA, n.embed = 5, tau = 1,   delta = 1, id = 25, use.derivatives = 1,   ncores = 2, corr = \"pearson\" )} # }"},{"path":"https://r-ega.net/reference/ega.wmt.html","id":null,"dir":"Reference","previous_headings":"","what":"EGA Network of wmt2Data — ega.wmt","title":"EGA Network of wmt2Data — ega.wmt","text":"EGA results ega.wmt <- EGA(wmt2[,7:24]) Wiener Matrizen-Test (WMT-2)","code":""},{"path":"https://r-ega.net/reference/ega.wmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EGA Network of wmt2Data — ega.wmt","text":"","code":"data(ega.wmt)"},{"path":"https://r-ega.net/reference/ega.wmt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EGA Network of wmt2Data — ega.wmt","text":"list 8 objects (see Value EGA)","code":""},{"path":"https://r-ega.net/reference/ega.wmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EGA Network of wmt2Data — ega.wmt","text":"","code":"data(\"ega.wmt\")"},{"path":"https://r-ega.net/reference/entropyFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Entropy Fit Index — entropyFit","title":"Entropy Fit Index — entropyFit","text":"Computes fit dimensionality structure using empirical entropy. Lower values suggest better fit structure data.","code":""},{"path":"https://r-ega.net/reference/entropyFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entropy Fit Index — entropyFit","text":"","code":"entropyFit(data, structure)"},{"path":"https://r-ega.net/reference/entropyFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entropy Fit Index — entropyFit","text":"data Matrix data frame. Contains variables used analysis structure Numeric character vector (length = ncol(data)). vector representing structure (numbers labels item). Can theoretical factors structure detected EGA","code":""},{"path":"https://r-ega.net/reference/entropyFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Entropy Fit Index — entropyFit","text":"Returns list containing: Total.Correlation total correlation dataset Total.Correlation.MM Miller-Madow correction total correlation dataset Entropy.Fit Entropy Fit Index Entropy.Fit.MM Miller-Madow correction Entropy Fit Index Average.Entropy average entropy dataset","code":""},{"path":"https://r-ega.net/reference/entropyFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Entropy Fit Index — entropyFit","text":"Initial formalization simulation  Golino, H., Moulder, R. G., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (2020). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research.","code":""},{"path":"https://r-ega.net/reference/entropyFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Entropy Fit Index — entropyFit","text":"Hudson F. Golino <hfg9s virginia.edu>, Alexander P. Christensen <alexpaulchristensen@gmail.com> Robert Moulder <rgm4fd@virginia.edu>","code":""},{"path":"https://r-ega.net/reference/entropyFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Entropy Fit Index — entropyFit","text":"","code":"# Load data wmt <- wmt2[,7:24]  if (FALSE) { # \\dontrun{ # Estimate EGA model ega.wmt <- EGA(data = wmt)} # }  # Compute entropy indices entropyFit(data = wmt, structure = ega.wmt$wc) #>   Total.Correlation Total.Correlation.MM Entropy.Fit Entropy.Fit.MM #> 1         0.2429484            0.2222733   -1.103339      -1.127812 #>   Average.Entropy #> 1       -1.836265"},{"path":"https://r-ega.net/reference/ergoInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Ergodicity Information Index — ergoInfo","title":"Ergodicity Information Index — ergoInfo","text":"Computes Ergodicity Information Index","code":""},{"path":"https://r-ega.net/reference/ergoInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ergodicity Information Index — ergoInfo","text":"","code":"ergoInfo(   dynEGA.object,   use = c(\"edge.list\", \"unweighted\", \"weighted\"),   shuffles = 5000 )"},{"path":"https://r-ega.net/reference/ergoInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ergodicity Information Index — ergoInfo","text":"dynEGA.object dynEGA.ind.pop object use Character (length = 1). string indicating network element used compute algorithm complexity, list edges weights network. Defaults use = \"unweighted\". Current options : \"edge.list\" — Calculates algorithm complexity using list edges \"unweighted\" — Calculates algorithm complexity using binary weights encoded prime transformed network. 0 = edge absent 1 = edge present \"weighted\" — Calculates algorithm complexity using weights encoded prime-weight transformed network shuffles Numeric. Number shuffles used compute Kolmogorov complexity. Defaults 5000","code":""},{"path":"https://r-ega.net/reference/ergoInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ergodicity Information Index — ergoInfo","text":"Returns list containing: PrimeWeight prime-weight encoding individual networks PrimeWeight.pop prime-weight encoding population network Kcomp Kolmogorov complexity prime-weight encoded individual networks Kcomp.pop Kolmogorov complexity prime-weight encoded population network complexity complexity metric proposed Santora Nicosia (2020) EII Ergodicity Information Index","code":""},{"path":"https://r-ega.net/reference/ergoInfo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ergodicity Information Index — ergoInfo","text":"Original Implementation  Golino, H., Nesselroade, J. R., & Christensen, . P. (2022). Toward psychology individuals: ergodicity information index bottom-approach finding generalizations. PsyArXiv.","code":""},{"path":"https://r-ega.net/reference/ergoInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ergodicity Information Index — ergoInfo","text":"Hudson Golino <hfg9s virginia.edu> Alexander Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/ergoInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ergodicity Information Index — ergoInfo","text":"","code":"# Obtain data sim.dynEGA <- sim.dynEGA # bypasses CRAN checks  if (FALSE) { # \\dontrun{ # Dynamic EGA individual and population structure dyn.ega1 <- dynEGA.ind.pop(   data = sim.dynEGA[,-26], n.embed = 5, tau = 1,   delta = 1, id = 25, use.derivatives = 1,   ncores = 2, corr = \"pearson\" )  # Compute empirical ergodicity information index eii <- ergoInfo(dyn.ega1)} # }"},{"path":"https://r-ega.net/reference/frobenius.html","id":null,"dir":"Reference","previous_headings":"","what":"Frobenius Norm (Similarity) — frobenius","title":"Frobenius Norm (Similarity) — frobenius","text":"Computes Frobenius Norm (Ulitzsch et al., 2023)","code":""},{"path":"https://r-ega.net/reference/frobenius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frobenius Norm (Similarity) — frobenius","text":"","code":"frobenius(network1, network2)"},{"path":"https://r-ega.net/reference/frobenius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frobenius Norm (Similarity) — frobenius","text":"network1 Matrix data frame. Network compared network2 Matrix data frame. Second network compared","code":""},{"path":"https://r-ega.net/reference/frobenius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frobenius Norm (Similarity) — frobenius","text":"Returns Frobenius Norm","code":""},{"path":"https://r-ega.net/reference/frobenius.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Frobenius Norm (Similarity) — frobenius","text":"Simulation Study  Ulitzsch, E., Khanna, S., Rhemtulla, M., & Domingue, B. W. (2023). graph theory based similarity metric enables comparison subpopulation psychometric networks Psychological Methods.","code":""},{"path":"https://r-ega.net/reference/frobenius.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frobenius Norm (Similarity) — frobenius","text":"Hudson Golino <hfg9s virginia.edu> & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/frobenius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frobenius Norm (Similarity) — frobenius","text":"","code":"# Obtain wmt2 data wmt <- wmt2[,7:24]  # Set seed (for reproducibility) set.seed(1234)  # Split data split1 <- sample(   1:nrow(wmt), floor(nrow(wmt) / 2) ) split2 <- setdiff(1:nrow(wmt), split1)  # Obtain split data data1 <- wmt[split1,] data2 <- wmt[split2,]  # Perform EBICglasso glas1 <- EBICglasso.qgraph(data1) glas2 <- EBICglasso.qgraph(data2)  # Frobenius norm frobenius(glas1, glas2) #> [1] 0.7070395 # 0.7070395"},{"path":"https://r-ega.net/reference/genTEFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","title":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","text":"Computes fit (Generalized TEFI) hierarchical correlated bifactor dimensionality structure (hierEGA objects) using Von Neumman's entropy input correlation matrix. Lower values suggest better fit structure data","code":""},{"path":"https://r-ega.net/reference/genTEFI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","text":"","code":"genTEFI(data, structure = NULL, verbose = TRUE)"},{"path":"https://r-ega.net/reference/genTEFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","text":"data Matrix, data frame, hierEGA object. Can raw data correlation matrix structure high-order correlated bifactor structures, structure list containing: lower_order — vector (length = ncol(data)) representing first-order structure (numbers labels item first-order factor community) higher_order — vector (length = ncol(data) number lower_order communities)representing second-order structure (numbers labels item second-order factor community) verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults TRUE see messages warnings every function call. Set FALSE ignore messages warnings","code":""},{"path":"https://r-ega.net/reference/genTEFI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","text":"Returns three-column data frame Generalized Total Entropy Fit Index using Von Neumman's entropy (VN.Entropy.Fit) (first column), well Lower.Order.VN - TEFI first-order factors (second column), Higher.Order.VN, equivalent second-order factors.","code":""},{"path":"https://r-ega.net/reference/genTEFI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/genTEFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — genTEFI","text":"","code":"# Example using network scores opt.hier <- hierEGA(   data = optimism, scores = \"network\",   plot.EGA = FALSE # No plot for CRAN checks ) #> Warning: This implementation of `hierEGA` is experimental.  #>  #> The underlying function and/or output may change until the results have been appropriately vetted and validated. #> The default 'loading.method' has changed to \"revised\" in {EGAnet} version >= 2.0.7. #>  #>  For the previous default (version <= 2.0.6), use `loading.method = \"original\"`  # Compute the Generalized Total Entropy Fit Index genTEFI(opt.hier) #>   VN.Entropy.Fit Lower.Order.VN Higher.Order.VN #> 1      -11.68101      -2.851873        -8.82914"},{"path":"https://r-ega.net/reference/glla.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Local Linear Approximation — glla","title":"Generalized Local Linear Approximation — glla","text":"Estimates derivatives time series using generalized local linear approximation (GLLA). GLLA filtering method estimating derivatives data uses time delay embedding variant Savitzky-Golay filtering accomplish task.","code":""},{"path":"https://r-ega.net/reference/glla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Local Linear Approximation — glla","text":"","code":"glla(x, n.embed, tau, delta, order)"},{"path":"https://r-ega.net/reference/glla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Local Linear Approximation — glla","text":"x Numeric vector. observed time series n.embed Numeric (length = 1). Number embedded dimensions (number observations used Embed function) tau Numeric (length = 1). Number observations offset successive embeddings Embed function. tau one uses adjacent observations. Default 1 delta Numeric (length = 1). time successive observations time series. Default 1 order Numeric (length = 1). maximum order derivative estimated. example, \"order = 2\" return matrix three columns estimates observed scores first second derivative row embedded matrix (.e. reorganization time series implemented via Embed function)","code":""},{"path":"https://r-ega.net/reference/glla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Local Linear Approximation — glla","text":"Returns matrix containing n columns n one plus maximum order derivatives estimated via generalized local linear approximation","code":""},{"path":"https://r-ega.net/reference/glla.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Local Linear Approximation — glla","text":"GLLA implementation  Boker, S. M., Deboeck, P. R., Edler, C., & Keel, P. K. (2010) Generalized local linear approximation derivatives time series. S.-M. Chow, E. Ferrer, & F. Hsieh (Eds.), Notre Dame series quantitative methodology. Statistical methods modeling human dynamics: interdisciplinary dialogue, (p. 161-178). Routledge/Taylor & Francis Group. Deboeck, P. R., Montpetit, M. ., Bergeman, C. S., & Boker, S. M. (2009) Using derivative estimates describe intraindividual variability multiple time scales. Psychological Methods, 14(4), 367-386. Filtering procedure  Savitzky, ., & Golay, M. J. (1964). Smoothing differentiation data simplified least squares procedures. Analytical Chemistry, 36(8), 1627-1639.","code":""},{"path":"https://r-ega.net/reference/glla.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Local Linear Approximation — glla","text":"Hudson Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/glla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Local Linear Approximation — glla","text":"","code":"# A time series with 8 time points tseries <- 49:56 deriv.tseries <- glla(tseries, n.embed = 4, tau = 1, delta = 1, order = 2)"},{"path":"https://r-ega.net/reference/hierEGA.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical EGA — hierEGA","title":"Hierarchical EGA — hierEGA","text":"Estimates EGA using lower-order solution Louvain algorithm (cluster_louvain)identify lower-order dimensions uses factor network loadings estimate factor network scores, used estimate higher-order dimensions (details, see Jiménez et al., 2023)","code":""},{"path":"https://r-ega.net/reference/hierEGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical EGA — hierEGA","text":"","code":"hierEGA(   data,   loading.method = c(\"original\", \"revised\"),   rotation = NULL,   scores = c(\"factor\", \"network\"),   loading.structure = c(\"simple\", \"full\"),   impute = c(\"mean\", \"median\", \"none\"),   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   lower.algorithm = \"louvain\",   higher.algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   plot.EGA = TRUE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/hierEGA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical EGA — hierEGA","text":"data Matrix data frame. consist variables used analysis (accept correlation matrices) loading.method Character (length = 1). Sets network loading calculation based implementation described \"original\" (Christensen & Golino, 2021) \"revised\" (Christensen et al., 2024) implementation. Defaults \"revised\" rotation Character. rotation use obtain simpler structure. list rotations, see rotations options. Defaults NULL rotation. setting rotation, scores estimation based rotated loadings rather unrotated loadings scores Character (length = 1). scores higher-order structure estimated? Defaults \"network\" network scores computed using net.scores function. Set \"factor\" factor scores computed using fa. Factors scores based EFA (Jiménez et al., 2023) Factor scores use number communities EGA. Estimated factor loadings may align communities. plots using factor scores higher order factors may completely map lower order communities. Look $hierarchical$higher_order$lower_loadings determine composition lower order factors. loading.structure Character (length = 1). Whether simple structure saturated loading matrix used computing scores (scores = \"network\" ). Defaults \"simple\" \"simple\" structure closely mirrors traditional hierarchical factor analytic methods CFA; \"full\" structure closely mirrors EFA methods Simple structure conservative (established) approach therefore default. Treat \"full\" experimental proper vetting validation established impute Character (length = 1). missing data, imputation can implemented. Available options: \"none\" — Default. imputation performed \"mean\" — mean value variable used replace missing data variable \"median\" — median value variable used replace missing data variable corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details lower.algorithm Character  cluster_* function (length = 1). Defaults lower order \"louvain\" common consensus clustering (1000 iterations; see community.consensus details) Louvain consensus clustering strongly recommended. Using algorithm considered experimental designed capture lower order communities higher.algorithm Character  cluster_* function (length = 1). Defaults \"louvain\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement higher-order (order = \"higher\") Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details Using algorithm set higher.algorithm lower.algorithm default Louvain common consensus clustering (1000 iterations) uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" plot.EGA Boolean. TRUE, returns plot network estimated dimensions. Defaults TRUE verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, EGA, rotations","code":""},{"path":"https://r-ega.net/reference/hierEGA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical EGA — hierEGA","text":"Returns list lists containing: lower_order EGA results lower order structure higher_order EGA results higher order structure parameters list containing lower_loadings lower_scores used estimate scores higher order EGA results, respectively dim.variables data frame variable names lower higher order assignments TEFI Generalized TEFI using tefi plot.hierEGA Plot output plot.EGA = TRUE","code":""},{"path":"https://r-ega.net/reference/hierEGA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hierarchical EGA — hierEGA","text":"Hierarchical EGA simulation  Jiménez, M., Abad, F. J., Garcia-Garzon, E., Golino, H., Christensen, . P., & Garrido, L. E. (2023). Dimensionality assessment bifactor structures multiple general factors: network psychometrics approach. Psychological Methods. 3+ level hierarchical EGA  Samo, ., Christensen, . P., Abad, F. J., Garrido, L. E., Garcia-Garzon, E., Golino, H. & McAbee, S. T. (2023). Building structure personality bottom-using Hierarchical Exploratory Graph Analysis. PsyArXiv. Conceptual implementation  Golino, H., Thiyagarajan, J. ., Sadana, R., Teles, M., Christensen, . P., & Boker, S. M. (2020). Investigating broad domains intrinsic capacity, functional ability environment: exploratory graph analysis approach improving analytical methodologies measuring healthy aging. PsyArXiv. Revised network loadings  Christensen, . P., Golino, H., Abad, F. J., & Garrido, L. E. (2024). Revised network loadings. PsyArXiv.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/hierEGA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hierarchical EGA — hierEGA","text":"Marcos Jiménez <marcosjnezhquez@gmailcom>, Francisco J. Abad <fjose.abad@uam.es>, Eduardo Garcia-Garzon <egarcia@ucjc.edu>, Hudson Golino <hfg9s@virginia.edu>, Alexander P. Christensen <alexpaulchristensen@gmail.com>, Luis Eduardo Garrido <luisgarrido@pucmm.edu.>","code":""},{"path":"https://r-ega.net/reference/hierEGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical EGA — hierEGA","text":"","code":"# Example using network scores opt.hier <- hierEGA(   data = optimism, scores = \"network\",   plot.EGA = FALSE # No plot for CRAN checks ) #> Warning: This implementation of `hierEGA` is experimental.  #>  #> The underlying function and/or output may change until the results have been appropriately vetted and validated. #> The default 'loading.method' has changed to \"revised\" in {EGAnet} version >= 2.0.7. #>  #>  For the previous default (version <= 2.0.6), use `loading.method = \"original\"`  # \\donttest{ # Plot multilevel plot plot(opt.hier, plot.type = \"multilevel\")   # Plot multilevel plot with higher order # border color matching the corresponding # lower order color plot(opt.hier, color.match = TRUE)    # Plot levels separately plot(opt.hier, plot.type = \"separate\")# }"},{"path":"https://r-ega.net/reference/igraph2matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert  network to matrix — igraph2matrix","title":"Convert  network to matrix — igraph2matrix","text":"Converts  network matrix","code":""},{"path":"https://r-ega.net/reference/igraph2matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert  network to matrix — igraph2matrix","text":"","code":"igraph2matrix(igraph_network, diagonal = 0)"},{"path":"https://r-ega.net/reference/igraph2matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert  network to matrix — igraph2matrix","text":"igraph_network network object diagonal Numeric (length = 1). Value placed diagonal network. Defaults 0","code":""},{"path":"https://r-ega.net/reference/igraph2matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert  network to matrix — igraph2matrix","text":"Returns network  format","code":""},{"path":"https://r-ega.net/reference/igraph2matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert  network to matrix — igraph2matrix","text":"Hudson Golino <hfg9s virginia.edu> & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/igraph2matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert  network to matrix — igraph2matrix","text":"","code":"# Convert network to {igraph} igraph_network <- convert2igraph(ega.wmt$network)  # Convert network back to matrix igraph2matrix(igraph_network) #>             wmt1       wmt2        wmt3       wmt4       wmt5        wmt6 #> wmt1  0.00000000 0.20504140  0.02519858 0.20950744 0.10205827 0.000000000 #> wmt2  0.20504140 0.00000000  0.36317478 0.01981004 0.23029131 0.064983548 #> wmt3  0.02519858 0.36317478  0.00000000 0.07537304 0.00000000 0.152920281 #> wmt4  0.20950744 0.01981004  0.07537304 0.00000000 0.09624515 0.067310562 #> wmt5  0.10205827 0.23029131  0.00000000 0.09624515 0.00000000 0.012703703 #> wmt6  0.00000000 0.06498355  0.15292028 0.06731056 0.01270370 0.000000000 #> wmt7  0.00000000 0.00000000  0.01471000 0.07939620 0.06342734 0.155069001 #> wmt8  0.00000000 0.02836007  0.01791868 0.07745228 0.01402051 0.106495118 #> wmt9  0.00000000 0.05348284  0.00000000 0.01824286 0.00000000 0.099829836 #> wmt10 0.05972899 0.08544266  0.05718115 0.12124044 0.03045947 0.132591941 #> wmt11 0.03925086 0.00000000  0.08817080 0.00000000 0.03334977 0.006736274 #> wmt12 0.00000000 0.00000000  0.03973018 0.00000000 0.10263701 0.001836519 #> wmt13 0.00000000 0.00000000  0.03479151 0.00000000 0.07209698 0.043306825 #> wmt14 0.00000000 0.06331114  0.00000000 0.00000000 0.00000000 0.000000000 #> wmt15 0.00000000 0.00000000  0.00000000 0.07237912 0.00000000 0.106874171 #> wmt16 0.06962695 0.00000000  0.02295917 0.00000000 0.02381512 0.024587674 #> wmt17 0.04780781 0.00000000  0.00000000 0.03412561 0.12392761 0.129182165 #> wmt18 0.00000000 0.00000000 -0.01261399 0.00000000 0.00000000 0.000000000 #>             wmt7       wmt8       wmt9       wmt10       wmt11       wmt12 #> wmt1  0.00000000 0.00000000 0.00000000 0.059728988 0.039250855 0.000000000 #> wmt2  0.00000000 0.02836007 0.05348284 0.085442664 0.000000000 0.000000000 #> wmt3  0.01471000 0.01791868 0.00000000 0.057181149 0.088170795 0.039730183 #> wmt4  0.07939620 0.07745228 0.01824286 0.121240438 0.000000000 0.000000000 #> wmt5  0.06342734 0.01402051 0.00000000 0.030459472 0.033349775 0.102637012 #> wmt6  0.15506900 0.10649512 0.09982984 0.132591941 0.006736274 0.001836519 #> wmt7  0.00000000 0.18213231 0.00000000 0.057316344 0.122658354 0.000000000 #> wmt8  0.18213231 0.00000000 0.13905307 0.000000000 0.059099440 0.118491586 #> wmt9  0.00000000 0.13905307 0.00000000 0.198544958 0.000000000 0.118482744 #> wmt10 0.05731634 0.00000000 0.19854496 0.000000000 0.075170295 0.000000000 #> wmt11 0.12265835 0.05909944 0.00000000 0.075170295 0.000000000 0.061476902 #> wmt12 0.00000000 0.11849159 0.11848274 0.000000000 0.061476902 0.000000000 #> wmt13 0.06319015 0.00000000 0.10429971 0.069530854 0.000000000 0.000000000 #> wmt14 0.12988043 0.00000000 0.19330862 0.067465168 0.000000000 0.027208487 #> wmt15 0.09319009 0.00000000 0.03740509 0.000000000 0.048902139 0.187004269 #> wmt16 0.00000000 0.04832084 0.09111490 0.084525058 0.068598913 0.000000000 #> wmt17 0.06368262 0.00000000 0.00000000 0.000000000 0.001795742 0.113771734 #> wmt18 0.00000000 0.08098444 0.00000000 0.005726423 0.075462425 0.000000000 #>            wmt13      wmt14      wmt15      wmt16       wmt17        wmt18 #> wmt1  0.00000000 0.00000000 0.00000000 0.06962695 0.047807805  0.000000000 #> wmt2  0.00000000 0.06331114 0.00000000 0.00000000 0.000000000  0.000000000 #> wmt3  0.03479151 0.00000000 0.00000000 0.02295917 0.000000000 -0.012613989 #> wmt4  0.00000000 0.00000000 0.07237912 0.00000000 0.034125613  0.000000000 #> wmt5  0.07209698 0.00000000 0.00000000 0.02381512 0.123927607  0.000000000 #> wmt6  0.04330682 0.00000000 0.10687417 0.02458767 0.129182165  0.000000000 #> wmt7  0.06319015 0.12988043 0.09319009 0.00000000 0.063682622  0.000000000 #> wmt8  0.00000000 0.00000000 0.00000000 0.04832084 0.000000000  0.080984436 #> wmt9  0.10429971 0.19330862 0.03740509 0.09111490 0.000000000  0.000000000 #> wmt10 0.06953085 0.06746517 0.00000000 0.08452506 0.000000000  0.005726423 #> wmt11 0.00000000 0.00000000 0.04890214 0.06859891 0.001795742  0.075462425 #> wmt12 0.00000000 0.02720849 0.18700427 0.00000000 0.113771734  0.000000000 #> wmt13 0.00000000 0.09209023 0.05139276 0.14834616 0.000000000  0.000000000 #> wmt14 0.09209023 0.00000000 0.13528246 0.04271463 0.042612075  0.083977048 #> wmt15 0.05139276 0.13528246 0.00000000 0.09308491 0.000000000  0.076420880 #> wmt16 0.14834616 0.04271463 0.09308491 0.00000000 0.028523364  0.106791750 #> wmt17 0.00000000 0.04261207 0.00000000 0.02852336 0.000000000  0.183194088 #> wmt18 0.00000000 0.08397705 0.07642088 0.10679175 0.183194088  0.000000000"},{"path":"https://r-ega.net/reference/infoCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","title":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","text":"Performs hierarchical clustering using Jensen-Shannon distance followed Louvain algorithm consensus clustering. method iteratively identifies smaller smaller clusters change clusters identified","code":""},{"path":"https://r-ega.net/reference/infoCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","text":"","code":"infoCluster(dynEGA.object, plot.cluster = TRUE, ...)"},{"path":"https://r-ega.net/reference/infoCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","text":"dynEGA.object dynEGA dynEGA.ind.pop object used match arguments EII object plot.cluster Boolean (length = 1). plot optimal hierarchical clusters output? Defaults TRUE. Set FALSE plot ... Additional arguments passed jsd","code":""},{"path":"https://r-ega.net/reference/infoCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","text":"Returns list containing: clusters vector corresponding cluster participant belongs clusterTree dendogram hclust hierarhical clustering clusterPlot Plot output results JSD Jensen-Shannon Distance","code":""},{"path":[]},{"path":"https://r-ega.net/reference/infoCluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","text":"Hudson Golino <hfg9s virginia.edu> & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/infoCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information Theoretic Mixture Clustering for dynEGA — infoCluster","text":"","code":"# Obtain data sim.dynEGA <- sim.dynEGA # bypasses CRAN checks  if (FALSE) { # \\dontrun{ # Dynamic EGA individual and population structure dyn.ega1 <- dynEGA.ind.pop(   data = sim.dynEGA, n.embed = 5, tau = 1,   delta = 1, id = 25, use.derivatives = 1,   ncores = 2, corr = \"pearson\" )  # Perform information-theoretic clustering clust1 <- infoCluster(dynEGA.object = dyn.ega1)} # }"},{"path":"https://r-ega.net/reference/information.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Theory Metrics — information","title":"Information Theory Metrics — information","text":"general function compute several different information theory metrics","code":""},{"path":"https://r-ega.net/reference/information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Theory Metrics — information","text":"","code":"information(   data,   base = 2.718282,   bins = floor(sqrt(nrow(data)/5)),   statistic = c(\"entropy\", \"joint.entropy\", \"conditional.entropy\", \"total.correlation\",     \"dual.total.correlation\", \"o.information\") )"},{"path":"https://r-ega.net/reference/information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Theory Metrics — information","text":"data Matrix data frame. consist variables used analysis base Numeric (length = 1). Base logarithm use entropy. Common options include: 2 — bits 2.718282 — nats 10 — bans Defaults exp(1) 2.718282 bins Numeric (length = 1). Number bins data discrete. Defaults floor(sqrt(nrow(data) / 5)) statistic Character. Information theory statistics compute. Available options: \"entropy\" — Shannon's entropy (Shannon, 1948) variable data. Values range 0 log(k) k number categories variable \"joint.entropy\" — shared uncertainty variables data. Values range maximum individual entropies sum individual entropies \"conditional.entropy\" — uncertainty remaining considering variables data. Values range 0 individual entropy conditioned variable \"total.correlation\" — generalization mutual information two variables (Watanabe, 1960). Quantifies redundancy information data. Values range 0 sum individual entropies minus maximum individual entropies \"dual.total.correlation\" — \"shared randomness\" total uncertainty remaining data (Han, 1978). Values range 0 joint entropy \"o.information\" — quantifies extent data represented lower-order (> 0; redundancy) higher-order (< 0; synergy) constraint (Crutchfield, 1994) default, statistics computed","code":""},{"path":"https://r-ega.net/reference/information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information Theory Metrics — information","text":"Returns list containing requested statistic","code":""},{"path":"https://r-ega.net/reference/information.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Information Theory Metrics — information","text":"Shannon's entropy  Shannon, C. E. (1948). mathematical theory communication. Bell System Technical Journal, 27(3), 379-423. Formalization total correlation  Watanabe, S. (1960). Information theoretical analysis multivariate correlation. IBM Journal Research Development 4, 66-82. Applied implementation total correlation  Felix, L. M., Mansur-Alves, M., Teles, M., Jamison, L., & Golino, H. (2021). Longitudinal impact effects booster sessions cognitive training program healthy older adults. Archives Gerontology Geriatrics, 94, 104337. Formalization dual total correlation  Te Sun, H. (1978). Nonnegative entropy measures multivariate symmetric correlations. Information Control, 36, 133-156. Formalization O-information  Crutchfield, J. P. (1994). calculi emergence: Computation, dynamics induction. Physica D: Nonlinear Phenomena, 75(1-3), 11-54. Applied implementation O-information  Marinazzo, D., Van Roozendaal, J., Rosas, F. E., Stella, M., Comolatti, R., Colenbier, N., Stramaglia, S., & Rosseel, Y. (2024). information-theoretic approach build hypergraphs psychometrics. Behavior Research Methods, 1-23.","code":""},{"path":"https://r-ega.net/reference/information.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Information Theory Metrics — information","text":"Hudson F. Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information Theory Metrics — information","text":"","code":"# All measures information(wmt2[,7:24]) #> $entropy #>  [1] 0.6248171 0.4848127 0.5703028 0.6852211 0.6248171 0.6540949 0.6795459 #>  [8] 0.6889107 0.6852211 0.6686914 0.6323408 0.6261037 0.6811749 0.6879248 #> [15] 0.6329467 0.6410914 0.5107526 0.5738498 #>  #> $joint.entropy #> [1] 6.818678 #>  #> $conditional.entropy #>  [1] 0.06491355 0.04776910 0.06099249 0.06055578 0.06512678 0.05807372 #>  [7] 0.06634590 0.07136623 0.06008623 0.05776512 0.09258580 0.07823839 #> [13] 0.09740448 0.07219685 0.08422207 0.06995098 0.08668268 0.09056333 #>  #> $total.correlation #> [1] 4.533942 #>  #> $dual.total.correlation #> [1] 5.533838 #>  #> $o.information #> [1] -0.9998968 #>   # One measures information(wmt2[,7:24], statistic = \"joint.entropy\") #> $joint.entropy #> [1] 6.818678 #>"},{"path":"https://r-ega.net/reference/intelligenceBattery.html","id":null,"dir":"Reference","previous_headings":"","what":"Intelligence Data — intelligenceBattery","title":"Intelligence Data — intelligenceBattery","text":"response matrix (n = 1152) International Cognitive Ability Resource (ICAR) intelligence battery developed Condon Revelle (2016).","code":""},{"path":"https://r-ega.net/reference/intelligenceBattery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intelligence Data — intelligenceBattery","text":"","code":"data(intelligenceBattery)"},{"path":"https://r-ega.net/reference/intelligenceBattery.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intelligence Data — intelligenceBattery","text":"1185x125 response matrix","code":""},{"path":"https://r-ega.net/reference/intelligenceBattery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intelligence Data — intelligenceBattery","text":"","code":"data(\"intelligenceBattery\")"},{"path":"https://r-ega.net/reference/invariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement Invariance of EGA Structure — invariance","title":"Measurement Invariance of EGA Structure — invariance","text":"Estimates configural invariance using bootEGA data (across groups) first. configural variance established, metric invariance tested using community structure established configural invariance (see Details information process)","code":""},{"path":"https://r-ega.net/reference/invariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement Invariance of EGA Structure — invariance","text":"","code":"invariance(   data,   groups,   structure = NULL,   iter = 500,   configural.threshold = 0.7,   configural.type = c(\"parametric\", \"resampling\"),   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   ncores,   seed = NULL,   verbose = TRUE,   ... )"},{"path":"https://r-ega.net/reference/invariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measurement Invariance of EGA Structure — invariance","text":"data Matrix data frame. consist variables used analysis groups Numeric character vector (length = nrow(data)). Group membership corresponding case data structure Numeric character vector (length = ncol(data)). vector representing structure (numbers labels item). Can theoretical factors structure detected EGA. supplied, configural invariance check skipped (.e., configural invariance assumed based given structure) iter Numeric (length = 1). Number iterations perform permutation. Defaults 500 (recommended) configural.threshold Numeric (length = 1). Value use threshold itemStability determine items removed configural invariance (see Details information). Defaults 0.70 (recommended) configural.type Character (length = 1). Type bootstrap use configural invariance bootEGA. Defaults \"parametric\" corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character  cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" ncores Numeric (length = 1). Number cores use computing results. Defaults ceiling(parallel::detectCores() / 2) half computer's processing power. Set 1 use parallel computing unsure many cores computer , type: parallel::detectCores() seed Numeric (length = 1). Defaults NULL random results. Set reproducible results. See Reproducibility PRNG details random number generation verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress ... Additional arguments can passed auto.correlate, network.estimation, community.detection, community.consensus, EGA, bootEGA, net.loads","code":""},{"path":"https://r-ega.net/reference/invariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measurement Invariance of EGA Structure — invariance","text":"Returns list containing: configural.results bootEGA results final run produced configural invariance. output output final run unsuccessful configural invariance runs memberships Original memberships provided structure EGA structure = NULL EGA Original EGA results full sample groups list containing: EGA — EGA results group loadings — Network loadings (net.loads) group loadingsDifference — Difference dominant loadings group permutation list containing: groups — Permutated groups acorss iterations loadings — Network loadings (net.loads) group permutation loadingsDifference — Difference dominant loadings group permutation results Data frame results (printed)","code":""},{"path":"https://r-ega.net/reference/invariance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measurement Invariance of EGA Structure — invariance","text":"traditional psychometrics, measurement invariance performed sequential testing flexible (free parameters) rigid (fewer free parameters) structures. Measurement invariance network psychometrics different. Configural Invariance establish configural invariance, data collapsed across groups common sample structure identified used bootEGA itemStability. variables replication less 0.70 assigned dimension, considered unstable therefore invariant. variables removed process repeated items considered stable (replication values greater 0.70) variables left. configural invariance established, last run results returned metric invariance tested (configural invariance met). Importantly, variables removed, configural invariance met original structure. removal suggest partial configural invariance met. Metric Invariance variables remain configural invariance submitted metric invariance. First, group estimates network network loadings (net.loads) computed using assigned community memberships (determined configural invariance). , difference assigned loadings groups computed. difference represents empirical values. Second, group memberships permutated networks estimated based permutated groups iter times. , network loadings computed difference assigned loadings group computed, resulting null distribution. empirical difference compared null distribution using two-tailed p-value based number null distribution differences greater less empirical differences variable. uncorrected false discovery rate corrected p-values returned results. Uncorrected p-values flagged significance along direction group differences. Three Groups 3 groups, function performs metric invariance testing comparing possible pairs groups. Specifically: Pairwise Comparisons: function generates possible unique group pairings computes differences network loadings pair. community structure, derived configural invariance provided user, used groups. Permutation Testing: group pair, permutation tests conducted assess statistical significance observed differences loadings. p-values calculated based proportion permuted differences greater equal observed difference. Result Compilation: function compiles results pair including uncorrected (p) FDR-corrected (Benjamini-Hochberg; p_BH) p-values, direction differences. returns summary findings pairwise comparisons. approach allows detailed examination metric invariance across multiple groups, ensuring potential differences thoroughly assessed maintaining ability identify specific group differences. details, see Jamison, Golino, Christensen (2023)","code":""},{"path":"https://r-ega.net/reference/invariance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measurement Invariance of EGA Structure — invariance","text":"Original implementation  Jamison, L., Christensen, . P., & Golino, H. F. (2024). Metric invariance exploratory graph analysis via permutation testing. Methodology, 20(2), 144-186.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/invariance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measurement Invariance of EGA Structure — invariance","text":"Laura Jamison <lj5yn@virginia.edu>, Hudson F. Golino <hfg9s virginia.edu>, Alexander P. Christensen <alexpaulchristensen@gmail.com>,","code":""},{"path":"https://r-ega.net/reference/invariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measurement Invariance of EGA Structure — invariance","text":"","code":"# Load data wmt <- wmt2[-1,7:24]  # Groups groups <- rep(1:2, each = nrow(wmt) / 2)  if (FALSE) { # \\dontrun{ # Measurement invariance results <- invariance(wmt, groups, ncores = 2)  # Plot with uncorrected alpha = 0.05 plot(results, p_type = \"p\", p_value = 0.05)  # Plot with BH-corrected alpha = 0.10 plot(results, p_type = \"p_BH\", p_value = 0.10)} # }"},{"path":"https://r-ega.net/reference/itemStability.html","id":null,"dir":"Reference","previous_headings":"","what":"Item Stability Statistics from bootEGA — itemStability","title":"Item Stability Statistics from bootEGA — itemStability","text":"Based bootEGA results, function computes plots number times variable estimated dimension originally estimated empirical EGA structure theoretical/input structure. output also contains variable's replication frequency (.e., proportion bootstraps variable appeared dimension","code":""},{"path":"https://r-ega.net/reference/itemStability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Item Stability Statistics from bootEGA — itemStability","text":"","code":"itemStability(bootega.obj, IS.plot = TRUE, structure = NULL, ...)"},{"path":"https://r-ega.net/reference/itemStability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Item Stability Statistics from bootEGA — itemStability","text":"bootega.obj bootEGA object .plot Boolean (length = 1). plot produced item.replication? Defaults TRUE structure Numeric (length = number variables). theoretical pre-defined structure. Defaults NULL empirical EGA result bootega.obj ... Deprecated arguments previous versions itemStability","code":""},{"path":"https://r-ega.net/reference/itemStability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Item Stability Statistics from bootEGA — itemStability","text":"Returns list containing: membership list containing: empirical — vector empirical memberships empirical EGA result bootstrap — matrix homogenized memberships replicate samples bootEGA results structure — vector structure used analysis. structure = NULL, output empirical item.stability list containing: empirical.dimensions — vector proportion times item replicated within structure defined structure .dimensions — matrix proportion times item replicated structure defined dimensions plot Plot output .plot = TRUE","code":""},{"path":"https://r-ega.net/reference/itemStability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Item Stability Statistics from bootEGA — itemStability","text":"Original implementation bootEGA  Christensen, . P., & Golino, H. (2021). Estimating stability number factors via Bootstrap Exploratory Graph Analysis: tutorial. Psych, 3(3), 479-500. Conceptual introduction  Christensen, . P., Golino, H., & Silvia, P. J. (2020). psychometric network perspective validity validation personality trait questionnaires. European Journal Personality, 34(6), 1095-1108.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/itemStability.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Item Stability Statistics from bootEGA — itemStability","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/itemStability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Item Stability Statistics from bootEGA — itemStability","text":"","code":"# Load data wmt <- wmt2[,7:24]  if (FALSE) { # \\dontrun{ # Standard EGA example boot.wmt <- bootEGA(   data = wmt, iter = 500,   type = \"parametric\", ncores = 2 )} # }  # Standard item stability wmt.is <- itemStability(boot.wmt)   if (FALSE) { # \\dontrun{ # EGA fit example boot.wmt.fit <- bootEGA(   data = wmt, iter = 500,   EGA.type = \"EGA.fit\",   type = \"parametric\", ncores = 2 )  # EGA fit item stability wmt.is.fit <- itemStability(boot.wmt.fit)  # Hierarchical EGA example boot.wmt.hier <- bootEGA(   data = wmt, iter = 500,   EGA.type = \"hierEGA\",   type = \"parametric\", ncores = 2 )  # Hierarchical EGA item stability wmt.is.hier <- itemStability(boot.wmt.hier)  # Random-intercept EGA example boot.wmt.ri <- bootEGA(   data = wmt, iter = 500,   EGA.type = \"riEGA\",   type = \"parametric\", ncores = 2 )  # Random-intercept EGA item stability wmt.is.ri <- itemStability(boot.wmt.ri)} # }"},{"path":"https://r-ega.net/reference/jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Jensen-Shannon Distance — jsd","title":"Jensen-Shannon Distance — jsd","text":"Computes Jensen-Shannon Distance two networks","code":""},{"path":"https://r-ega.net/reference/jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jensen-Shannon Distance — jsd","text":"","code":"jsd(network1, network2, method = c(\"kld\", \"spectral\"), signed = TRUE)"},{"path":"https://r-ega.net/reference/jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jensen-Shannon Distance — jsd","text":"network1 Matrix data frame. Network compared network2 Matrix data frame. Second network compared method Character (length = 1). Method compute Jensen-Shannon Distance. Defaults \"spectral\". Available options: \"kld\" — Uses Kullback-Leibler Divergence \"spectral\" — Uses eigenvalues combinatorial Laplacian matrix compute Von Neumann entropy signed Boolean. (length = 1). networks remain signed? Defaults TRUE","code":""},{"path":"https://r-ega.net/reference/jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jensen-Shannon Distance — jsd","text":"Returns Jensen-Shannon Distance","code":""},{"path":"https://r-ega.net/reference/jsd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jensen-Shannon Distance — jsd","text":"Hudson Golino <hfg9s virginia.edu> & Alexander P. Christensen <alexander.christensen Vanderbilt.Edu>","code":""},{"path":"https://r-ega.net/reference/jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jensen-Shannon Distance — jsd","text":"","code":"# Obtain wmt2 data wmt <- wmt2[,7:24]  # Set seed (for reproducibility) set.seed(1234)  # Split data split1 <- sample(   1:nrow(wmt), floor(nrow(wmt) / 2) ) split2 <- setdiff(1:nrow(wmt), split1)  # Obtain split data data1 <- wmt[split1,] data2 <- wmt[split2,]  # Perform EBICglasso glas1 <- EBICglasso.qgraph(data1) glas2 <- EBICglasso.qgraph(data2)  # Spectral JSD jsd(glas1, glas2) #> [1] 0.1595893 # 0.1595893  # Spectral JSS (similarity) 1 - jsd(glas1, glas2) #> [1] 0.8404107 # 0.8404107  # Jensen-Shannon Divergence jsd(glas1, glas2, method = \"kld\") #> [1] 0.1393621 # 0.1393621"},{"path":"https://r-ega.net/reference/modularity.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the (Signed) Modularity Statistic — modularity","title":"Computes the (Signed) Modularity Statistic — modularity","text":"Computes (signed) modularity statistic given network community structure. Allows resolution parameter set","code":""},{"path":"https://r-ega.net/reference/modularity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the (Signed) Modularity Statistic — modularity","text":"","code":"modularity(network, memberships, resolution = 1, signed = FALSE)"},{"path":"https://r-ega.net/reference/modularity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the (Signed) Modularity Statistic — modularity","text":"network Matrix data frame. symmetric matrix representing network memberships Numeric (length = ncol(network)). numeric vector integer values corresponding node's community membership resolution Numeric (length = 1). parameter adjusts modularity prefer smaller (resolution > 1) larger (0 < resolution < 1) communities. Defaults 1 (standard modularity computation) signed Boolean (length = 1). Whether signed absolute modularity computed. common modularity metric defined positive values . Gomez et al. (2009) introduced signed version modularity discount modularity edges negative values. property always desired psychometric networks. TRUE, signed modularity metric computed. FALSE, absolute value edges network (using abs) used compute modularity. Defaults FALSE","code":""},{"path":"https://r-ega.net/reference/modularity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the (Signed) Modularity Statistic — modularity","text":"Returns modularity statistic","code":""},{"path":"https://r-ega.net/reference/modularity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computes the (Signed) Modularity Statistic — modularity","text":"Gomez, S., Jensen, P., & Arenas, . (2009). Analysis community structure networks correlated data. Physical Review E, 80(1), 016114.","code":""},{"path":"https://r-ega.net/reference/modularity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes the (Signed) Modularity Statistic — modularity","text":"Alexander P. Christensen <alexpaulchristensen@gmail.com> assistance GPT-4","code":""},{"path":"https://r-ega.net/reference/modularity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the (Signed) Modularity Statistic — modularity","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate EGA ega.wmt <- EGA(wmt, model = \"glasso\")   # Compute standard (absolute values) modularity modularity(   network = ega.wmt$network,   memberships = ega.wmt$wc,   signed = FALSE ) #> [1] 0.1697952 # 0.1697952  # Compute signed modularity modularity(   network = ega.wmt$network,   memberships = ega.wmt$wc,   signed = TRUE ) #> [1] 0.1701946 # 0.1701946"},{"path":"https://r-ega.net/reference/net.loads.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Loadings — net.loads","title":"Network Loadings — net.loads","text":"Computes - within-community strength variable community","code":""},{"path":"https://r-ega.net/reference/net.loads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Loadings — net.loads","text":"","code":"net.loads(   A,   wc,   loading.method = c(\"original\", \"revised\"),   scaling = 2,   rotation = NULL,   ... )"},{"path":"https://r-ega.net/reference/net.loads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Loadings — net.loads","text":"Network matrix, data frame, EGA object wc Numeric character vector (length = ncol()). vector community assignments. input EGA object, wc automatically detected loading.method Character (length = 1). Sets network loading calculation based implementation described \"original\" (Christensen & Golino, 2021) \"revised\" (Christensen et al., 2024) implementation. Defaults \"revised\" scaling Numeric (length = 1). Scaling factor magnitude \"experimental\" network loadings. Defaults 2. 10 makes loadings roughly size factor loadings correlations factors orthogonal rotation Character. rotation use obtain simpler structure. list rotations, see rotations options. Defaults NULL rotation. setting rotation, scores estimation based rotated loadings rather unrotated loadings ... Additional arguments pass rotations","code":""},{"path":"https://r-ega.net/reference/net.loads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Loadings — net.loads","text":"Returns list containing: unstd matrix unstandardized within- -community strength values node std matrix standardized within- -community strength values node rotated NULL rotation = NULL; otherwise, list containing rotated standardized network loadings (loadings) correlations dimensions (Phi) rotation","code":""},{"path":"https://r-ega.net/reference/net.loads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network Loadings — net.loads","text":"Simulation studies demonstrated node's strength centrality roughly equivalent factor loadings (Christensen & Golino, 2021; Hallquist, Wright, & Molenaar, 2019). Hallquist colleagues (2019) found node strength represented combination dominant cross-factor loadings. function computes node's strength within specified dimension, providing rough equivalent factor loadings (including cross-loadings; Christensen & Golino, 2021).","code":""},{"path":"https://r-ega.net/reference/net.loads.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Network Loadings — net.loads","text":"Original implementation simulation  Christensen, . P., & Golino, H. (2021). equivalency factor network loadings. Behavior Research Methods, 53, 1563-1580. Demonstration node strength similarity CFA loadings  Hallquist, M., Wright, . C. G., & Molenaar, P. C. M. (2019). Problems centrality measures psychopathology symptom networks: network psychometrics escape psychometric theory. Multivariate Behavioral Research, 1-25. Revised network loadings  Christensen, . P., Golino, H., Abad, F. J., & Garrido, L. E. (2024). Revised network loadings. PsyArXiv.","code":""},{"path":"https://r-ega.net/reference/net.loads.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Network Loadings — net.loads","text":"Alexander P. Christensen <alexpaulchristensen@gmail.com> Hudson Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/net.loads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Loadings — net.loads","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate EGA ega.wmt <- EGA(   data = wmt,   plot.EGA = FALSE # No plot for CRAN checks )  # Network loadings net.loads(ega.wmt) #> The default 'loading.method' has changed to \"revised\" in {EGAnet} version >= 2.0.7. #>  #>  For the previous default (version <= 2.0.6), use `loading.method = \"original\"` #> Loading Method: Revised #>  #>       1     2     #> wmt2  0.608 0.145 #> wmt1  0.402 0.106 #> wmt3  0.344 0.204 #> wmt5  0.318 0.234 #> wmt4  0.298 0.231 #> wmt9        0.523 #> wmt7        0.461 #> wmt15       0.441 #> wmt14       0.433 #> wmt6  0.177 0.429 #> wmt16       0.392 #> wmt8        0.391 #> wmt10  0.21 0.368 #> wmt12       0.334 #> wmt18       0.326 #> wmt13       0.304 #> wmt17 0.122 0.299 #> wmt11       0.277 #> Standardized loadings >= |0.10| are displayed. To change this 'minimum', use `print(net.loads_object, minimum = 0.10)`"},{"path":"https://r-ega.net/reference/net.scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Scores — net.scores","title":"Network Scores — net.scores","text":"function computes network scores computed based node's strength within community network (see net.loads). values used \"network loadings\" weights variable. Network scores computed formative composite rather reflective factor. composite representation consistent latent factors psychometric network theory proposes. Scores can computed \"simple\" structure, equivalent weighted sum scores \"full\" structure, equivalent EFA approach. Conservatively, \"simple\" structure approach recommended validation","code":""},{"path":"https://r-ega.net/reference/net.scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Scores — net.scores","text":"","code":"net.scores(   data,   A,   wc,   loading.method = c(\"original\", \"revised\"),   rotation = NULL,   scores = c(\"Anderson\", \"Bartlett\", \"components\", \"Harman\", \"network\", \"tenBerge\",     \"Thurstone\"),   loading.structure = c(\"simple\", \"full\"),   impute = c(\"mean\", \"median\", \"none\"),   ... )"},{"path":"https://r-ega.net/reference/net.scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Scores — net.scores","text":"data Matrix data frame. consist variables used analysis Network matrix, data frame, EGA object wc Numeric character vector (length = ncol()). vector community assignments. input EGA object, wc automatically detected loading.method Character (length = 1). Sets network loading calculation based implementation described \"original\" (Christensen & Golino, 2021) \"revised\" (Christensen et al., 2024) implementation. Defaults \"revised\" rotation Character. rotation use obtain simpler structure. list rotations, see rotations options. Defaults NULL rotation. setting rotation, scores estimation based rotated loadings rather unrotated loadings scores Character (length = 1). scores estimated? Defaults \"network\" network scores. Set scoring methods computed using factor.scores (see link arguments explanations methods) loading.structure Character (length = 1). Whether simple structure saturated loading matrix used computing scores. Defaults \"simple\" \"simple\" structure closely mirrors sum scores CFA; \"full\" structure closely mirrors EFA Simple structure \"conservative\" (established) approach therefore default. Treat \"full\" experimental proper vetting validation established impute Character (length = 1). missing data, imputation can implemented. Available options: \"none\" — Default. imputation performed \"mean\" — mean value variable used replace missing data variable \"median\" — median value variable used replace missing data variable ... Additional arguments passed net.loads factor.scores","code":""},{"path":"https://r-ega.net/reference/net.scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Scores — net.scores","text":"Returns list containing: scores list containing standardized (std.scores) rotated (rot.scores) scores. rotation = NULL, rot.scores NULL loadings Output net.loads","code":""},{"path":"https://r-ega.net/reference/net.scores.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Network Scores — net.scores","text":"Original implementation simulation loadings  Christensen, . P., & Golino, H. (2021). equivalency factor network loadings. Behavior Research Methods, 53, 1563-1580. Preliminary simulation scores  Golino, H., Christensen, . P., Moulder, R., Kim, S., & Boker, S. M. (2021). Modeling latent topics social media using Dynamic Exploratory Graph Analysis: case right-wing left-wing trolls 2016 US elections. Psychometrika. Revised network loadings  Christensen, . P., Golino, H., Abad, F. J., & Garrido, L. E. (2024). Revised network loadings. PsyArXiv.","code":""},{"path":"https://r-ega.net/reference/net.scores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Network Scores — net.scores","text":"Alexander P. Christensen <alexpaulchristensen@gmail.com> Hudson F. Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/net.scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Scores — net.scores","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate EGA ega.wmt <- EGA(   data = wmt,   plot.EGA = FALSE # No plot for CRAN checks )  # Network scores net.scores(data = wmt, A = ega.wmt) #> The default 'loading.method' has changed to \"revised\" in {EGAnet} version >= 2.0.7. #>  #>  For the previous default (version <= 2.0.6), use `loading.method = \"original\"` #> $scores #> $scores$std.scores #>                   1            2 #>    [1,] -1.16628719  0.306711594 #>    [2,]  1.24929277  4.595004206 #>    [3,]  0.64929550  1.915813506 #>    [4,] -0.89839873 -2.844776087 #>    [5,]  1.24929277 -2.009917522 #>    [6,]  1.24929277 -3.598234276 #>    [7,] -2.63724729 -1.166915815 #>    [8,]  1.24929277  5.926400834 #>    [9,]  0.56572589 -0.177986940 #>   [10,]  0.64929550 -1.834083359 #>   [11,]  0.56572589  0.763026420 #>   [12,]  0.64929550  3.878006924 #>   [13,]  0.38516542 -1.049054531 #>   [14,]  1.24929277 -1.967116629 #>   [15,]  1.24929277 -2.336866525 #>   [16,] -2.44985134 -3.791324470 #>   [17,]  1.24929277 -2.111110435 #>   [18,] -0.29840146 -2.609305401 #>   [19,] -1.58572399 -2.886891712 #>   [20,]  1.24929277  4.467294796 #>   [21,]  1.24929277  5.926400834 #>   [22,] -0.21483185  1.982118854 #>   [23,]  1.24929277  2.239409336 #>   [24,] -1.68579195  0.261983266 #>   [25,]  1.24929277  1.223399199 #>   [26,] -1.76628446 -2.240069270 #>   [27,]  1.24929277 -3.779975038 #>   [28,] -3.23724456 -4.533433226 #>   [29,] -0.03427138 -0.269931926 #>   [30,]  1.24929277  5.310344584 #>   [31,]  1.24929277  4.131231843 #>   [32,] -0.29840146 -1.873805249 #>   [33,]  1.24929277  4.721056713 #>   [34,]  1.24929277 -2.886891712 #>   [35,]  1.24929277  1.515446824 #>   [36,]  0.46189956 -0.659006253 #>   [37,]  0.64929550  0.080703622 #>   [38,] -0.82166460 -3.031658998 #>   [39,]  0.64929550  2.168228285 #>   [40,] -3.23724456  0.799487327 #>   [41,]  1.24929277  2.987725376 #>   [42,] -0.82166460 -1.384420624 #>   [43,] -0.03427138 -0.358057070 #>   [44,]  1.24929277  0.544475985 #>   [45,] -0.13809771 -3.480372992 #>   [46,]  1.24929277  2.367118746 #>   [47,] -0.21483185 -1.971233417 #>   [48,]  1.24929277  1.282510306 #>   [49,]  0.64929550  5.184292077 #>   [50,] -1.58572399 -0.898632527 #>   [51,]  1.24929277  3.644316968 #>   [52,]  0.64929550 -1.681547591 #>   [53,] -1.68579195 -3.062977756 #>   [54,] -0.22166733 -1.373076114 #>   [55,]  0.64929550  1.238998327 #>   [56,] -0.03427138 -0.027564936 #>   [57,]  0.46189956 -3.598234276 #>   [58,] -0.82166460 -0.497682207 #>   [59,]  1.24929277  1.779140193 #>   [60,]  1.24929277  0.472979279 #>   [61,]  1.24929277  5.926400834 #>   [62,]  0.38516542  5.172942645 #>   [63,] -0.03427138  2.188971091 #>   [64,]  0.56572589  3.531717151 #>   [65,]  0.38516542  1.683728235 #>   [66,]  1.24929277  2.900958787 #>   [67,] -3.23724456 -3.662365635 #>   [68,]  0.64929550  4.370692504 #>   [69,]  0.64929550  0.544475985 #>   [70,] -0.21483185 -2.727166684 #>   [71,]  0.64929550  3.414234562 #>   [72,]  1.24929277  5.033317508 #>   [73,] -0.03427138 -1.501482383 #>   [74,]  1.24929277 -0.491337299 #>   [75,]  1.24929277  0.313002370 #>   [76,] -1.08955305 -3.706380963 #>   [77,] -0.89839873 -3.640349901 #>   [78,]  0.38516542  0.502200669 #>   [79,]  1.24929277  1.109394359 #>   [80,] -1.76628446  0.434421004 #>   [81,]  1.24929277  1.582477851 #>   [82,]  1.24929277 -0.866004451 #>   [83,]  0.46189956 -0.152322523 #>   [84,] -1.00222507 -4.533433226 #>   [85,]  0.38516542  0.520106488 #>   [86,]  0.64929550 -1.250119348 #>   [87,] -1.16628719  0.633641456 #>   [88,]  1.24929277  3.745258000 #>   [89,]  0.64929550  3.856969885 #>   [90,]  1.24929277  4.253167562 #>   [91,]  0.38516542 -0.208982203 #>   [92,] -0.22166733  2.157652333 #>   [93,] -0.21483185  1.474209292 #>   [94,] -0.21483185 -2.609305401 #>   [95,]  1.24929277  1.391174079 #>   [96,] -2.37311720 -2.363634903 #>   [97,]  1.24929277  2.200320524 #>   [98,]  0.56572589 -1.212120510 #>   [99,]  0.64929550  2.312920340 #>  [100,]  0.38516542  2.276459433 #>  [101,]  1.24929277  3.680463601 #>  [102,]  0.56572589  0.249424320 #>  [103,]  0.64929550 -2.037264479 #>  [104,]  1.24929277  1.882079897 #>  [105,]  0.38516542  2.090265542 #>  [106,]  1.24929277  4.595004206 #>  [107,]  1.24929277 -1.116834197 #>  [108,] -0.98572672  3.191579763 #>  [109,]  1.24929277  4.471369231 #>  [110,]  1.24929277  4.357239814 #>  [111,]  0.56572589  1.735298736 #>  [112,]  1.24929277  5.337112962 #>  [113,]  1.24929277  4.873340599 #>  [114,]  0.38516542  3.767951943 #>  [115,] -0.03427138 -2.110858554 #>  [116,]  1.24929277  5.926400834 #>  [117,]  0.64929550  2.438972847 #>  [118,]  0.46189956  2.115377017 #>  [119,] -3.23724456 -0.320015879 #>  [120,]  1.24929277  2.115377017 #>  [121,]  1.24929277  3.329291055 #>  [122,]  1.24929277  2.024619063 #>  [123,]  1.24929277  4.568235828 #>  [124,] -0.98572672  0.720751104 #>  [125,]  1.24929277  2.364527500 #>  [126,]  1.24929277  3.978947956 #>  [127,] -0.21483185  1.373268261 #>  [128,]  1.24929277  4.471369231 #>  [129,]  1.24929277  2.902208212 #>  [130,]  1.24929277  4.572310263 #>  [131,]  0.64929550 -2.115863079 #>  [132,]  1.24929277  5.188366512 #>  [133,]  0.46189956  0.995264943 #>  [134,] -0.89839873 -0.322390358 #>  [135,]  1.24929277  2.896884352 #>  [136,]  0.56572589 -0.282576278 #>  [137,]  1.24929277  0.003753822 #>  [138,] -0.13809771  4.525567637 #>  [139,]  1.24929277 -0.309344656 #>  [140,]  0.64929550  1.373268261 #>  [141,] -0.89839873 -3.791324470 #>  [142,]  0.38516542 -0.432998282 #>  [143,]  0.56572589  0.552030406 #>  [144,]  0.38516542  2.544514108 #>  [145,]  0.64929550  1.441852749 #>  [146,]  1.24929277  0.606397132 #>  [147,]  0.38516542 -0.113855580 #>  [148,] -0.03427138 -3.917376977 #>  [149,]  1.24929277  0.453416557 #>  [150,]  0.38516542  5.099348571 #>  [151,]  1.24929277  2.115377017 #>  [152,]  1.24929277  4.599078641 #>  [153,]  1.24929277  2.242136634 #>  [154,]  1.24929277  2.413861372 #>  [155,]  1.24929277  4.244639998 #>  [156,] -0.21483185  3.266025110 #>  [157,]  1.24929277  4.568235828 #>  [158,]  1.24929277 -3.598234276 #>  [159,]  0.64929550 -1.370348816 #>  [160,]  1.24929277  1.528143393 #>  [161,]  1.24929277  1.302484554 #>  [162,] -0.29840146 -1.362404890 #>  [163,]  1.24929277  2.268905012 #>  [164,]  1.24929277  4.467294796 #>  [165,] -3.23724456 -1.900114421 #>  [166,]  1.24929277  4.361314249 #>  [167,] -1.00222507 -0.193410807 #>  [168,]  1.24929277  3.856969885 #>  [169,]  1.24929277  1.368341745 #>  [170,] -0.13809771  1.091488541 #>  [171,] -0.03427138  0.472979279 #>  [172,] -0.22166733 -2.609305401 #>  [173,]  0.56572589  0.607594830 #>  [174,]  0.64929550  0.983341853 #>  [175,]  0.64929550 -0.249119779 #>  [176,] -0.03427138  1.915813506 #>  [177,]  1.24929277  0.438069310 #>  [178,]  1.24929277  0.940640785 #>  [179,]  1.24929277 -4.533433226 #>  [180,] -1.00222507 -3.640349901 #>  [181,]  0.64929550  3.575190165 #>  [182,]  0.64929550  1.678323400 #>  [183,] -0.98572672  3.619205493 #>  [184,]  0.38516542 -1.166915815 #>  [185,] -0.21483185  4.439276993 #>  [186,] -1.00222507 -2.270835463 #>  [187,]  1.24929277  3.506605676 #>  [188,]  1.24929277  3.701242672 #>  [189,]  1.24929277 -0.023111807 #>  [190,]  0.38516542 -0.164966875 #>  [191,]  1.24929277 -3.008946404 #>  [192,]  0.56572589  1.192429573 #>  [193,] -0.21483185 -3.051062030 #>  [194,]  1.24929277  5.926400834 #>  [195,]  1.24929277  3.741183565 #>  [196,]  0.64929550  2.179887070 #>  [197,]  1.24929277  5.188366512 #>  [198,]  0.38516542 -1.353101866 #>  [199,] -0.98572672  0.046029138 #>  [200,] -0.82166460 -1.502259841 #>  [201,] -0.40222780 -2.840322958 #>  [202,]  1.24929277  5.184292077 #>  [203,]  0.38516542  0.742592967 #>  [204,] -1.00222507 -0.118398121 #>  [205,]  1.24929277  3.575190165 #>  [206,] -0.89839873  1.944001044 #>  [207,]  0.64929550  2.517348385 #>  [208,] -0.21483185  0.475432291 #>  [209,] -0.03427138 -3.024293651 #>  [210,] -0.29840146 -3.598234276 #>  [211,]  1.24929277  4.599078641 #>  [212,]  1.24929277  2.635538085 #>  [213,] -0.89839873 -0.657659115 #>  [214,]  1.24929277  1.309941724 #>  [215,]  1.24929277  2.804084911 #>  [216,]  0.46189956 -1.828176760 #>  [217,]  1.24929277  4.620115681 #>  [218,] -3.23724456 -3.662365635 #>  [219,] -0.13809771 -0.889169813 #>  [220,]  1.24929277 -0.339863552 #>  [221,]  1.24929277 -0.253572907 #>  [222,] -1.08955305  0.364558306 #>  [223,]  1.24929277  5.188366512 #>  [224,] -0.29840146 -1.528726707 #>  [225,]  1.24929277  0.310912842 #>  [226,]  0.56572589 -0.295848223 #>  [227,]  1.24929277 -2.705150950 #>  [228,] -0.82166460 -0.320015879 #>  [229,]  1.24929277  0.438069310 #>  [230,]  1.24929277  3.619205493 #>  [231,]  1.24929277  3.619205493 #>  [232,]  1.24929277  2.828299863 #>  [233,]  1.24929277  1.474209292 #>  [234,] -0.13809771  3.499275781 #>  [235,]  0.64929550  4.986748754 #>  [236,] -0.03427138 -1.716222076 #>  [237,]  1.24929277  5.209403552 #>  [238,] -0.89839873 -1.947239633 #>  [239,] -2.55367767 -1.747578654 #>  [240,]  1.24929277 -0.403994911 #>  [241,] -3.23724456 -3.008946404 #>  [242,]  0.64929550  1.309941724 #>  [243,]  0.38516542  1.864257571 #>  [244,]  1.24929277  2.200320524 #>  [245,]  1.24929277 -2.224009767 #>  [246,]  1.24929277  2.938354845 #>  [247,] -0.30215984  4.552336015 #>  [248,]  1.24929277  4.317298921 #>  [249,] -0.90215711  2.858192884 #>  [250,]  1.24929277  5.926400834 #>  [251,] -0.30215984  3.607856061 #>  [252,]  0.64929550 -2.168145828 #>  [253,]  1.24929277  4.446257756 #>  [254,] -0.82166460 -1.986405065 #>  [255,] -0.40222780  0.326114626 #>  [256,]  1.24929277  0.326274316 #>  [257,]  1.24929277  3.619205493 #>  [258,]  0.64929550  1.197182217 #>  [259,] -0.90215711  1.073925936 #>  [260,] -1.00222507  2.709118017 #>  [261,]  0.64929550  4.467294796 #>  [262,] -2.55367767  3.767951943 #>  [263,] -0.13809771 -3.640349901 #>  [264,] -0.03427138 -1.470551578 #>  [265,]  0.64929550 -1.203376722 #>  [266,]  0.64929550  2.023382399 #>  [267,]  1.24929277  3.619205493 #>  [268,]  0.38516542 -1.920374003 #>  [269,] -0.13809771  1.148782687 #>  [270,]  1.24929277  2.890549427 #>  [271,]  1.24929277  3.531717151 #>  [272,]  1.24929277  4.249093127 #>  [273,] -0.03427138 -1.275062502 #>  [274,]  0.38516542 -0.333035944 #>  [275,] -1.00222507  2.736788470 #>  [276,]  1.24929277  3.882081359 #>  [277,] -0.40222780  1.180178066 #>  [278,] -1.58572399 -3.917376977 #>  [279,]  0.64929550  1.779314064 #>  [280,]  0.38516542  1.972739210 #>  [281,]  1.24929277  1.516484608 #>  [282,]  1.24929277  5.188366512 #>  [283,] -1.00222507 -1.834083359 #>  [284,]  1.24929277  3.793063418 #>  [285,] -0.30215984  5.926400834 #>  [286,]  1.24929277  3.793063418 #>  [287,]  0.38516542  0.240680531 #>  [288,]  1.24929277 -3.816435945 #>  [289,]  0.64929550  1.277044663 #>  [290,] -3.23724456 -2.462345374 #>  [291,] -0.89839873 -2.169894431 #>  [292,] -0.89839873 -1.166915815 #>  [293,] -0.89839873  1.962556132 #>  [294,] -1.84985407 -1.398865797 #>  [295,]  0.64929550  4.446257756 #>  [296,]  1.24929277 -0.093595999 #>  [297,]  1.24929277 -3.816435945 #>  [298,]  0.46189956 -1.663801463 #>  [299,] -0.03427138 -3.640349901 #>  [300,]  1.24929277  0.198405215 #>  [301,]  0.64929550  3.155970128 #>  [302,]  1.24929277  2.613906934 #>  [303,]  1.24929277 -3.598234276 #>  [304,]  1.24929277 -0.854655019 #>  [305,]  0.56572589  2.355195656 #>  [306,]  1.24929277  2.917317805 #>  [307,] -0.29840146 -2.421810032 #>  [308,]  0.46189956 -1.760397094 #>  [309,]  1.24929277  4.595004206 #>  [310,]  0.38516542 -2.219257123 #>  [311,]  1.24929277  1.980461951 #>  [312,] -0.89839873 -1.834083359 #>  [313,]  1.24929277  5.188366512 #>  [314,] -3.23724456 -1.787514605 #>  [315,]  0.64929550 -3.779975038 #>  [316,]  0.64929550 -1.834083359 #>  [317,]  0.38516542  2.413861372 #>  [318,]  0.64929550  0.603141701 #>  [319,] -0.29840146 -0.424547338 #>  [320,]  1.24929277  5.337112962 #>  [321,]  1.24929277  5.055333242 #>  [322,]  0.38516542 -1.049054531 #>  [323,]  1.24929277  1.520778047 #>  [324,] -0.22166733 -0.588299167 #>  [325,]  1.24929277  0.326274316 #>  [326,]  0.38516542  2.801531485 #>  [327,] -3.23724456 -1.798612156 #>  [328,]  1.24929277 -2.270835463 #>  [329,]  1.24929277  0.402245205 #>  [330,] -1.77311993 -2.908907447 #>  [331,]  0.46189956  5.188366512 #>  [332,]  0.38516542  0.428689665 #>  [333,]  0.38516542 -1.963042194 #>  [334,]  1.24929277  2.679553413 #>  [335,] -0.29840146 -1.343001858 #>  [336,] -0.03427138 -3.593781147 #>  [337,] -3.23724456 -3.227148073 #>  [338,] -0.29840146  0.825796499 #>  [339,] -0.03427138 -2.473689885 #>  [340,] -1.68579195 -2.769282310 #>  [341,]  1.24929277  0.710469385 #>  [342,]  0.64929550 -1.339746427 #>  [343,]  1.24929277  0.757212011 #>  [344,]  0.64929550  2.046250214 #>  [345,] -2.44985134 -4.533433226 #>  [346,] -0.89839873 -2.766728884 #>  [347,]  1.24929277 -0.295848223 #>  [348,]  1.24929277  2.544514108 #>  [349,] -0.82166460 -3.640349901 #>  [350,]  0.46189956 -1.064478399 #>  [351,] -0.29840146 -3.593781147 #>  [352,] -0.13809771 -3.190687166 #>  [353,] -1.16628719  0.001967399 #>  [354,]  1.24929277 -2.110858554 #>  [355,]  1.24929277 -1.791715853 #>  [356,]  1.24929277 -2.169894431 #>  [357,] -1.84985407 -2.388437026 #>  [358,]  1.24929277  1.275614003 #>  [359,]  0.46189956  2.268905012 #>  [360,] -1.68579195  0.452074942 #>  [361,] -1.00222507  2.355195656 #>  [362,]  0.38516542  0.355936171 #>  [363,]  0.64929550 -0.059572714 #>  [364,] -0.13809771 -3.206111034 #>  [365,] -2.55367767 -4.533433226 #>  [366,]  0.46189956  0.368632741 #>  [367,] -1.58572399  0.475083159 #>  [368,] -1.68579195 -1.980604799 #>  [369,]  1.24929277 -3.748656279 #>  [370,] -0.30215984 -1.765498870 #>  [371,] -0.89839873 -2.330969008 #>  [372,]  1.24929277 -2.266285083 #>  [373,] -2.63724729 -3.779975038 #>  [374,]  1.24929277  1.965759836 #>  [375,] -1.76628446 -4.533433226 #>  [376,] -1.58572399 -4.533433226 #>  [377,]  0.64929550 -3.024293651 #>  [378,] -0.21483185 -1.647637587 #>  [379,]  1.24929277  2.596518200 #>  [380,]  0.38516542 -1.182339682 #>  [381,] -2.55367767 -1.973708496 #>  [382,] -0.21483185 -1.117086078 #>  [383,] -3.23724456 -4.533433226 #>  [384,] -3.23724456 -1.647637587 #>  [385,]  1.24929277 -0.113855580 #>  [386,]  0.56572589 -2.089094701 #>  [387,] -0.13809771  3.619205493 #>  [388,] -2.44985134 -2.898241145 #>  [389,] -1.68579195 -2.864316742 #>  [390,] -2.44985134 -3.598234276 #>  [391,] -1.68955032 -3.640349901 #>  [392,]  0.38516542 -2.908907447 #>  [393,]  0.56572589 -1.947239633 #>  [394,]  0.64929550  1.808485822 #>  [395,] -1.08579468 -3.748656279 #>  [396,] -0.03427138  1.318132947 #>  [397,] -3.23724456 -3.944145355 #>  [398,] -3.23724456 -2.139128238 #>  [399,]  1.24929277  1.729567397 #>  [400,] -1.95368040 -2.336292868 #>  [401,]  0.56572589 -0.269931926 #>  [402,]  0.46189956 -1.365895687 #>  [403,] -2.63724729 -1.674106450 #>  [404,]  0.56572589 -2.700697821 #>  [405,] -2.37311720 -3.791324470 #>  [406,] -1.95368040 -2.898241145 #>  [407,] -0.03427138 -2.855572954 #>  [408,]  0.46189956 -2.297603841 #>  [409,]  1.24929277 -2.169894431 #>  [410,] -1.58572399 -3.024293651 #>  [411,] -3.23724456 -1.200029100 #>  [412,] -1.68579195 -4.533433226 #>  [413,]  1.24929277  2.679553413 #>  [414,]  1.24929277 -1.006938906 #>  [415,]  0.64929550 -3.480372992 #>  [416,] -1.08579468 -1.920374003 #>  [417,]  1.24929277 -1.652090716 #>  [418,] -2.44985134 -4.533433226 #>  [419,] -3.23724456 -1.985057928 #>  [420,] -3.23724456 -3.117093092 #>  [421,] -0.13809771 -3.480372992 #>  [422,] -1.84985407 -2.891085121 #>  [423,] -3.23724456 -2.813457328 #>  [424,] -3.23724456 -0.980721923 #>  [425,] -2.44985134 -4.533433226 #>  [426,]  1.24929277 -0.516201814 #>  [427,] -2.44985134 -3.791324470 #>  [428,] -1.77311993 -2.118091198 #>  [429,] -2.63724729 -2.079539795 #>  [430,] -1.68579195 -2.881236994 #>  [431,] -3.23724456 -2.727166684 #>  [432,] -1.68579195 -3.779975038 #>  [433,]  1.24929277  2.040518875 #>  [434,] -1.84985407 -2.079539795 #>  [435,] -2.55367767 -4.533433226 #>  [436,] -2.63724729 -3.163918788 #>  [437,] -1.00222507 -2.864316742 #>  [438,] -1.76628446 -2.924331314 #>  [439,] -2.37311720 -3.640349901 #>  [440,] -0.82166460 -2.009917522 #>  [441,] -0.40222780 -4.533433226 #>  [442,] -2.44985134 -4.533433226 #>  [443,] -1.08579468 -2.147319461 #>  [444,] -1.68579195 -3.791324470 #>  [445,]  0.64929550 -2.144782956 #>  [446,] -3.23724456 -3.917376977 #>  [447,] -1.08955305 -1.981951937 #>  [448,] -3.23724456 -3.008946404 #>  [449,] -2.37311720 -0.477265491 #>  [450,]  0.64929550  0.410051507 #>  [451,] -3.23724456 -2.886891712 #>  [452,] -2.37311720 -1.978598764 #>  [453,] -0.22166733 -1.971233417 #>  [454,] -2.55367767 -3.748656279 #>  [455,]  0.56572589 -1.362404890 #>  [456,] -0.89839873 -2.945368354 #>  [457,]  0.64929550  2.177452709 #>  [458,]  0.64929550  4.986748754 #>  [459,] -0.03427138 -0.417491344 #>  [460,] -2.63724729 -3.944145355 #>  [461,]  1.24929277  3.632658183 #>  [462,] -2.44985134 -1.480244107 #>  [463,] -0.89839873 -3.640349901 #>  [464,] -0.89839873 -3.706380963 #>  [465,] -0.03427138 -1.339829920 #>  [466,]  1.24929277 -0.535352627 #>  [467,]  1.24929277  2.592869894 #>  [468,]  1.24929277  0.016412572 #>  [469,] -2.55367767 -3.008946404 #>  [470,]  0.56572589 -2.726914804 #>  [471,]  0.64929550 -1.124640499 #>  [472,] -3.23724456 -3.024293651 #>  [473,] -1.68579195 -2.574630917 #>  [474,] -2.37311720 -1.594757769 #>  [475,] -1.00222507 -3.917376977 #>  [476,] -0.90215711 -4.533433226 #>  [477,] -0.13809771 -3.010621958 #>  [478,] -2.55367767 -3.917376977 #>  [479,]  1.24929277  2.917317805 #>  [480,]  0.64929550 -3.051062030 #>  [481,] -1.76628446 -2.891085121 #>  [482,] -3.23724456 -2.071348572 #>  [483,]  1.24929277 -1.171206474 #>  [484,]  0.56572589 -1.559569520 #>  [485,]  0.56572589  1.030224544 #>  [486,]  0.56572589 -0.481782394 #>  [487,]  1.24929277 -1.331086132 #>  [488,] -0.21483185  1.965038083 #>  [489,] -3.23724456 -3.791324470 #>  [490,] -1.08579468 -2.923352620 #>  [491,]  0.64929550 -2.769282310 #>  [492,]  0.46189956 -1.920374003 #>  [493,]  1.24929277  0.517379190 #>  [494,]  1.24929277 -1.507269427 #>  [495,] -2.55367767 -2.139128238 #>  [496,] -0.98572672 -2.042525946 #>  [497,]  0.46189956 -1.393861272 #>  [498,]  0.46189956 -1.074718571 #>  [499,] -3.23724456 -1.760237404 #>  [500,] -3.23724456 -0.395984432 #>  [501,]  0.64929550 -3.944145355 #>  [502,]  0.56572589 -0.433250162 #>  [503,]  0.56572589 -0.555052973 #>  [504,] -0.30215984  2.413861372 #>  [505,]  0.64929550  0.101453792 #>  [506,]  1.24929277 -1.477148366 #>  [507,] -0.21483185  3.814301694 #>  [508,]  1.24929277  4.446257756 #>  [509,]  1.24929277  2.960481053 #>  [510,] -0.13809771 -2.995198091 #>  [511,]  0.56572589  1.133435440 #>  [512,]  1.24929277  3.783458881 #>  [513,] -0.03427138  3.113204225 #>  [514,]  1.24929277 -1.951692762 #>  [515,]  0.64929550 -2.059999140 #>  [516,] -0.13809771 -1.373754323 #>  [517,]  1.24929277  0.085156751 #>  [518,] -3.23724456 -2.010169403 #>  [519,] -3.23724456 -4.533433226 #>  [520,] -1.95368040 -2.844776087 #>  [521,]  1.24929277 -1.178265247 #>  [522,] -0.90215711 -2.096460047 #>  [523,] -2.44985134 -3.662365635 #>  [524,] -2.55367767 -3.202036599 #>  [525,]  1.24929277 -0.588977376 #>  [526,] -1.68579195 -1.955886170 #>  [527,] -2.55367767 -0.935093434 #>  [528,]  1.24929277 -0.577627943 #>  [529,] -3.23724456  0.306711594 #>  [530,] -0.21483185  3.490246658 #>  [531,]  1.24929277  0.276766356 #>  [532,] -1.00222507 -1.362542514 #>  [533,] -2.63724729 -0.542248931 #>  [534,] -1.68955032 -2.059999140 #>  [535,]  1.24929277  3.570408619 #>  [536,] -0.21483185  1.255741928 #>  [537,]  1.24929277  5.188366512 #>  [538,] -1.00222507 -2.374984336 #>  [539,]  1.24929277  1.833597297 #>  [540,]  1.24929277  4.248714433 #>  [541,]  1.24929277  0.150713849 #>  [542,]  1.24929277  3.442699209 #>  [543,] -1.68955032 -1.317890384 #>  [544,]  0.64929550  2.044244178 #>  [545,] -2.55367767  1.491682486 #>  [546,]  1.24929277 -2.855572954 #>  [547,] -0.13809771 -4.533433226 #>  [548,]  1.24929277 -1.058050200 #>  [549,]  0.38516542  0.959577516 #>  [550,]  1.24929277 -4.533433226 #>  [551,] -0.30215984  1.616387855 #>  [552,] -1.16628719 -2.840322958 #>  [553,] -0.89839873 -1.947239633 #>  [554,]  1.24929277 -2.297603841 #>  [555,] -0.21483185 -1.124380778 #>  [556,] -0.03427138 -2.705150950 #>  [557,] -0.21483185 -1.093495612 #>  [558,] -0.21483185 -3.917376977 #>  [559,] -0.21483185 -4.533433226 #>  [560,] -0.89839873 -0.282576278 #>  [561,]  0.56572589 -2.968346642 #>  [562,] -0.30215984  0.560852204 #>  [563,]  1.24929277 -3.593781147 #>  [564,] -0.30215984 -1.245666219 #>  [565,] -3.23724456 -2.952922775 #>  [566,]  1.24929277  0.453576247 #>  [567,]  1.24929277 -1.203550593 #>  [568,] -0.30215984  0.866827707 #>  [569,] -3.23724456 -2.722713555 #>  [570,]  1.24929277 -1.132258064 #>  [571,] -0.30215984  0.560852204 #>  [572,]  1.24929277  3.045424560 #>  [573,] -0.21483185 -0.485430700 #>  [574,]  1.24929277  1.705803060 #>  [575,]  1.24929277  0.956064652 #>  [576,]  0.38516542  0.560852204 #>  [577,]  1.24929277  0.560852204 #>  [578,] -1.58572399 -3.480372992 #>  [579,] -0.13809771 -3.662365635 #>  [580,]  0.64929550  1.181080140 #>  [581,]  1.24929277  1.346499882 #>  [582,]  1.24929277 -2.877588688 #>  [583,]  1.24929277 -0.694518419 #>  [584,]  1.24929277  3.845620452 #>  [585,]  1.24929277  3.697168237 #>  [586,] -1.84985407 -1.239790963 #>  [587,]  1.24929277 -3.779975038 #>  [588,]  0.64929550 -0.825038453 #>  [589,] -0.03427138 -3.640349901 #>  [590,]  0.64929550 -2.705150950 #>  [591,] -0.03427138 -1.963042194 #>  [592,]  1.24929277  0.912087144 #>  [593,] -0.90215711 -2.813457328 #>  [594,]  0.56572589  1.339360780 #>  [595,]  1.24929277  4.595004206 #>  [596,] -3.23724456 -4.533433226 #>  [597,]  1.24929277  0.983089972 #>  [598,] -1.08579468 -2.726914804 #>  [599,] -0.21483185  0.394053981 #>  [600,]  1.24929277 -0.459766660 #>  [601,] -0.30215984  0.502200669 #>  [602,] -0.89839873 -3.480372992 #>  [603,] -0.21483185 -0.160513746 #>  [604,]  1.24929277  0.674981621 #>  [605,] -1.68579195 -3.779975038 #>  [606,]  1.24929277  4.556886395 #>  [607,] -1.00222507 -2.726914804 #>  [608,] -0.21483185  1.657511253 #>  [609,]  1.24929277 -0.385068247 #>  [610,] -1.68955032 -2.989383682 #>  [611,] -0.89839873 -1.352942175 #>  [612,]  1.24929277  2.326199159 #>  [613,]  0.38516542  2.154740115 #>  [614,]  1.24929277 -1.716222076 #>  [615,] -2.44985134 -3.190687166 #>  [616,]  0.64929550 -3.662365635 #>  [617,] -3.23724456 -3.706380963 #>  [618,] -1.68579195  0.008206951 #>  [619,] -1.68579195  0.008206951 #>  [620,]  0.64929550 -2.089094701 #>  [621,]  1.24929277  3.527642716 #>  [622,] -0.21483185 -4.533433226 #>  [623,]  0.64929550 -2.891085121 #>  [624,]  0.46189956  3.600301640 #>  [625,]  1.24929277  1.373268261 #>  [626,]  0.64929550  1.976857388 #>  [627,]  0.64929550 -0.359174760 #>  [628,] -0.40222780 -0.203650980 #>  [629,]  1.24929277  1.696864091 #>  [630,]  1.24929277  0.588491313 #>  [631,]  1.24929277  1.666540376 #>  [632,] -0.13809771  0.023004439 #>  [633,] -3.23724456 -3.706380963 #>  [634,] -2.37311720 -3.748656279 #>  [635,]  0.46189956  4.434908324 #>  [636,]  0.56572589 -3.748656279 #>  [637,] -0.21483185  0.191249191 #>  [638,] -1.00222507 -3.006547523 #>  [639,]  1.24929277  5.188366512 #>  [640,]  1.24929277  2.870575179 #>  [641,]  1.24929277 -1.470551578 #>  [642,] -3.23724456 -1.791715853 #>  [643,]  1.24929277  2.910337042 #>  [644,] -0.89839873  3.882081359 #>  [645,] -2.37311720 -3.090324714 #>  [646,]  0.64929550 -1.892308119 #>  [647,] -0.30215984  1.961306707 #>  [648,]  1.24929277  0.206756129 #>  [649,]  1.24929277  4.228280979 #>  [650,] -1.58572399 -4.533433226 #>  [651,]  1.24929277  3.527642716 #>  [652,] -1.95368040 -2.769282310 #>  [653,] -0.22166733 -3.917376977 #>  [654,] -1.68579195 -1.217775229 #>  [655,]  1.24929277 -0.645407609 #>  [656,]  1.24929277  0.304258582 #>  [657,] -0.89839873 -2.609305401 #>  [658,] -3.23724456 -0.862860640 #>  [659,] -0.13809771 -4.533433226 #>  [660,] -0.03427138 -2.239516704 #>  [661,]  0.46189956 -2.705150950 #>  [662,]  0.64929550  4.446257756 #>  [663,] -0.21483185  2.045271519 #>  [664,]  1.24929277  3.661480809 #>  [665,]  1.24929277  3.830201507 #>  [666,] -2.44985134 -2.977724897 #>  [667,] -3.23724456 -4.533433226 #>  [668,] -3.23724456 -3.593781147 #>  [669,]  1.24929277  2.132081652 #>  [670,]  0.64929550  0.757212011 #>  [671,] -0.21483185  4.471369231 #>  [672,] -0.89839873 -0.954862703 #>  [673,] -0.13809771  1.058123374 #>  [674,] -0.29840146 -0.562208997 #>  [675,]  0.56572589 -2.886891712 #>  [676,] -2.55367767 -3.816435945 #>  [677,] -3.23724456 -1.100165826 #>  [678,] -2.37311720 -2.587289667 #>  [679,]  0.64929550 -2.844776087 #>  [680,] -1.68955032 -2.920256879 #>  [681,]  1.24929277  5.188366512 #>  [682,] -2.44985134 -0.898632527 #>  [683,] -1.76628446 -2.102114765 #>  [684,]  0.64929550 -1.971233417 #>  [685,]  1.24929277  0.909495898 #>  [686,]  0.46189956 -1.239790963 #>  [687,]  0.56572589  3.113204225 #>  [688,]  0.38516542  1.155066591 #>  [689,] -0.13809771 -2.968346642 #>  [690,] -0.89839873 -3.480372992 #>  [691,] -2.63724729 -2.855572954 #>  [692,]  0.64929550  4.248714433 #>  [693,] -1.00222507  0.447065356 #>  [694,] -0.21483185  0.502200669 #>  [695,] -3.23724456 -3.640349901 #>  [696,]  1.24929277  1.630833028 #>  [697,] -1.58572399 -0.784485102 #>  [698,] -0.03427138 -1.076172042 #>  [699,]  0.38516542  0.657075802 #>  [700,] -0.21483185  3.632658183 #>  [701,]  0.64929550  0.156289590 #>  [702,]  0.38516542  5.926400834 #>  [703,]  1.24929277  1.528143393 #>  [704,]  0.46189956  0.635060068 #>  [705,]  0.64929550 -3.944145355 #>  [706,] -0.03427138 -3.593781147 #>  [707,] -1.08955305 -3.004493275 #>  [708,]  0.56572589  2.130883954 #>  [709,] -0.98572672  1.541596083 #>  [710,] -0.98572672 -1.747578654 #>  [711,]  1.24929277  0.871280836 #>  [712,]  1.24929277  1.023708875 #>  [713,] -1.68955032 -3.791324470 #>  [714,] -1.76628446 -4.533433226 #>  [715,] -2.37311720 -2.079539795 #>  [716,] -0.03427138 -3.480372992 #>  [717,] -0.21483185 -0.113855580 #>  [718,]  1.24929277  2.761590592 #>  [719,]  1.24929277 -1.986405065 #>  [720,]  1.24929277  1.064371030 #>  [721,] -0.29840146 -0.346707637 #>  [722,]  0.38516542 -3.944145355 #>  [723,]  0.56572589 -2.255488216 #>  [724,]  1.24929277  3.729260475 #>  [725,] -0.29840146  2.355195656 #>  [726,]  0.38516542  2.245140675 #>  [727,]  0.38516542 -3.046309386 #>  [728,] -0.13809771 -2.037264479 #>  [729,] -0.89839873 -2.110858554 #>  [730,]  0.64929550 -3.748656279 #>  [731,] -0.21483185 -1.163015251 #>  [732,] -0.21483185  0.475432291 #>  [733,] -0.89839873 -2.813457328 #>  [734,]  1.24929277  2.266177714 #>  [735,]  1.24929277  5.926400834 #>  [736,]  0.38516542  2.200320524 #>  [737,]  1.24929277 -3.748656279 #>  [738,]  1.24929277 -1.233199096 #>  [739,] -0.21483185 -2.908907447 #>  [740,]  1.24929277 -0.023111807 #>  [741,]  1.24929277  3.045424560 #>  [742,]  0.64929550 -3.328089105 #>  [743,] -0.03427138 -4.533433226 #>  [744,]  1.24929277  0.691180949 #>  [745,]  0.46189956 -2.278200809 #>  [746,] -2.37311720 -4.533433226 #>  [747,]  0.64929550  1.346499882 #>  [748,]  0.64929550 -3.917376977 #>  [749,] -0.89839873 -4.533433226 #>  [750,] -1.68955032 -4.533433226 #>  [751,] -2.37311720 -4.533433226 #>  [752,] -0.40222780 -2.908907447 #>  [753,]  0.64929550  0.372038247 #>  [754,] -2.44985134 -3.662365635 #>  [755,] -1.95368040 -4.533433226 #>  [756,] -0.03427138  1.434647093 #>  [757,]  1.24929277  1.333706061 #>  [758,] -1.68955032 -0.999224794 #>  [759,]  0.46189956 -0.264670459 #>  [760,] -0.29840146 -2.015824121 #>  [761,]  1.24929277  3.661480809 #>  [762,]  1.24929277  4.510060699 #>  [763,]  0.38516542 -1.046752986 #>  [764,] -1.58572399 -0.712438636 #>  [765,] -0.82166460 -1.080625170 #>  [766,] -1.84985407 -2.545174041 #>  [767,]  1.24929277  2.757167025 #>  [768,]  0.38516542 -1.552089578 #>  [769,]  0.56572589  5.926400834 #>  [770,]  1.24929277  0.978080386 #>  [771,]  1.24929277  3.531717151 #>  [772,] -0.13809771 -0.304592012 #>  [773,] -1.00222507 -0.224729566 #>  [774,]  1.24929277  1.918540804 #>  [775,]  0.56572589 -2.148857391 #>  [776,] -0.89839873 -2.102667331 #>  [777,] -1.58572399 -3.004493275 #>  [778,]  1.24929277  1.915813506 #>  [779,] -1.76628446 -3.598234276 #>  [780,] -1.00222507  1.415543576 #>  [781,]  0.64929550 -1.951692762 #>  [782,] -0.03427138  1.388775198 #>  [783,] -0.03427138 -0.324768523 #>  [784,]  0.64929550 -1.213658440 #>  [785,]  0.56572589 -1.107531172 #>  [786,] -2.55367767 -4.533433226 #>  [787,] -2.37311720 -1.022203083 #>  [788,]  0.64929550 -0.999224794 #>  [789,]  0.56572589 -1.517453894 #>  [790,]  1.24929277  3.655352126 #>  [791,] -0.90215711 -0.201404514 #>  [792,]  1.24929277  3.745258000 #>  [793,]  1.24929277  3.830201507 #>  [794,]  1.24929277  4.568235828 #>  [795,]  0.46189956  2.205675727 #>  [796,] -0.90215711 -2.291949123 #>  [797,]  0.56572589  1.192429573 #>  [798,]  1.24929277 -0.527798206 #>  [799,]  1.24929277  4.382351289 #>  [800,] -2.55367767 -1.561384763 #>  [801,]  0.64929550 -2.844776087 #>  [802,]  1.24929277  3.511283698 #>  [803,]  1.24929277 -0.245766606 #>  [804,]  0.46189956  3.619205493 #>  [805,] -0.03427138 -2.102667331 #>  [806,]  0.64929550  3.486172223 #>  [807,] -0.13809771 -1.802512720 #>  [808,]  0.56572589 -2.042525946 #>  [809,] -0.89839873 -3.779975038 #>  [810,]  0.64929550 -0.145863358 #>  [811,]  0.46189956 -1.993249151 #>  [812,]  1.24929277  0.553779010 #>  [813,] -0.03427138 -4.533433226 #>  [814,] -0.89839873 -3.598234276 #>  [815,]  1.24929277  3.531717151 #>  [816,]  1.24929277  5.926400834 #>  [817,]  0.64929550  1.153235816 #>  [818,] -0.03427138  0.278015781 #>  [819,]  1.24929277  5.926400834 #>  [820,]  1.24929277  2.679553413 #>  [821,]  0.64929550  3.856969885 #>  [822,]  1.24929277  5.310344584 #>  [823,] -0.21483185  3.648455823 #>  [824,] -0.21483185  2.714891709 #>  [825,]  0.64929550  0.410051507 #>  [826,]  0.64929550 -1.559569520 #>  [827,]  0.56572589  4.593347302 #>  [828,]  1.24929277  5.184292077 #>  [829,]  1.24929277  0.372038247 #>  [830,]  1.24929277  4.986748754 #>  [831,]  1.24929277  2.620114218 #>  [832,]  1.24929277  2.157652333 #>  [833,]  1.24929277  3.729260475 #>  [834,]  1.24929277  2.386514415 #>  [835,]  1.24929277  3.526393291 #>  [836,]  1.24929277  3.393197522 #>  [837,]  1.24929277  0.293439648 #>  [838,]  0.46189956  2.312920340 #>  [839,]  0.46189956  2.141110775 #>  [840,]  1.24929277  5.926400834 #>  [841,]  1.24929277  4.471369231 #>  [842,]  0.64929550 -3.944145355 #>  [843,]  1.24929277 -2.270835463 #>  [844,]  0.56572589  4.382351289 #>  [845,] -0.21483185 -3.640349901 #>  [846,]  1.24929277  3.003149244 #>  [847,] -1.68579195 -0.820585324 #>  [848,] -1.08579468 -1.335636512 #>  [849,] -0.21483185  2.746940204 #>  [850,] -0.40222780 -2.148976365 #>  [851,]  0.38516542  2.130883954 #>  [852,]  1.24929277 -1.213658440 #>  [853,]  1.24929277  2.571406726 #>  [854,]  0.64929550  0.674981621 #>  [855,] -1.08955305  0.517379190 #>  [856,]  1.24929277 -1.802512720 #>  [857,] -0.82166460 -0.295848223 #>  [858,]  0.46189956 -1.080625170 #>  [859,]  1.24929277  3.596227205 #>  [860,] -3.23724456 -3.706380963 #>  [861,]  1.24929277  2.132540858 #>  [862,]  1.24929277  1.079480624 #>  [863,]  1.24929277  2.564425962 #>  [864,]  1.24929277  1.305488595 #>  [865,]  0.56572589 -0.390722966 #>  [866,] -0.21483185 -0.113855580 #>  [867,] -0.13809771  1.563053363 #>  [868,]  0.64929550 -3.074327189 #>  [869,]  0.46189956 -0.114029452 #>  [870,]  0.46189956 -1.080625170 #>  [871,] -2.63724729 -1.107146589 #>  [872,]  0.56572589  2.523916354 #>  [873,] -1.08579468 -0.889329503 #>  [874,]  0.56572589  2.954352370 #>  [875,]  0.46189956  0.399517907 #>  [876,]  0.46189956 -0.353940282 #>  [877,]  0.38516542  0.612829308 #>  [878,] -0.22166733  0.606237442 #>  [879,]  0.46189956  0.409072812 #>  [880,]  0.46189956 -0.193963373 #>  [881,] -1.77311993  2.237355088 #>  [882,] -3.23724456 -2.763375711 #>  [883,] -2.55367767 -1.989132363 #>  [884,]  1.24929277  5.184292077 #>  [885,]  1.24929277  3.729260475 #>  [886,] -1.84985407 -1.393861272 #>  [887,] -0.21483185 -2.291949123 #>  [888,]  1.24929277 -0.527546325 #>  [889,]  1.24929277  2.991799811 #>  [890,]  0.64929550  2.083284779 #>  [891,]  1.24929277  3.506605676 #>  [892,] -0.03427138 -4.533433226 #>  [893,]  0.64929550 -1.791715853 #>  [894,] -3.23724456 -4.533433226 #>  [895,] -3.23724456 -2.251035087 #>  [896,] -3.23724456 -4.533433226 #>  [897,]  0.64929550 -0.811253480 #>  [898,]  0.64929550 -0.315388879 #>  [899,]  1.24929277  3.653695223 #>  [900,] -0.03427138 -3.090324714 #>  [901,] -0.21483185 -1.372097419 #>  [902,] -0.30215984 -0.108041171 #>  [903,]  1.24929277  2.270252149 #>  [904,] -0.03427138  1.919887941 #>  [905,] -0.89839873 -3.037866282 #>  [906,]  1.24929277  0.475432291 #>  [907,] -1.76628446  2.726122168 #>  [908,]  0.64929550 -0.781023125 #>  [909,]  0.64929550 -2.166798690 #>  [910,]  1.24929277  2.811450258 #>  [911,]  1.24929277  2.355195656 #>  [912,] -0.03427138 -1.470711268 #>  [913,]  1.24929277  3.139972603 #>  [914,]  0.46189956 -2.813297638 #>  [915,] -1.16628719 -2.855572954 #>  [916,]  1.24929277  3.195654198 #>  [917,]  0.64929550  1.192429573 #>  [918,]  1.24929277 -0.221449326 #>  [919,] -0.89839873 -3.132600030 #>  [920,] -0.89839873 -1.978598764 #>  [921,] -1.68579195 -4.533433226 #>  [922,]  0.56572589  2.044593310 #>  [923,] -0.89839873  1.415543576 #>  [924,] -1.95368040  0.544475985 #>  [925,] -0.98572672  2.044593310 #>  [926,] -3.23724456 -2.738264236 #>  [927,] -1.68579195 -1.447976608 #>  [928,] -0.30215984 -1.652090716 #>  [929,] -0.03427138 -0.305143408 #>  [930,]  1.24929277  3.661480809 #>  [931,]  1.24929277 -0.113855580 #>  [932,]  1.24929277  2.608420575 #>  [933,] -0.29840146  1.302484554 #>  [934,]  1.24929277 -0.010767331 #>  [935,]  0.38516542 -2.075423007 #>  [936,] -0.89839873  0.434421004 #>  [937,]  0.64929550  1.695077668 #>  [938,]  1.24929277  5.141623887 #>  [939,]  1.24929277 -1.426536250 #>  [940,]  0.64929550 -1.428435953 #>  [941,]  0.56572589 -0.820585324 #>  [942,]  0.38516542  0.591044740 #>  [943,]  1.24929277  1.441852749 #>  [944,] -0.89839873 -1.652090716 #>  [945,] -1.00222507 -2.110858554 #>  [946,]  0.46189956 -1.217775229 #>  [947,]  1.24929277  2.260455248 #>  [948,]  0.56572589  3.089939066 #>  [949,]  0.64929550 -1.335636512 #>  [950,]  1.24929277  5.337112962 #>  [951,]  1.24929277  0.321012849 #>  [952,]  1.24929277  1.528143393 #>  [953,]  1.24929277  4.446257756 #>  [954,] -0.13809771  0.273346427 #>  [955,] -2.63724729 -2.855572954 #>  [956,] -2.37311720 -2.726914804 #>  [957,] -3.23724456 -3.163918788 #>  [958,]  1.24929277  2.679553413 #>  [959,]  1.24929277 -0.847054187 #>  [960,] -1.68579195 -1.855847212 #>  [961,]  1.24929277  3.637111312 #>  [962,]  1.24929277  4.620115681 #>  [963,]  1.24929277  3.856969885 #>  [964,] -0.13809771 -0.597602191 #>  [965,]  0.56572589  2.132081652 #>  [966,]  1.24929277  5.184292077 #>  [967,] -2.37311720 -4.533433226 #>  [968,] -2.44985134 -2.329312104 #>  [969,]  0.56572589 -1.317890384 #>  [970,]  1.24929277  0.393802101 #>  [971,] -3.23724456 -4.533433226 #>  [972,]  0.38516542 -0.280254017 #>  [973,] -0.03427138 -3.010621958 #>  [974,]  1.24929277 -1.342532815 #>  [975,]  0.64929550 -0.939438835 #>  [976,]  0.46189956 -0.852063773 #>  [977,]  1.24929277  5.310344584 #>  [978,] -0.22166733 -2.255488216 #>  [979,] -3.23724456 -4.533433226 #>  [980,]  1.24929277 -0.550859565 #>  [981,]  1.24929277  2.117431265 #>  [982,]  1.24929277  2.874190409 #>  [983,] -0.03427138 -1.071070265 #>  [984,]  0.46189956 -1.244543607 #>  [985,]  0.64929550 -0.291395094 #>  [986,]  0.64929550 -0.582170484 #>  [987,]  1.24929277  2.117431265 #>  [988,]  0.64929550  0.492267716 #>  [989,]  1.24929277 -1.166915815 #>  [990,]  1.24929277  3.065212174 #>  [991,] -3.23724456 -4.533433226 #>  [992,]  0.56572589 -2.270835463 #>  [993,]  1.24929277 -0.962763887 #>  [994,]  0.46189956 -2.844776087 #>  [995,] -0.21483185  1.415543576 #>  [996,] -1.68955032 -3.779975038 #>  [997,] -0.89839873 -3.598234276 #>  [998,] -1.16628719  0.394053981 #>  [999,]  1.24929277  4.599078641 #> [1000,] -0.82166460 -3.640349901 #> [1001,] -1.08579468 -3.640349901 #> [1002,]  1.24929277  1.415543576 #> [1003,]  1.24929277  1.373268261 #> [1004,]  1.24929277  3.680463601 #> [1005,] -1.68579195 -1.337431039 #> [1006,] -3.23724456 -3.816435945 #> [1007,] -0.13809771  2.355195656 #> [1008,]  0.56572589  3.029917622 #> [1009,]  0.38516542 -1.116834197 #> [1010,] -0.21483185 -3.779975038 #> [1011,]  0.56572589 -0.220655131 #> [1012,]  0.46189956 -1.182339682 #> [1013,] -0.21483185  1.879352599 #> [1014,]  1.24929277  3.576537302 #> [1015,]  1.24929277  3.576537302 #> [1016,] -0.29840146 -1.230242351 #> [1017,]  1.24929277  5.337112962 #> [1018,]  1.24929277 -3.662365635 #> [1019,]  1.24929277  1.770270760 #> [1020,]  1.24929277  2.944483528 #> [1021,] -2.55367767 -2.855572954 #> [1022,]  0.46189956 -4.533433226 #> [1023,]  1.24929277  5.184292077 #> [1024,] -0.21483185 -0.417651034 #> [1025,] -0.21483185  2.523916354 #> [1026,]  0.46189956  0.899390574 #> [1027,] -3.23724456 -3.090324714 #> [1028,] -0.21483185  1.813321537 #> [1029,]  0.56572589  0.121806733 #> [1030,]  1.24929277  3.655352126 #> [1031,] -2.37311720 -2.025341389 #> [1032,]  1.24929277 -0.113855580 #> [1033,]  1.24929277  4.721056713 #> [1034,] -1.58572399 -2.982178026 #> [1035,]  1.24929277  3.729260475 #> [1036,]  1.24929277 -0.027564936 #> [1037,]  0.46189956 -1.920374003 #> [1038,]  0.64929550 -4.533433226 #> [1039,]  0.64929550  2.326373030 #> [1040,]  0.56572589  0.412105755 #> [1041,]  0.56572589  1.180332611 #> [1042,] -0.03427138 -1.228493748 #> [1043,]  1.24929277  1.278720217 #> [1044,]  1.24929277  3.225489768 #> [1045,] -1.08955305  0.674729740 #> [1046,]  0.64929550  1.222453382 #> [1047,]  0.64929550  2.975802286 #> [1048,]  1.24929277  4.620115681 #> [1049,] -0.21483185 -2.881236994 #> [1050,]  1.24929277  3.006939333 #> [1051,] -3.23724456 -2.059999140 #> [1052,] -2.37311720 -2.106308174 #> [1053,] -3.23724456 -2.160591407 #> [1054,]  0.46189956  3.576537302 #> [1055,] -0.29840146 -0.920648262 #> [1056,]  1.24929277  2.792812099 #> [1057,]  1.24929277  4.593347302 #> [1058,]  0.56572589  2.172302720 #> [1059,] -0.82166460 -3.640349901 #> [1060,]  0.64929550 -0.253572907 #> [1061,] -0.30215984  2.216696742 #> [1062,]  0.38516542  1.962556132 #> [1063,]  0.64929550 -0.522793681 #> [1064,]  0.38516542  3.685818804 #> [1065,]  0.56572589 -3.200379695 #> [1066,] -0.21483185 -2.891085121 #> [1067,]  1.24929277 -1.335636512 #> [1068,]  1.24929277 -0.432998282 #> [1069,]  1.24929277  4.620115681 #> [1070,] -3.23724456 -2.160591407 #> [1071,]  0.56572589  0.412105755 #> [1072,] -2.63724729 -1.920374003 #> [1073,]  1.24929277  5.184292077 #> [1074,]  0.56572589  0.502200669 #> [1075,]  1.24929277 -0.863413205 #> [1076,]  1.24929277  4.467294796 #> [1077,] -0.03427138 -3.779975038 #> [1078,]  0.64929550 -3.006547523 #> [1079,]  0.64929550  2.964271142 #> [1080,]  1.24929277  1.696864091 #> [1081,] -0.03427138 -0.244018002 #> [1082,]  1.24929277  2.220771178 #> [1083,] -0.13809771 -3.593781147 #> [1084,]  0.64929550 -2.182222558 #> [1085,] -0.03427138 -1.377828758 #> [1086,]  0.56572589  3.139972603 #> [1087,]  1.24929277  3.543640241 #> [1088,]  0.38516542  3.055029096 #> [1089,]  0.56572589 -1.006779215 #> [1090,]  1.24929277  1.441852749 #> [1091,]  1.24929277  3.628583748 #> [1092,]  1.24929277  0.757212011 #> [1093,] -0.29840146  0.514845021 #> [1094,]  0.64929550 -2.840322958 #> [1095,] -0.21483185 -1.372097419 #> [1096,]  1.24929277 -1.175659603 #> [1097,] -1.84985407 -1.855847212 #> [1098,]  0.38516542  2.245140675 #> [1099,] -0.21483185 -3.480372992 #> [1100,]  1.24929277  2.003582023 #> [1101,] -0.21483185  2.046250214 #> [1102,] -3.23724456 -3.791324470 #> [1103,] -2.44985134 -2.059999140 #> [1104,] -0.21483185  0.868071815 #> [1105,] -1.77311993 -3.791324470 #> [1106,] -1.68955032 -2.247274926 #> [1107,] -0.89839873 -2.059999140 #> [1108,]  0.46189956  2.237355088 #> [1109,] -3.23724456 -4.533433226 #> [1110,]  1.24929277  3.661480809 #> [1111,] -1.68579195 -1.833831478 #> [1112,] -1.68579195 -4.533433226 #> [1113,]  1.24929277 -0.282576278 #> [1114,] -0.89839873 -1.984505363 #> [1115,]  1.24929277  0.398170770 #> [1116,]  1.24929277  5.926400834 #> [1117,]  1.24929277  4.620115681 #> [1118,]  1.24929277  1.233091728 #> [1119,]  0.38516542 -0.424807058 #> [1120,]  0.56572589  2.355195656 #> [1121,]  1.24929277  0.898398346 #> [1122,]  1.24929277  3.882081359 #> [1123,]  1.24929277  3.442699209 #> [1124,]  0.38516542  3.793063418 #> [1125,] -0.40222780  5.209403552 #> [1126,]  0.38516542  1.157752720 #> [1127,] -0.22166733  0.561722935 #> [1128,]  0.64929550 -0.391434052 #> [1129,]  0.38516542  2.632758570 #> [1130,]  1.24929277 -0.532953746 #> [1131,] -0.22166733  1.327687852 #> [1132,] -3.23724456 -1.546192061 #> [1133,]  0.64929550 -0.628487357 #> [1134,] -3.23724456 -3.795398905 #> [1135,] -0.89839873 -1.802512720 #> [1136,]  1.24929277  5.926400834 #> [1137,] -3.23724456 -1.195827852 #> [1138,] -0.22166733  3.266025110 #> [1139,]  1.24929277  3.531717151 #> [1140,]  1.24929277  5.926400834 #> [1141,] -0.82166460 -4.533433226 #> [1142,]  1.24929277  0.846056081 #> [1143,]  0.56572589  1.209826569 #> [1144,] -0.03427138 -3.090324714 #> [1145,] -1.68955032 -3.779975038 #> [1146,] -1.68955032 -3.779975038 #> [1147,] -0.03427138 -1.849255346 #> [1148,] -0.98572672 -2.363634903 #> [1149,] -2.44985134 -0.741895512 #> [1150,] -3.23724456 -2.017723824 #> [1151,] -0.21483185  1.196630821 #> [1152,]  0.64929550  1.104592098 #> [1153,]  1.24929277  3.628583748 #> [1154,] -0.03427138 -1.849255346 #> [1155,] -1.68955032 -3.779975038 #> [1156,] -0.03427138 -3.090324714 #> [1157,] -3.23724456 -2.017723824 #> [1158,] -0.21483185  1.196630821 #> [1159,] -0.82166460 -1.782253138 #> [1160,] -0.13809771  1.104592098 #> [1161,] -0.21483185 -1.372097419 #> [1162,] -1.68955032 -3.779975038 #> [1163,]  0.56572589  2.769174942 #> [1164,]  1.24929277  2.985902294 #> [1165,] -0.13809771  0.588491313 #> [1166,]  0.56572589  1.372416180 #> [1167,]  1.24929277 -0.920648262 #> [1168,]  0.64929550 -1.942137856 #> [1169,]  0.64929550 -0.113855580 #> [1170,]  1.24929277  2.086912369 #> [1171,] -0.21483185  1.307237198 #> [1172,]  0.38516542  0.434421004 #> [1173,]  0.64929550  1.537521648 #> [1174,] -1.68579195 -1.798612156 #> [1175,]  1.24929277  3.684916730 #> [1176,]  0.38516542  1.891423293 #> [1177,]  1.24929277 -2.851672390 #> [1178,] -0.21483185 -0.160513746 #> [1179,] -0.22166733  2.865747305 #> [1180,] -0.82166460  1.660403184 #> [1181,] -0.82166460  1.660403184 #> [1182,] -3.23724456 -3.598234276 #> [1183,]  0.56572589 -4.533433226 #> [1184,]  0.38516542  1.329252932 #> [1185,] -0.21483185  1.265121573 #>  #> $scores$rot.scores #> NULL #>  #>  #> $loadings #> Loading Method: Revised #>  #>       1     2     #> wmt2  0.608 0.145 #> wmt1  0.402 0.106 #> wmt3  0.344 0.204 #> wmt5  0.318 0.234 #> wmt4  0.298 0.231 #> wmt9        0.523 #> wmt7        0.461 #> wmt15       0.441 #> wmt14       0.433 #> wmt6  0.177 0.429 #> wmt16       0.392 #> wmt8        0.391 #> wmt10  0.21 0.368 #> wmt12       0.334 #> wmt18       0.326 #> wmt13       0.304 #> wmt17 0.122 0.299 #> wmt11       0.277 #> Standardized loadings >= |0.10| are displayed. To change this 'minimum', use `print(net.loads_object, minimum = 0.10)`"},{"path":"https://r-ega.net/reference/network.compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares Network Structures Using Permutation — network.compare","title":"Compares Network Structures Using Permutation — network.compare","text":"permutation implementation determine statistical significance whether network structures different one another","code":""},{"path":"https://r-ega.net/reference/network.compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares Network Structures Using Permutation — network.compare","text":"","code":"network.compare(   base,   comparison,   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   iter = 1000,   ncores,   verbose = TRUE,   seed = NULL,   ... )"},{"path":"https://r-ega.net/reference/network.compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares Network Structures Using Permutation — network.compare","text":"base Matrix data frame. consist variables used analysis. First dataset comparison Matrix data frame. consist variables used analysis. Second dataset corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details iter Numeric (length = 1). Number permutations perform. Defaults 1000 (recommended) ncores Numeric (length = 1). Number cores use computing results. Defaults ceiling(parallel::detectCores() / 2) half computer's processing power. Set 1 use parallel computing verbose Boolean (length = 1). progress displayed? Defaults TRUE. Set FALSE display progress seed Numeric (length = 1). Defaults NULL random results. Set reproducible results. See Reproducibility PRNG details random number generation EGAnet ... Additional arguments can passed auto.correlate, network.estimation, community.detection, community.consensus, EGA, jsd","code":""},{"path":"https://r-ega.net/reference/network.compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares Network Structures Using Permutation — network.compare","text":"Returns list: network Data frame row names measure, empirical value (statistic), p-value based permutation test (p.value) edges List containing matrices values empirical values (statistic), p-values (p.value), Benjamini-Hochberg corrected p-values (p.adjusted)","code":""},{"path":"https://r-ega.net/reference/network.compare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compares Network Structures Using Permutation — network.compare","text":"Frobenius Norm  Ulitzsch, E., Khanna, S., Rhemtulla, M., & Domingue, B. W. (2023). graph theory based similarity metric enables comparison subpopulation psychometric networks. Psychological Methods. Jensen-Shannon Similarity (1 - Distance)  De Domenico, M., Nicosia, V., Arenas, ., & Latora, V. (2015). Structural reducibility multilayer networks. Nature Communications, 6(1), 1–9. Total Network Strength  van Borkulo, C. D., van Bork, R., Boschloo, L., Kossakowski, J. J., Tio, P., Schoevers, R. ., Borsboom, D., & Waldorp, L. J. (2023). Comparing network structures three aspects: permutation test. Psychological Methods, 28(6), 1273–1285.","code":""},{"path":"https://r-ega.net/reference/network.compare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compares Network Structures Using Permutation — network.compare","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/network.compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares Network Structures Using Permutation — network.compare","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Set groups (if necessary) groups <- rep(1:2, each = nrow(wmt) / 2)  # Groups group1 <- wmt[groups == 1,] group2 <- wmt[groups == 2,]  if (FALSE) # Perform comparison results <- network.compare(group1, group2)  # Print results print(results) #> Error: object 'results' not found  # Plot edge differences plot(results) # \\dontrun{} #> Error: object 'results' not found"},{"path":"https://r-ega.net/reference/network.estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Network Estimation Method — network.estimation","title":"Apply a Network Estimation Method — network.estimation","text":"General function apply network estimation methods EGAnet","code":""},{"path":"https://r-ega.net/reference/network.estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Network Estimation Method — network.estimation","text":"","code":"network.estimation(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   network.only = TRUE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/network.estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Network Estimation Method — network.estimation","text":"data Matrix data frame. consist variables used analysis n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details network.Boolean (length = 1). Whether network output. Defaults TRUE. Set FALSE obtain output network estimation method verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate different network estimation methods (see model model specific details)","code":""},{"path":"https://r-ega.net/reference/network.estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Network Estimation Method — network.estimation","text":"Returns matrix populated network input data","code":""},{"path":"https://r-ega.net/reference/network.estimation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply a Network Estimation Method — network.estimation","text":"Graphical Least Absolute Shrinkage Selection Operator (GLASSO)  Friedman, J., Hastie, T., & Tibshirani, R. (2008). Sparse inverse covariance estimation graphical lasso. Biostatistics, 9(3), 432–441. GLASSO Extended Bayesian Information Criterion (EBICglasso)  Epskamp, S., & Fried, E. . (2018). tutorial regularized partial correlation networks. Psychological Methods, 23(4), 617–634. Bayesian Gaussian Graphical Model (BGGM)  Williams, D. R. (2021). Bayesian estimation Gaussian graphical models: Structure learning, predictability, network comparisons. Multivariate Behavioral Research, 56(2), 336–352. Triangulated Maximally Filtered Graph (TMFG)  Massara, G. P., Di Matteo, T., & Aste, T. (2016). Network filtering big data: Triangulated maximally filtered graph. Journal Complex Networks, 5, 161-178.","code":""},{"path":"https://r-ega.net/reference/network.estimation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a Network Estimation Method — network.estimation","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/network.estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Network Estimation Method — network.estimation","text":"","code":"# Load data wmt <- wmt2[,7:24]  # EBICglasso (default for EGA functions) glasso_network <- network.estimation(   data = wmt, model = \"glasso\" )  # TMFG tmfg_network <- network.estimation(   data = wmt, model = \"TMFG\" )"},{"path":"https://r-ega.net/reference/network.generalizability.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Generalizability of Network — network.generalizability","title":"Estimate the Generalizability of Network — network.generalizability","text":"General function compute network's predictive power new data, following Haslbeck Waldorp (2018) Williams Rodriguez (2022) using generalizability methods data splitting, k-folds cross-validation, leave-one-cross-validation Uses network.predictability basis perform generalizability methods ","code":""},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Generalizability of Network — network.generalizability","text":"","code":"network.generalizability(   data,   method = c(\"split\", \"cv\", \"loocv\"),   number,   corr = c(\"auto\", \"cor_auto\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"BGGM\", \"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   seed = NULL,   ... )"},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Generalizability of Network — network.generalizability","text":"data Matrix data frame. consist variables used analysis. Can raw data correlation matrix method Character (length = 1). Generalizability method. Available options: \"split\" — Performs train/test data split data using number adjust size training split \"cv\" — (default) Performs k-folds cross-validation using number adjust number folds (e.g., 5 = 80/20 splits; 10 = 90/10 splits) \"loocv\" — Performs leave-one-cross-validation. Leave-one-tendency overestimate generalizability model recommended (k-folds cross-validation preferred) number Numeric (length = 1). Parameter adjust method argument. Ranges 0-1 method = \"split\" 1-N method = \"cv\". Defaults 0.80 5, respectively corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" seed Numeric (length = 1). Defaults NULL random results. Set reproducible results. See Reproducibility PRNG details random number generation EGAnet ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, community.unidimensional","code":""},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Generalizability of Network — network.generalizability","text":"Returns list containing: node Node-wise metrics output network.predictability community Community-wise metrics output tefi","code":""},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the Generalizability of Network — network.generalizability","text":"implementation network predictability proceeds several steps important assumptions: 1. Network estimated using (partial) correlations (regression like mgm package!) 2. Original data used estimate network 1. necessary apply original scaling new data 3. (Linear) regression-like coefficients obtained reserve engineering inverse covariance matrix using network's partial correlations (.e., setting diagonal network -1 computing inverse opposite signed partial correlation matrix; see EGAnet:::pcor2inv) 4. Predicted values obtained matrix multiplying new data coefficients 5. Dichotomous polytomous data given categorical values based original data's thresholds thresholds used convert continuous predicted values corresponding categorical values 6. Evaluation metrics: dichotomous — Accuracy percent correctly predicted 0s 1s polytomous — Accuracy based correctly predicting ordinal category exactly (.e., 1 = 1, 2, = 2, etc.) weighted accuracy absolute distance predicted value actual value (e.g., |prediction - actual| = 1) used power 0.5. weighted approach provides overall distance terms accuracy predicted value away actual value given harsher penalty (absolute difference = accuracy value): 0 = 1.000, 1 = 0.500, 2 = 0.2500, 3 = 0.1250, 4 = 0.0625, etc. continuous — R-sqaured root mean square error","code":""},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate the Generalizability of Network — network.generalizability","text":"Original Implementation Node Predictability  Haslbeck, J. M., & Waldorp, L. J. (2018). well network models predict observations? importance predictability network models. Behavior Research Methods, 50(2), 853–861. Derivation Regression Coefficients Used (Formula 3)  Williams, D. R., & Rodriguez, J. E. (2022). overfitting (usually) problem partial correlation networks. Psychological Methods, 27(5), 822–840.","code":""},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the Generalizability of Network — network.generalizability","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/network.generalizability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Generalizability of Network — network.generalizability","text":"","code":"# Data splitting network.generalizability(   data = wmt2[,7:24], method = \"split\",   number = 0.80 # 80/20 training/testing ) #> Error in network.generalizability(data = wmt2[, 7:24], method = \"split\",     number = 0.8): could not find function \"network.generalizability\"  # k-folds cross-validation network.generalizability(   data = wmt2[,7:24], method = \"cv\",   number = 5 # 5-fold cross-validation ) #> Error in network.generalizability(data = wmt2[, 7:24], method = \"cv\",     number = 5): could not find function \"network.generalizability\"  if (FALSE) { # \\dontrun{ # Leave-one-out cross-validation network.generalizability(   data = wmt2[,7:24], method = \"loocv\" )} # }"},{"path":"https://r-ega.net/reference/network.predictability.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict New Data based on Network — network.predictability","title":"Predict New Data based on Network — network.predictability","text":"General function compute network's predictive power new data, following Haslbeck Waldorp (2018) Williams Rodriguez (2022) implementation different predictability mgm package (Haslbeck), based (regularized) regression. implementation uses network directly, converting partial correlations implied precision (inverse covariance) matrix. See Details information","code":""},{"path":"https://r-ega.net/reference/network.predictability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict New Data based on Network — network.predictability","text":"","code":"network.predictability(network, original.data, newdata, ordinal.categories = 7)"},{"path":"https://r-ega.net/reference/network.predictability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict New Data based on Network — network.predictability","text":"network Matrix data frame. partial correlation network original.data Matrix data frame. Must consist variables used estimate network. See Examples newdata Matrix data frame. Must consist variables order original.data. See Examples ordinal.categories Numeric (length = 1). number categories variable considered continuous. Defaults 7 categories 8 considered continuous","code":""},{"path":"https://r-ega.net/reference/network.predictability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict New Data based on Network — network.predictability","text":"Returns list containing: predictions Predicted values newdata based network betas Beta coefficients derived network results Performance metrics variable newdata","code":""},{"path":"https://r-ega.net/reference/network.predictability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict New Data based on Network — network.predictability","text":"implementation network predictability proceeds several steps important assumptions: 1. Network estimated using (partial) correlations (regression like mgm package!) 2. Original data used estimate network 1. necessary apply original scaling new data 3. (Linear) regression-like coefficients obtained reserve engineering inverse covariance matrix using network's partial correlations (.e., setting diagonal network -1 computing inverse opposite signed partial correlation matrix; see EGAnet:::pcor2inv) 4. Predicted values obtained matrix multiplying new data coefficients 5. Dichotomous polytomous data given categorical values based original data's thresholds thresholds used convert continuous predicted values corresponding categorical values 6. Evaluation metrics: dichotomous — \"Accuracy\" percent correctly predicted 0s 1s \"Kappa\" Cohen's Kappa (see cite) polytomous — \"Linear Kappa\" linearly weighted Kappa \"Krippendorff's alpha\" (see cite) continuous — R-squared (\"R2\") root mean square error (\"RMSE\")","code":""},{"path":"https://r-ega.net/reference/network.predictability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict New Data based on Network — network.predictability","text":"Original Implementation Node Predictability  Haslbeck, J. M., & Waldorp, L. J. (2018). well network models predict observations? importance predictability network models. Behavior Research Methods, 50(2), 853–861. Derivation Regression Coefficients Used (Formula 3)  Williams, D. R., & Rodriguez, J. E. (2022). overfitting (usually) problem partial correlation networks. Psychological Methods, 27(5), 822–840. Cohen's Kappa  Cohen, J. (1960). coefficient agreement nominal scales. Educational Psychological Measurement, 20(1), 37-46. Cohen, J. (1968). Weighted kappa: nominal scale agreement provision scaled disagreement partial credit. Psychological Bulletin, 70(4), 213-220. Krippendorff's alpha  Krippendorff, K. (2013). Content analysis: introduction methodology (3rd ed.). Thousand Oaks, CA: Sage.","code":""},{"path":"https://r-ega.net/reference/network.predictability.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict New Data based on Network — network.predictability","text":"Hudson Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/network.predictability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict New Data based on Network — network.predictability","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Set seed (to reproduce results) set.seed(42)  # Split data training <- sample(   1:nrow(wmt), round(nrow(wmt) * 0.80) # 80/20 split )  # Set splits wmt_train <- wmt[training,] wmt_test <- wmt[-training,]  # EBICglasso (default for EGA functions) glasso_network <- network.estimation(   data = wmt_train, model = \"glasso\" )  # Check predictability network.predictability(   network = glasso_network, original.data = wmt_train,   newdata = wmt_test ) #>          R2   MAE #> wmt1  0.315 0.253 #> wmt2  0.548 0.135 #> wmt3  0.476 0.198 #> wmt4  0.318 0.300 #> wmt5  0.400 0.249 #> wmt6  0.403 0.262 #> wmt7  0.362 0.291 #> wmt8  0.278 0.321 #> wmt9  0.552 0.232 #> wmt10 0.340 0.278 #> wmt11 0.220 0.270 #> wmt12 0.193 0.287 #> wmt13 0.425 0.270 #> wmt14 0.252 0.325 #> wmt15 0.166 0.291 #> wmt16 0.260 0.287 #> wmt17 0.194 0.203 #> wmt18 0.372 0.236"},{"path":"https://r-ega.net/reference/optimism.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimism Data — optimism","title":"Optimism Data — optimism","text":"response matrix (n = 282) containing responses 10 items Revised Life Orientation Test (LOT-R), developed Scheier, Carver, & Bridges (1994).","code":""},{"path":"https://r-ega.net/reference/optimism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimism Data — optimism","text":"","code":"data(optimism)"},{"path":"https://r-ega.net/reference/optimism.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Optimism Data — optimism","text":"282x10 response matrix","code":""},{"path":"https://r-ega.net/reference/optimism.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimism Data — optimism","text":"Scheier, M. F., Carver, C. S., & Bridges, M. W. (1994). Distinguishing optimism neuroticism (trait anxiety, self-mastery, self-esteem): reevaluation Life Orientation Test. Journal Personality Social Psychology, 67, 1063-1078.","code":""},{"path":"https://r-ega.net/reference/optimism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimism Data — optimism","text":"","code":"data(\"optimism\")"},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes Polychoric Correlations — polychoric.matrix","title":"Computes Polychoric Correlations — polychoric.matrix","text":"fast implementation polychoric correlations C. Uses Beasley-Springer-Moro algorithm (Boro & Springer, 1977; Moro, 1995) estimate inverse univariate normal CDF, Drezner-Wesolosky approximation (Drezner & Wesolosky, 1990) estimate bivariate normal CDF, Brent's method (Brent, 2013) optimization rho","code":""},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes Polychoric Correlations — polychoric.matrix","text":"","code":"polychoric.matrix(   data,   na.data = c(\"pairwise\", \"listwise\"),   empty.method = c(\"none\", \"zero\", \"all\"),   empty.value = c(\"none\", \"point_five\", \"one_over\"),   ... )"},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes Polychoric Correlations — polychoric.matrix","text":"data Matrix data frame. dataset ordinal values (rows = cases, columns = variables). Data required 0 11. Proper adjustments made prior analysis (e.g., scales -3 3 increments 1 shifted added 4 values) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset empty.method Character (length = 1). Method empty cell correction. Available options: \"none\" — Adds value (empty.value = \"none\") empirical joint frequency table two variables \"zero\" — Adds empty.value cells zero joint frequency table two variables \"\" — Adds empty.value joint frequency table two variables empty.value Character (length = 1). Value add joint frequency table cells. Accepts numeric values 0 1 specific methods: \"none\" — Adds value (0) empirical joint frequency table two variables \"point_five\" — Adds 0.5 cells defined empty.method \"one_over\" — Adds 1 / n n equals number cells based empty.method. empty.method = \"zero\", n equals number zero cells ... used made available easier argument passing","code":""},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes Polychoric Correlations — polychoric.matrix","text":"Returns polychoric correlation matrix","code":""},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computes Polychoric Correlations — polychoric.matrix","text":"Beasley-Moro-Springer algorithm  Beasley, J. D., & Springer, S. G. (1977). Algorithm 111: percentage points normal distribution. Journal Royal Statistical Society. Series C (Applied Statistics), 26(1), 118-121. Moro, B. (1995). full monte. Risk 8 (February), 57-58. Brent optimization  Brent, R. P. (2013). Algorithms minimization without derivatives. Mineola, NY: Dover Publications, Inc. Drezner-Wesolowsky bivariate normal approximation  Drezner, Z., & Wesolowsky, G. O. (1990). computation bivariate normal integral. Journal Statistical Computation Simulation, 35(1-2), 101-107.","code":""},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes Polychoric Correlations — polychoric.matrix","text":"Alexander P. Christensen <alexpaulchristensen@gmail.com> assistance GPT-4","code":""},{"path":"https://r-ega.net/reference/polychoric.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes Polychoric Correlations — polychoric.matrix","text":"","code":"# Load data (ensure matrix for missing data example) wmt <- as.matrix(wmt2[,7:24])  # Compute polychoric correlation matrix correlations <- polychoric.matrix(wmt)  # Randomly assign missing data wmt[sample(1:length(wmt), 1000)] <- NA  # Compute polychoric correlation matrix # with pairwise missing pairwise_correlations <- polychoric.matrix(   wmt, na.data = \"pairwise\" )  # Compute polychoric correlation matrix # with listwise missing pairwise_correlations <- polychoric.matrix(   wmt, na.data = \"listwise\" )"},{"path":"https://r-ega.net/reference/prime.num.html","id":null,"dir":"Reference","previous_headings":"","what":"Prime Numbers through 100,000 — prime.num","title":"Prime Numbers through 100,000 — prime.num","text":"Numeric vector primes generated primes package. Used function [EGAnet]{ergoInfo}. general use","code":""},{"path":"https://r-ega.net/reference/prime.num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prime Numbers through 100,000 — prime.num","text":"","code":"data(prime.num)"},{"path":"https://r-ega.net/reference/prime.num.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prime Numbers through 100,000 — prime.num","text":"1185x24 response matrix","code":""},{"path":"https://r-ega.net/reference/prime.num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prime Numbers through 100,000 — prime.num","text":"","code":"data(\"prime.num\")"},{"path":"https://r-ega.net/reference/riEGA.html","id":null,"dir":"Reference","previous_headings":"","what":"Random-Intercept EGA — riEGA","title":"Random-Intercept EGA — riEGA","text":"Estimates number substantive dimensions controlling wording effects. EGA applied residual correlation matrix subtracting random intercept factor equal unstandardized loadings regular unrecoded reversed items database","code":""},{"path":"https://r-ega.net/reference/riEGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random-Intercept EGA — riEGA","text":"","code":"riEGA(   data,   n = NULL,   corr = c(\"auto\", \"cor_auto\", \"cosine\", \"pearson\", \"spearman\"),   na.data = c(\"pairwise\", \"listwise\"),   model = c(\"glasso\", \"TMFG\"),   algorithm = c(\"leiden\", \"louvain\", \"walktrap\"),   uni.method = c(\"expand\", \"LE\", \"louvain\"),   plot.EGA = TRUE,   verbose = FALSE,   ... )"},{"path":"https://r-ega.net/reference/riEGA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random-Intercept EGA — riEGA","text":"data Matrix data frame. consist variables used analysis. Must raw data correlation matrix n Numeric (length = 1). Sample size data provided correlation matrix corr Character (length = 1). Method compute correlations. Defaults \"auto\". Available options: \"auto\" — Automatically computes appropriate correlations data using Pearson's continuous, polychoric ordinal, tetrachoric binary, polyserial/biserial ordinal/binary continuous. change number categories considered ordinal, use ordinal.categories (see polychoric.matrix details) \"cor_auto\" — Uses cor_auto compute correlations. Arguments can passed along function \"cosine\" — Uses cosine compute cosine similarity \"pearson\" — Pearson's correlation computed variables regardless categories \"spearman\" — Spearman's rank-order correlation computed variables regardless categories similarity measures, compute first input data sample size (n) na.data Character (length = 1). missing data handled? Defaults \"pairwise\". Available options: \"pairwise\" — Computes correlation available cases two variables \"listwise\" — Computes correlation complete cases dataset model Character (length = 1). Defaults \"glasso\". Available options: \"BGGM\" — Computes Bayesian Gaussian Graphical Model. Set argument ordinal.categories determine levels allowed variable considered ordinal. See ?BGGM::estimate details \"glasso\" — Computes GLASSO EBIC model selection. See EBICglasso.qgraph details \"TMFG\" — Computes TMFG method. See TMFG details algorithm Character igraph cluster_* function (length = 1). Defaults \"walktrap\". Three options listed available (see community.detection options): \"leiden\" — See cluster_leiden details \"louvain\" — default, \"louvain\" implement Louvain algorithm using consensus clustering method (see community.consensus information). function implement consensus.method = \"most_common\" consensus.iter = 1000 unless specified otherwise \"walktrap\" — See cluster_walktrap details uni.method Character (length = 1). unidimensionality method used? Defaults \"louvain\". Available options: \"expand\" — Expands correlation matrix four variables correlated 0.50. number dimension returns 2 less check, data unidimensional; otherwise, regular EGA matrix expansion used. method used Golino et al.'s (2020) Psychological Methods simulation \"LE\" — Applies Leading Eigenvector algorithm (cluster_leading_eigen) empirical correlation matrix. number dimensions 1, Leading Eigenvector solution used; otherwise, regular EGA used. method used Christensen et al.'s (2023) Behavior Research Methods simulation \"louvain\" — Applies Louvain algorithm (cluster_louvain) empirical correlation matrix. number dimensions 1, Louvain solution used; otherwise, regular EGA used. method validated Christensen's (2022) PsyArXiv simulation. Consensus clustering can used specifying either \"consensus.method\" \"consensus.iter\" plot.EGA Boolean (length = 1). TRUE, returns plot network estimated dimensions. Defaults TRUE verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults FALSE (silent calls). Set TRUE see messages warnings every function call ... Additional arguments passed auto.correlate, network.estimation, community.detection, community.consensus, EGA","code":""},{"path":"https://r-ega.net/reference/riEGA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random-Intercept EGA — riEGA","text":"Returns list containing: EGA Results EGA RI list containing information random-intercept model (model converged): fit — fit object random-intercept model using cfa lavaan.args — arguments used cfa loadings — Standardized loadings random-intercept model correlation — Residual correlations accounting random-intercept model TEFI link[EGAnet]{tefi} estimated structure plot.EGA Plot output plot.EGA = TRUE","code":""},{"path":"https://r-ega.net/reference/riEGA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random-Intercept EGA — riEGA","text":"Selection CFA Estimator  Rhemtulla, M., Brosseau-Liard, P. E., & Savalei, V. (2012). can categorical variables treated continuous? comparison robust continuous categorical SEM estimation methods suboptimal conditions. Psychological Methods, 17, 354-373.","code":""},{"path":[]},{"path":"https://r-ega.net/reference/riEGA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random-Intercept EGA — riEGA","text":"Alejandro Garcia-Pardina <alejandrogp97@gmail.com>, Francisco J. Abad <fjose.abad@uam.es>, Alexander P. Christensen <alexpaulchristensen@gmail.com>, Hudson Golino <hfg9s virginia.edu>, Luis Eduardo Garrido <luisgarrido@pucmm.edu.>, Robert Moulder <rgm4fd@virginia.edu>","code":""},{"path":"https://r-ega.net/reference/riEGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random-Intercept EGA — riEGA","text":"","code":"# Obtain example data wmt <- wmt2[,7:24]  # riEGA example riEGA(data = wmt, plot.EGA = FALSE) #> Warning: Some variables did not belong to a dimension: wmt16  #>  #> Use caution: These variables have been removed from the TEFI calculation #> The random-intercept model converged. Wording effects likely. Results are only valid if data are unrecoded. #> Model: GLASSO (EBIC with gamma = 0) #> Correlations: auto #> Lambda: 0.0529902216958668 (n = 100, ratio = 0.1) #>  #> Number of nodes: 18 #> Number of edges: 62 #> Edge density: 0.405 #>  #> Non-zero edge weights:  #>       M    SD    Min   Max #>  -0.015 0.057 -0.163 0.171 #>  #> ---- #>  #> Algorithm:  Walktrap #>  #> Number of communities:  4 #>  #>  wmt1  wmt2  wmt3  wmt4  wmt5  wmt6  wmt7  wmt8  wmt9 wmt10 wmt11 wmt12 wmt13  #>     1     2     2     1     2     3     3     3     4     4     4     2     1  #> wmt14 wmt15 wmt16 wmt17 wmt18  #>     4     2    NA     1     2  #>  #> ---- #>  #> Unidimensional Method: Louvain #> Unidimensional: No #>  #> ---- #>  #> TEFI: -9.771 #>  #> ---- #>  #> Random-Intercept Estimator:  ML  #> Random-Intercept Loading:  0.601 0.644 0.625 0.629 0.628 0.669 0.644 0.626 0.644 0.656 0.589 0.597 0.594 0.620 0.618 0.613 0.590 0.557 # no plot for CRAN checks"},{"path":"https://r-ega.net/reference/sim.dynEGA.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.dynEGA Data — sim.dynEGA","title":"sim.dynEGA Data — sim.dynEGA","text":"simulated (multivariate time series) data 24 variables, 100 individual observations, 50 time points per individual 2 groups individuals","code":""},{"path":"https://r-ega.net/reference/sim.dynEGA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.dynEGA Data — sim.dynEGA","text":"","code":"data(sim.dynEGA)"},{"path":"https://r-ega.net/reference/sim.dynEGA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"sim.dynEGA Data — sim.dynEGA","text":"5000 x 26 multivariate time series","code":""},{"path":"https://r-ega.net/reference/sim.dynEGA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sim.dynEGA Data — sim.dynEGA","text":"Data generated using simDFM function following arguments: Group 1 simDFM(  variab = 12, timep = 50,  nfact = 2, error = 0.125,  dfm = \"DAFS\",  loadings = EGAnet:::runif_xoshiro(    1, min = 0.50, max = 0.70  ), autoreg = 0.80, crossreg = 0.00,  var.shock = 0.36, cov.shock = 0.18 ) Group 2 simDFM(  variab = 8, timep = 50,  nfact = 3, error = 0.125,  dfm = \"DAFS\",  loadings = EGAnet:::runif_xoshiro(    1, min = 0.50, max = 0.70  ), autoreg = 0.80, crossreg = 0.00,  var.shock = 0.36, cov.shock = 0.18 )","code":""},{"path":"https://r-ega.net/reference/sim.dynEGA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sim.dynEGA Data — sim.dynEGA","text":"","code":"data(\"sim.dynEGA\")"},{"path":"https://r-ega.net/reference/simDFM.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data following a Dynamic Factor Model — simDFM","title":"Simulate data following a Dynamic Factor Model — simDFM","text":"Function simulate data following dynamic factor model (DFM). Two DFMs currently available: direct autoregressive factor score model (Engle & Watson, 1981; Nesselroade, McArdle, Aggen, Meyers, 2002) dynamic factor model random walk factor scores.","code":""},{"path":"https://r-ega.net/reference/simDFM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data following a Dynamic Factor Model — simDFM","text":"","code":"simDFM(   variab,   timep,   nfact,   error,   dfm = c(\"DAFS\", \"RandomWalk\"),   loadings,   autoreg,   crossreg,   var.shock,   cov.shock,   burnin = 1000 )"},{"path":"https://r-ega.net/reference/simDFM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data following a Dynamic Factor Model — simDFM","text":"variab Number variables per factor. timep Number time points. nfact Number factors. error Value used construct diagonal matrix Q. matrix p x p covariance matrix Q generate random errors following multivariate normal distribution mean zeros. value provided squared constructing Q. dfm string indicating dynamical factor model use. Current options : DAFS — Simulates data using direct autoregressive factor score model. default method RandomWalk — Simulates data using dynamic factor model random walk factor scores loadings Magnitude loadings. autoreg Magnitude autoregression coefficients. crossreg Magnitude cross-regression coefficients. var.shock Magnitude random shock variance. cov.shock Magnitude random shock covariance burnin Number n first samples discard computing factor scores. Defaults 1000.","code":""},{"path":"https://r-ega.net/reference/simDFM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate data following a Dynamic Factor Model — simDFM","text":"Engle, R., & Watson, M. (1981). one-factor multivariate time series model metropolitan wage rates. Journal American Statistical Association, 76(376), 774-781. Nesselroade, J. R., McArdle, J. J., Aggen, S. H., & Meyers, J. M. (2002). Dynamic factor analysis models representing process multivariate time-series. D. S. Moskowitz & S. L. Hershberger (Eds.), Multivariate applications book series. Modeling intraindividual variability repeated measures data: Methods applications, 235-265.","code":""},{"path":"https://r-ega.net/reference/simDFM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate data following a Dynamic Factor Model — simDFM","text":"Hudson F. Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/simDFM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data following a Dynamic Factor Model — simDFM","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate EGA network data1 <- simDFM(variab = 5, timep = 50, nfact = 3, error = 0.05, dfm = \"DAFS\", loadings = 0.7, autoreg = 0.8, crossreg = 0.1, var.shock = 0.36, cov.shock = 0.18, burnin = 1000)} # }"},{"path":"https://r-ega.net/reference/simEGM.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data following a Exploratory Graph Model (EGM) — simEGM","title":"Simulate data following a Exploratory Graph Model (EGM) — simEGM","text":"Function simulate data based EGM","code":""},{"path":"https://r-ega.net/reference/simEGM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data following a Exploratory Graph Model (EGM) — simEGM","text":"","code":"simEGM(   communities,   variables,   loadings,   cross.loadings = 0.01,   correlations,   sample.size,   p.in = 0.95,   p.out = 0.8,   max.iterations = 1000 )"},{"path":"https://r-ega.net/reference/simEGM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data following a Exploratory Graph Model (EGM) — simEGM","text":"communities Numeric (length = 1). Number communities generate variables Numeric vector (length = 1 communities). Number variables per community loadings Numeric (length = 1). Magnitude assigned network loadings. Uses magnitude factors loadings Uses runif(n, min = value - 0.025, max = value + 0.025) jitter loadings cross.loadings Numeric (length = 1). Standard deviation normal distribution mean zero (n, mean = 0, sd = value). Defaults 0.01 correlations Numeric (length = 1). Magnitude community correlations Uses runif(n, min = value - 0.015, max = value + 0.015) jitter correlations sample.size Numeric (length = 1). Number observations generate p.Numeric (length = 1). Sets probability retaining edge within communities. Single values applied communities. Defaults 0.95 p.Numeric (length = 1 communities). Sets probability retaining edge communities. Single values applied communities. Defaults 0.80 max.iterations Numeric (length = 1). Number iterations attempt get convergence erroring . Defaults 1000","code":""},{"path":"https://r-ega.net/reference/simEGM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate data following a Exploratory Graph Model (EGM) — simEGM","text":"Hudson F. Golino <hfg9s virginia.edu> Alexander P. Christensen <alexpaulchristensen@gmail.com>","code":""},{"path":"https://r-ega.net/reference/simEGM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data following a Exploratory Graph Model (EGM) — simEGM","text":"","code":"simulated <- simEGM(   communities = 2, variables = 6,   loadings = 0.55, # use standard factor loading sizes   correlations = 0.30,   sample.size = 1000 )"},{"path":"https://r-ega.net/reference/tefi.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"Computes fit (TEFI) dimensionality structure using Von Neumman's entropy input correlation matrix. Lower values suggest better fit structure data.","code":""},{"path":"https://r-ega.net/reference/tefi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"","code":"tefi(data, structure = NULL, verbose = TRUE)"},{"path":"https://r-ega.net/reference/tefi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"data Matrix, data frame, *EGA class object. Matrix data frame can raw data correlation matrix. *EGA objects accepted. hierEGA input produced Generalized TEFI (see genTEFI) structure Numeric character vector (length = ncol(data)). Can theoretical factors structure detected EGA verbose Boolean (length = 1). Whether messages (insignificant) warnings output. Defaults TRUE see messages warnings every function call. Set FALSE ignore messages warnings","code":""},{"path":"https://r-ega.net/reference/tefi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"Returns data frame columns: Non-hierarchical Structure VN.Entropy.Fit Total Entropy Fit Index using Von Neumman's entropy Total.Correlation total correlation dataset Average.Entropy average entropy dataset Hierarchical Structure VN.Entropy.Fit Generalized Total Entropy Fit Index using Von Neumman's entropy Lower.Order.VN Lower order () Total Entropy Fit Index Higher.Order.VN Higher order () Total Entropy Fit Index","code":""},{"path":"https://r-ega.net/reference/tefi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"Initial formalization simulation  Golino, H., Moulder, R. G., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (2020). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research.","code":""},{"path":"https://r-ega.net/reference/tefi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"Hudson Golino <hfg9s virginia.edu>, Alexander P. Christensen <alexpaulchristensen@gmail.com>, Robert Moulder <rgm4fd@virginia.edu>","code":""},{"path":"https://r-ega.net/reference/tefi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — tefi","text":"","code":"# Load data wmt <- wmt2[,7:24]  # Estimate EGA model ega.wmt <- EGA(   data = wmt, model = \"glasso\",   plot.EGA = FALSE # no plot for CRAN checks )  # Compute entropy indices for empirical EGA tefi(ega.wmt) #>   VN.Entropy.Fit Total.Correlation Average.Entropy #> 1      -11.17104         -2.695968       -14.98371  # User-defined structure (with `EGA` object) tefi(ega.wmt, structure = c(rep(1, 5), rep(2, 5), rep(3, 8))) #>   VN.Entropy.Fit Total.Correlation Average.Entropy #> 1      -10.35118         -5.597834       -20.04691"},{"path":"https://r-ega.net/reference/totalCor.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Correlation — totalCor","title":"Total Correlation — totalCor","text":"Computes total correlation dataset","code":""},{"path":"https://r-ega.net/reference/totalCor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Correlation — totalCor","text":"","code":"totalCor(data, base = 2.718282)"},{"path":"https://r-ega.net/reference/totalCor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Correlation — totalCor","text":"data Matrix data frame. consist variables used analysis base Numeric (length = 1). Base use entropy. Defaults exp(1) 2.718282","code":""},{"path":"https://r-ega.net/reference/totalCor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Correlation — totalCor","text":"Returns list containing: Ind.Entropies Individual entropies variable Joint.Entropy joint entropy dataset Total.Cor total correlation dataset Normalized Total correlation divided sum individual entropies minus maximum individual entropies","code":""},{"path":"https://r-ega.net/reference/totalCor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Total Correlation — totalCor","text":"Formalization total correlation  Watanabe, S. (1960). Information theoretical analysis multivariate correlation. IBM Journal Research Development 4, 66-82. Applied implementation  Felix, L. M., Mansur-Alves, M., Teles, M., Jamison, L., & Golino, H. (2021). Longitudinal impact effects booster sessions cognitive training program healthy older adults. Archives Gerontology Geriatrics, 94, 104337.","code":""},{"path":"https://r-ega.net/reference/totalCor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Correlation — totalCor","text":"Hudson F. Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/totalCor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Correlation — totalCor","text":"","code":"# Compute total correlation totalCor(wmt2[,7:24]) #> $Ind.Entropies #>  [1] 0.6248171 0.4848127 0.5703028 0.6852211 0.6248171 0.6540949 0.6795459 #>  [8] 0.6889107 0.6852211 0.6686914 0.6323408 0.6261037 0.6811749 0.6879248 #> [15] 0.6329467 0.6410914 0.5107526 0.5738498 #>  #> $Joint.Entropy #> [1] 6.818678 #>  #> $Total.Cor #> [1] 4.533942 #>  #> $Normalized #> [1] 0.4251749 #>"},{"path":"https://r-ega.net/reference/totalCorMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Correlation Matrix — totalCorMat","title":"Total Correlation Matrix — totalCorMat","text":"Computes pairwise total correlation (totalCor) dataset","code":""},{"path":"https://r-ega.net/reference/totalCorMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Correlation Matrix — totalCorMat","text":"","code":"totalCorMat(data, base = 2.718282, normalized = FALSE)"},{"path":"https://r-ega.net/reference/totalCorMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Correlation Matrix — totalCorMat","text":"data Matrix data frame. consist variables used analysis base Numeric (length = 1). Base use entropy. Defaults exp(1) 2.718282 normalized Boolean (length = 1). normalized total correlation computed? Defaults FALSE","code":""},{"path":"https://r-ega.net/reference/totalCorMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Correlation Matrix — totalCorMat","text":"Returns symmetric matrix pairwise total correlations","code":""},{"path":"https://r-ega.net/reference/totalCorMat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Total Correlation Matrix — totalCorMat","text":"Formalization total correlation  Watanabe, S. (1960). Information theoretical analysis multivariate correlation. IBM Journal Research Development 4, 66-82. Applied implementation  Felix, L. M., Mansur-Alves, M., Teles, M., Jamison, L., & Golino, H. (2021). Longitudinal impact effects booster sessions cognitive training program healthy older adults. Archives Gerontology Geriatrics, 94, 104337.","code":""},{"path":"https://r-ega.net/reference/totalCorMat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Correlation Matrix — totalCorMat","text":"Hudson F. Golino <hfg9s virginia.edu>","code":""},{"path":"https://r-ega.net/reference/totalCorMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Correlation Matrix — totalCorMat","text":"","code":"# Compute total correlation matrix totalCorMat(wmt2[,7:24]) #>              wmt1        wmt2        wmt3       wmt4        wmt5       wmt6 #> wmt1  0.624817135 0.047707622 0.031851357 0.05047906 0.038912876 0.02972736 #> wmt2  0.047707622 0.484812687 0.075134922 0.03545451 0.053387926 0.04501964 #> wmt3  0.031851357 0.075134922 0.570302768 0.03684021 0.030844984 0.05393775 #> wmt4  0.050479056 0.035454508 0.036840206 0.68522110 0.040401885 0.04769004 #> wmt5  0.038912876 0.053387926 0.030844984 0.04040188 0.624817135 0.03747466 #> wmt6  0.029727363 0.045019645 0.053937754 0.04769004 0.037474658 0.65409488 #> wmt7  0.018817442 0.029109614 0.031734590 0.04296057 0.035828402 0.06546754 #> wmt8  0.016015282 0.025457015 0.026680096 0.03632646 0.026785600 0.05034574 #> wmt9  0.015755493 0.035454508 0.021743467 0.03659122 0.028779250 0.05951256 #> wmt10 0.036839455 0.045252660 0.043476772 0.05202427 0.037855172 0.06639651 #> wmt11 0.016672725 0.012758941 0.021942523 0.01719187 0.018997777 0.02489353 #> wmt12 0.011339647 0.009305900 0.019035116 0.01789458 0.026327558 0.02752613 #> wmt13 0.008365243 0.017484400 0.020651167 0.01750122 0.024209852 0.03194460 #> wmt14 0.018206592 0.026512727 0.012268426 0.02243460 0.023569287 0.03624395 #> wmt15 0.013348508 0.013717579 0.018510643 0.02956033 0.018423900 0.04058197 #> wmt16 0.021619348 0.015649354 0.020337606 0.02157181 0.021619348 0.03120022 #> wmt17 0.015005149 0.008064207 0.008553547 0.01909624 0.022852337 0.02807133 #> wmt18 0.004274810 0.004855020 0.001817617 0.01113157 0.007512335 0.01385638 #>             wmt7       wmt8        wmt9       wmt10      wmt11       wmt12 #> wmt1  0.01881744 0.01601528 0.015755493 0.036839455 0.01667273 0.011339647 #> wmt2  0.02910961 0.02545701 0.035454508 0.045252660 0.01275894 0.009305900 #> wmt3  0.03173459 0.02668010 0.021743467 0.043476772 0.02194252 0.019035116 #> wmt4  0.04296057 0.03632646 0.036591224 0.052024273 0.01719187 0.017894583 #> wmt5  0.03582840 0.02678560 0.028779250 0.037855172 0.01899778 0.026327558 #> wmt6  0.06546754 0.05034574 0.059512564 0.066396511 0.02489353 0.027526133 #> wmt7  0.67954586 0.05694442 0.033315265 0.049013313 0.03305801 0.025908620 #> wmt8  0.05694442 0.68891070 0.051964796 0.035451439 0.02584155 0.033892819 #> wmt9  0.03331527 0.05196480 0.685221102 0.073502056 0.01719187 0.037215847 #> wmt10 0.04901331 0.03545144 0.073502056 0.668691389 0.02847137 0.018095584 #> wmt11 0.03305801 0.02584155 0.017191870 0.028471372 0.63234084 0.019820523 #> wmt12 0.02590862 0.03389282 0.037215847 0.018095584 0.01982052 0.626103747 #> wmt13 0.03115351 0.01955784 0.040855003 0.035841845 0.01160149 0.013038084 #> wmt14 0.04728538 0.02904453 0.062187854 0.044377004 0.01140559 0.025762229 #> wmt15 0.03967816 0.02710403 0.037405611 0.027862100 0.02217670 0.039538504 #> wmt16 0.02704778 0.02801873 0.039894214 0.037555858 0.02216847 0.016789058 #> wmt17 0.02347805 0.01639631 0.017400707 0.009663726 0.01253966 0.022280639 #> wmt18 0.01193312 0.01842671 0.009976015 0.013898093 0.01420743 0.008166184 #>             wmt13      wmt14      wmt15      wmt16       wmt17       wmt18 #> wmt1  0.008365243 0.01820659 0.01334851 0.02161935 0.015005149 0.004274810 #> wmt2  0.017484400 0.02651273 0.01371758 0.01564935 0.008064207 0.004855020 #> wmt3  0.020651167 0.01226843 0.01851064 0.02033761 0.008553547 0.001817617 #> wmt4  0.017501218 0.02243460 0.02956033 0.02157181 0.019096236 0.011131570 #> wmt5  0.024209852 0.02356929 0.01842390 0.02161935 0.022852337 0.007512335 #> wmt6  0.031944599 0.03624395 0.04058197 0.03120022 0.028071327 0.013856382 #> wmt7  0.031153512 0.04728538 0.03967816 0.02704778 0.023478053 0.011933123 #> wmt8  0.019557841 0.02904453 0.02710403 0.02801873 0.016396306 0.018426712 #> wmt9  0.040855003 0.06218785 0.03740561 0.03989421 0.017400707 0.009976015 #> wmt10 0.035841845 0.04437700 0.02786210 0.03755586 0.009663726 0.013898093 #> wmt11 0.011601492 0.01140559 0.02217670 0.02216847 0.012539662 0.014207432 #> wmt12 0.013038084 0.02576223 0.03953850 0.01678906 0.022280639 0.008166184 #> wmt13 0.681174912 0.03438768 0.02578299 0.03519994 0.006879487 0.006039564 #> wmt14 0.034387683 0.68792484 0.04246529 0.03071158 0.019807222 0.019624270 #> wmt15 0.025782992 0.04246529 0.63294669 0.03133728 0.017552374 0.018307311 #> wmt16 0.035199944 0.03071158 0.03133728 0.64109140 0.016615388 0.019862741 #> wmt17 0.006879487 0.01980722 0.01755237 0.01661539 0.510752627 0.021840887 #> wmt18 0.006039564 0.01962427 0.01830731 0.01986274 0.021840887 0.573849789"},{"path":"https://r-ega.net/reference/vn.entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"Computes fit dimensionality structure using Von Neumman's entropy input correlation matrix. Lower values suggest better fit structure data","code":""},{"path":"https://r-ega.net/reference/vn.entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"","code":"vn.entropy(data, structure)"},{"path":"https://r-ega.net/reference/vn.entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"data Matrix data frame. Contains variables used analysis structure Numeric character vector (length = ncol(data)). vector representing structure (numbers labels item). Can theoretical factors structure detected EGA","code":""},{"path":"https://r-ega.net/reference/vn.entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"Returns list containing: VN.Entropy.Fit Entropy Fit Index using Von Neumman's entropy Total.Correlation total correlation dataset Average.Entropy average entropy dataset","code":""},{"path":"https://r-ega.net/reference/vn.entropy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"Initial formalization simulation  Golino, H., Moulder, R. G., Shi, D., Christensen, . P., Garrido, L. E., Nieto, M. D., Nesselroade, J., Sadana, R., Thiyagarajan, J. ., & Boker, S. M. (2020). Entropy fit indices: New fit measures assessing structure dimensionality multiple latent variables. Multivariate Behavioral Research.","code":""},{"path":"https://r-ega.net/reference/vn.entropy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"Hudson Golino <hfg9s virginia.edu>, Alexander P. Christensen <alexpaulchristensen@gmail.com>, Robert Moulder <rgm4fd@virginia.edu>","code":""},{"path":"https://r-ega.net/reference/vn.entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Entropy Fit Index using Von Neumman's entropy (Quantum Information Theory) for correlation matrices — vn.entropy","text":"","code":"# Get EGA result ega.wmt <- EGA(   data = wmt2[,7:24], model = \"glasso\",   plot.EGA = FALSE # no plot for CRAN checks )  # Compute Von Neumman entropy vn.entropy(ega.wmt$correlation, ega.wmt$wc) #>   VN.Entropy.Fit Total.Correlation Average.Entropy #> 1      -2.556997                 0        -1.65189"},{"path":"https://r-ega.net/reference/wmt2.html","id":null,"dir":"Reference","previous_headings":"","what":"WMT-2 Data — wmt2","title":"WMT-2 Data — wmt2","text":"response matrix (n = 1185) Wiener Matrizen-Test 2 (WMT-2).","code":""},{"path":"https://r-ega.net/reference/wmt2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WMT-2 Data — wmt2","text":"","code":"data(wmt2)"},{"path":"https://r-ega.net/reference/wmt2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"WMT-2 Data — wmt2","text":"1185x24 response matrix","code":""},{"path":"https://r-ega.net/reference/wmt2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WMT-2 Data — wmt2","text":"","code":"data(\"wmt2\")"},{"path":"https://r-ega.net/reference/wto.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Topological Overlap — wto","title":"Weighted Topological Overlap — wto","text":"Computes weighted topological overlap following Novick et al. (2009) definition","code":""},{"path":"https://r-ega.net/reference/wto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Topological Overlap — wto","text":"","code":"wto(network, signed = TRUE, diagonal.zero = TRUE)"},{"path":"https://r-ega.net/reference/wto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Topological Overlap — wto","text":"network Symmetric matrix data frame. symmetric network signed Boolean (length = 1). Whether signed version used. Defaults TRUE. Use FALSE absolute values diagonal.zero Boolean (length = 1). Whether diagonal overlap matrix set zero. Defaults TRUE. Use FALSE allow overlap node ","code":""},{"path":"https://r-ega.net/reference/wto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Topological Overlap — wto","text":"symmetric matrix weighted topological overlap values pair variables","code":""},{"path":"https://r-ega.net/reference/wto.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weighted Topological Overlap — wto","text":"Original formalization  Nowick, K., Gernat, T., Almaas, E., & Stubbs, L. (2009). Differences human chimpanzee gene expression patterns define evolving network transcription factors brain. Proceedings National Academy Sciences, 106, 22358-22363.","code":""},{"path":"https://r-ega.net/reference/wto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Topological Overlap — wto","text":"","code":"# Obtain network network <- network.estimation(wmt2[,7:24], model = \"glasso\")  # Compute wTO wto(network) #>             wmt1        wmt2         wmt3       wmt4       wmt5       wmt6 #> wmt1  0.00000000 0.158996348  0.071511158 0.15119928 0.10877728 0.02766897 #> wmt2  0.15899635 0.000000000  0.249853405 0.07033602 0.15342659 0.07083681 #> wmt3  0.07151116 0.249853405  0.000000000 0.05993642 0.05691270 0.11194247 #> wmt4  0.15119928 0.070336025  0.059936423 0.00000000 0.07723982 0.07315080 #> wmt5  0.10877728 0.153426589  0.056912698 0.07723982 0.00000000 0.03680376 #> wmt6  0.02766897 0.070836811  0.111942474 0.07315080 0.03680376 0.00000000 #> wmt7  0.01977026 0.024638429  0.033841686 0.07089473 0.05097548 0.11350837 #> wmt8  0.01683998 0.029278270  0.033987630 0.05847340 0.03023955 0.09083428 #> wmt9  0.01876395 0.046732356  0.031677425 0.03431002 0.02372040 0.08016626 #> wmt10 0.06831609 0.077254636  0.070844500 0.09131439 0.04414526 0.09921954 #> wmt11 0.03303740 0.033490286  0.063056261 0.02710980 0.03430137 0.03774474 #> wmt12 0.01099310 0.028015065  0.027473828 0.02358084 0.07222493 0.03887384 #> wmt13 0.01352953 0.029422926  0.030241860 0.01878796 0.05121875 0.05386765 #> wmt14 0.01252534 0.043765516  0.017556059 0.01844815 0.02162208 0.04129679 #> wmt15 0.01340255 0.009960543  0.019912425 0.04873187 0.02154708 0.07527225 #> wmt16 0.04840764 0.024752508  0.024062316 0.02354460 0.02788301 0.04067441 #> wmt17 0.04072801 0.028333115  0.015543593 0.04025410 0.09131655 0.08774400 #> wmt18 0.01180173 0.002166914 -0.001072818 0.01095198 0.01788894 0.02610292 #>             wmt7       wmt8       wmt9      wmt10      wmt11      wmt12 #> wmt1  0.01977026 0.01683998 0.01876395 0.06831609 0.03303740 0.01099310 #> wmt2  0.02463843 0.02927827 0.04673236 0.07725464 0.03349029 0.02801506 #> wmt3  0.03384169 0.03398763 0.03167743 0.07084450 0.06305626 0.02747383 #> wmt4  0.07089473 0.05847340 0.03431002 0.09131439 0.02710980 0.02358084 #> wmt5  0.05097548 0.03023955 0.02372040 0.04414526 0.03430137 0.07222493 #> wmt6  0.11350837 0.09083428 0.08016626 0.09921954 0.03774474 0.03887384 #> wmt7  0.00000000 0.12613787 0.04386844 0.05726153 0.09426053 0.03654448 #> wmt8  0.12613787 0.00000000 0.09868954 0.03974923 0.06223273 0.08531122 #> wmt9  0.04386844 0.09868954 0.00000000 0.13353610 0.02331130 0.08921505 #> wmt10 0.05726153 0.03974923 0.13353610 0.00000000 0.06086957 0.02011850 #> wmt11 0.09426053 0.06223273 0.02331130 0.06086957 0.00000000 0.05235147 #> wmt12 0.03654448 0.08531122 0.08921505 0.02011850 0.05235147 0.00000000 #> wmt13 0.05924149 0.02348156 0.09885328 0.07613496 0.01871945 0.01985393 #> wmt14 0.08860972 0.03440631 0.13764603 0.07136262 0.02298747 0.04603490 #> wmt15 0.07868762 0.04000211 0.05982440 0.03175485 0.05190774 0.12523060 #> wmt16 0.02867420 0.04269825 0.08189031 0.07409570 0.05966700 0.02595372 #> wmt17 0.05867616 0.03366339 0.02139233 0.02149472 0.02338581 0.07734735 #> wmt18 0.03313102 0.05852820 0.02536375 0.01566573 0.05869409 0.03147499 #>            wmt13      wmt14       wmt15      wmt16      wmt17        wmt18 #> wmt1  0.01352953 0.01252534 0.013402549 0.04840764 0.04072801  0.011801733 #> wmt2  0.02942293 0.04376552 0.009960543 0.02475251 0.02833312  0.002166914 #> wmt3  0.03024186 0.01755606 0.019912425 0.02406232 0.01554359 -0.001072818 #> wmt4  0.01878796 0.01844815 0.048731872 0.02354460 0.04025410  0.010951977 #> wmt5  0.05121875 0.02162208 0.021547079 0.02788301 0.09131655  0.017888938 #> wmt6  0.05386765 0.04129679 0.075272254 0.04067441 0.08774400  0.026102922 #> wmt7  0.05924149 0.08860972 0.078687618 0.02867420 0.05867616  0.033131017 #> wmt8  0.02348156 0.03440631 0.040002112 0.04269825 0.03366339  0.058528201 #> wmt9  0.09885328 0.13764603 0.059824403 0.08189031 0.02139233  0.025363745 #> wmt10 0.07613496 0.07136262 0.031754849 0.07409570 0.02149472  0.015665728 #> wmt11 0.01871945 0.02298747 0.051907744 0.05966700 0.02338581  0.058694094 #> wmt12 0.01985393 0.04603490 0.125230603 0.02595372 0.07734735  0.031474990 #> wmt13 0.00000000 0.08723589 0.056571145 0.11499622 0.01590718  0.016898157 #> wmt14 0.08723589 0.00000000 0.100329703 0.05660288 0.04089269  0.069471875 #> wmt15 0.05657115 0.10032970 0.000000000 0.07047977 0.03731380  0.065480204 #> wmt16 0.11499622 0.05660288 0.070479766 0.00000000 0.03418579  0.086936141 #> wmt17 0.01590718 0.04089269 0.037313800 0.03418579 0.00000000  0.131731714 #> wmt18 0.01689816 0.06947188 0.065480204 0.08693614 0.13173171  0.000000000"},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-210","dir":"Changelog","previous_headings":"","what":"Changes in version 2.1.0","title":"Changes in version 2.1.0","text":"ADD: EGM simEGM model estimation simulation Exploratory Graph Model, respectively ADD: EGM.compare compare EGM EFA likely data generating mechanism INTERNAL: fit function calculate traditional, log-likelihood, TEFI fit indices","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-208","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.8","title":"Changes in version 2.0.8","text":"CRAN release: 2024-09-28 FIX: issue dynamic memory allocation polychoric_matrix.c CRAN’s install package ADD: cosine similarity added default auto.correlate ‘corr’ arguments","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-207","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.7","title":"Changes in version 2.0.7","text":"CRAN release: 2024-09-02 FIX: mixed data missing data network.predictability ADD: frobenius norm compare networks ADD: network.compare function test differences network structures using three different metrics (Frobenius Norm, Jensen-Shannon Similarity, total network strength) ADD: general function called information compute several information theory measures UPDATE: default ‘loading.method’ net.loads changed “revised” moving forward – previous default versions <= 2.0.6 can obtained using “original” UPDATE: invariance handles 2 groups (plots 4 groups pairwise) UPDATE: added ‘signed’ argument jsd allow signed absolute networks used computations (includes downstream functions: infoCluster) UPDATE: NEWS now formatted markdown UPDATE: network.predictability uses R-squared mean absolute error (MAE) node predictions INTERNAL: network.generalizabilty moved internal (needs work yet) INTERNAL: signs net.loads uses first eigenvector target network (rather custom obtain_signs function)","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-206","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.6","title":"Changes in version 2.0.6","text":"CRAN release: 2024-04-22 FIX: bug using na.data = \"listwise\" standard cor() function FIX: update revised network loadings signs: net.loads(..., loading.method = \"experimental\") FIX: bug argument ‘returnAllResults’ EBICglasso.qgraph FIX: bug passing additional non-dimensionStability arguments bootEGA FIX: bug printing hierEGA summary bootEGA UPDATE: colors itemStability plots match colors hierEGA plot UPDATE: network.predictability uses empirical inverse variances (rather network-implied) UPDATE: R-squared continuous_accuracy helper uses Pearson’s correlation squared","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-205","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.5","title":"Changes in version 2.0.5","text":"CRAN release: 2024-03-15 FIX: ‘stroke’ parameter hierEGA broke {ggplot2} update ADD: network.predictability predict new data based network ADD: network.generalizability estimate network generalizability new data (leverages network.predictability) UPDATE: new loadings (net.loads(..., loading.method = \"experimental\")) added resolve issues original loadings (e.g., signs, cross-loadings, standardization) UPDATE: plot.bootEGA output itemStability plot default UPDATE: dimensionStability output now included bootEGA output $stability UPDATE: ‘rotate’ argument added infoCluster plot allow different angle dendrogram DEPENDENCY: {fungible} now ‘IMPORTS’ ‘SUGGESTS’ dependency new loadings DEPRECATED: typicalStructure plot.typicalStructure deprecated FALSE","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-204","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.4","title":"Changes in version 2.0.4","text":"CRAN release: 2024-01-22 FIX: plotting infoCluster grey lines involved () FIX: pass multiple passes resolution_parameter causing error {igraph} 2.0.0 EGA.fit (see issue #148) ADD: community.compare perform permutation test determine statistical significance cluster similarity UPDATE: moved reindex_memberships helpers UPDATE: reindex_memberships used community.homogenize","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-203","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.3","title":"Changes in version 2.0.3","text":"CRAN release: 2023-11-17 FIX: freed edge.* arguments compare.EGA.plots allow full customization UPDATE: optimizations speed memory ergoInfo boot.ergoInfo DEPENDENCY: swapped {ggdendro} {dendextend}","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-202","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.2","title":"Changes in version 2.0.2","text":"CRAN release: 2023-10-25 FIX: ties max gain TMFG FIX: continuous variables categories treated ordinal polychoric.matrix FIX: character input structure now accepted ADD: website pointing different data check errors added error output (hopefully, makes errors understandable) UPDATE: corr = \"cor_auto\" now performs qgraph::cor_auto favor legacy; previous behavior starting 2.0.0 t+ deprecate \"cor_auto\" favor \"auto\"; default remains corr = \"auto\" UPDATE: compare.EGA.plots outputs $$individual plots UPDATE: structure supplied invariance, configural check skipped (structure assumed invariant) UPDATE: added data generation model = \"BGGM\" uni.method = \"expand\" community.unidimensional DEPENDENCY: {BGGM} removed dependency chain CRAN can resolved","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-201","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.1","title":"Changes in version 2.0.1","text":"CRAN release: 2023-08-23 updated polychoric C code avoid --bounds access errors","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-200","dir":"Changelog","previous_headings":"","what":"Changes in version 2.0.0","title":"Changes in version 2.0.0","text":"CRAN release: 2023-08-16 MAJOR REFACTOR: update version 2.0.0 includes many major changes designed improve speed, reliability, reproducibility {EGAnet}. goal changes eliminate common errors streamline code package prevent future error cases. several function additions provided facilitate modular use {EGAnet} package INTERNALS: function-specific internal functions S3methods now located respective .R files rather elsewhere (e.g., “utils-EGAnet.R”) SWAP: internal script usage “utils-EGAnet.R” depracated “helper.R” functions used across package (visible changes user) NOTE: default objective function Leiden algorithm set “modularity” NOTE: default Louvain unidimensional method set single-shot unless argument “consensus.method” “consensus.iter” specified ADD: stricter *apply functions roughly equivalent *apply stricter inputs/outputs (uses vapply foundation; often, slightly faster) ADD: community.consensus apply Consensus Clustering approach introduced Lancichnetti & Fortunato (2012). Currently available Louvain algorithm ADD: community.detection apply community detection algorithms standalone function ADD: convenience function convert {igraph} object standard matrix (igraph2matrix) ADD: modularity compute standard (absolute values) signed modularity (implemented C) ADD: polychoric.matrix compute categorical correlations (implemented C); handles missing data (“pairwise” “listwise”) well empty cells joint frequency table (see documentation: ?polychoric.matrix) ADD: auto.correlate now computes correlations internally longer depends external functions; categorical correlations C based bi/polyserial correlations simplified vectorized version {polycor}’s polyserial; substantial computational gains (10-25x faster previous use {qgraph}’s cor_auto) ADD: network.estimation handle network estimation {EGAnet}; includes Bayesian GGM {BGGM} seamless incorporation BEGA ADD: community.unidimensional apply different unidimensional community detection approaches; makes unidimensional community detection modular flexible ADD: basic (internal) function handle network plots keep changes centralized single function; extends flexbility handle {GGally}’s ggnet2 arguments ADD: implemented reproducible parametric bootstrapping random sampling (see https://github.com/hfgolino/EGAnet/wiki/Reproducibility--PRNG details) ADD: implemented reproducible resampling bootstrapping random sampling (see https://github.com/hfgolino/EGAnet/wiki/Reproducibility--PRNG details) ADD: reproducible bootstrapping seed setting affect R’s seed RNG (user’s seed affected affected bootstrapping seeds) ADD: community.homogenize core function rather internal (previously homogenize.membership); 2.5x faster original version ADD: convert2tidygraph ggraph tidygraph support – thanks Dominique Makowski! ADD: “multilevel” plotting support hierEGA (used scores = \"network\" since factor scores don’t directly align EGA detected dimensions) ADD: internal functions shuffle shuffle_replace replace sample without replacement; performed C allows seed setting independent R (2-3x faster) ADD: xoshiro256++ PRNG higher quailty random number generation, permutation, resampling (~2x faster runif sample); based C ADD: Ziggurat method random normal generation top xoshiro256++ (2-5x faster rnorm); based C ADD: configural invariance added invariance (see Details section) ADD: genTEFI compute Generalized Total Entropy Fit Index solely; tefi serves general function compute TEFI *EGA classes REMOVE: signed.louvain reproducibility can sorted REMOVE: methods.section utils-EGAnet.methods.section avoid space issues ./R directory (1MB) UPDATE: EBICglasso.qgraph TMFG optimized; TMFG now 2x faster UPDATE: TMFG can now directly estimate GGM argument ‘partial = TRUE’; implements Local-Global Inversion method Barfuss et al. (2016) UPDATE: switched “Byte-Compile” (byte-compiles end user installs) UPDATE: EGA.estimate EGA core functions updated seamless use basic functions network.estimation community.* functions UPDATE: S3method updates EGA.estimate EGA provide estimation information UPDATE: EGA.fit updated compatiable updates EGA.estimate (optimizations implemented direct communtiy detection application unique solution finding) UPDATE: tefi updated several checks (slightly slower correlation matrix much faster raw data; includes data/matrix checks) UPDATE: entropyFit uses effective vectorization (5-7x faster) UPDATE: Embed glla made efficient includes internal glla_setup function avoid matrix calculations every participant sample dynEGA UPDATE: riEGA updated compatiable lower-level updates (slightly faster) UPDATE: wto updated fully vectorized (12x faster) UPDATE: totalCor totalCorMat updated fully vectorized (10x faster) UPDATE: implemented internal fast.data.frame efficient data frame initialization values data frame UPDATE: bootEGA allows flexibility add arguments EGA* functions; much faster due optimizations across functions (“resampling” nearly fast “parametric”) UPDATE: support EGA.fit riEGA added bootEGA (support hierEGA coming soon…) UPDATE: itemStability updated runs 2.5x faster due community.homogenize; S3methods added; greater flexibility available plotting much support (e.g., error checking) yet UPDATE: dimensionStability updated maintains speed gains itemStability UPDATE: dynEGA.ind.pop now calls dynEGA level = c(\"individual\", \"population\"); legacy dynEGA.ind.pop class maintained across ergodicity functions UPDATE: ergoInfo 2x faster UPDATE: jsd received several internal functions expedite procedures infoCluster jsd.ergoInfo UPDATE: net.loads now includes ‘loading.method’ argument allow reproducibility “BRM” implementation (version 1.2.3); “experimental” implementation includes rotations alternative signs cross-loading computation (potential future default) UPDATE: net.scores much simpler (internally) quicker; seamlessly integrates net.loads UPDATE: compare.EGA.plots faster, flexible, reliable comparing two plots UPDATE: hierEGA faster new S3 methods UPDATE: S3 plotting invariance UPDATE: hierEGA + bootEGA integration itemStability dimensionStability (includes full S3 methods) UPDATE: UVA supports legacy inital conception Christensen, Golino, Silvia (EJP, 2020) longer fix bugs related : manual variable selection, “adapt” “alpha” methods (warnings thrown) UPDATE: streamlined UVA (4x faster); fixed bugs related reverse coding issues UPDATE: tefi now handles EGA* function objects including hierEGA computes generalized TEFI UPDATE: documentation functions thoroughly revised provide better instruction use functions expected inputs DEPENDENCY: removed {network} longer used plotting; switched {sna} IMPORTS rather SUGGESTS DEPENDENCY: removed {rstudioapi} ‘Suggests’ used colortext used package DEPENDENCY: removed {matrixcalc} used trace matrix (internal function used) DEPENDENCY: {future} {future.apply} used parallelization (better integration); includes internal function check available memory break big data cases DEPENDENCY: {progress} {progressr} used progress bars (parallelization) DEPENDENCY: removed {psychTools} ‘Suggests’ used examples DEPENDENCY: removed {rmarkdown} ‘Suggests’ since wasn’t used across package","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-1251","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.5.1","title":"Changes in version 1.2.5.1","text":"FIX: cross-loading bug net.loads leading problems negative cross-loadings FIX: added psych::factor.scores scoring methods net.scores ADD: signed.louvain estimate Signed Louvain algorithm (implemented C)","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-125","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.5","title":"Changes in version 1.2.5","text":"ADD: most_common_tefi method EGA analyses","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-124","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.4","title":"Changes in version 1.2.4","text":"REMOVE: residualEGA removed favor riEGA (removes {OpenMx} dependency) ADD: rotations net.loads net.scores UPDATE: hierEGA outputs specified output (longer outputs possible consensus methods scores combinations – much faster)","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-123","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.3","title":"Changes in version 1.2.3","text":"CRAN release: 2022-09-05 FIX: many bug fixes related latest update; functions largely returned stable status UPDATE: Mac Linux parallelizations optimized UPDATE: documented examples efficient CRAN checks","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-121","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.1","title":"Changes in version 1.2.1","text":"FIX: bootEGA read bootstrap data (calling datalist .call leading perfect item stability) FIX: number possible colors expanded 70 (increased 40)","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-120","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.0","title":"Changes in version 1.2.0","text":"CRAN release: 2022-08-12 FIX: hex codes used EGA plots FIX: ordered = TRUE categorical data lavaan CFAs UPDATE: consesnsus clustering now used Louvain EGA UPDATE: print/summary S3methods standardized ADD/UPDATE: boot.ergoInfo achieved functional working order. Results can trusted suggest whether dynamic data possess ergodic property ADD: information theoretic clustering algorithm dynamic data available infoCluster REMOVE: “alpha” “adapt” options UVA (removes {fitdistrplus} dependency) REMOVE: {qgraph} plots longer available ADD: convert2igraph now core function ADD: Jensen-Shannon Divergence jsd determining (dis)similarity network strcutures ADD: riEGA, EGA.fit, hierEGA functionality bootEGA ADD: hierEGA functionality itemStability dimensionStability UPDATE: “louvain” algorithm used default unidimensionality check EGA INTERNAL: cleaned EGA EGA.estimate; streamlined code; user facing differences","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-110","dir":"Changelog","previous_headings":"","what":"Changes in version 1.1.0","title":"Changes in version 1.1.0","text":"CRAN release: 2022-05-10 FIX: CRAN note (class(object)). Replaced ((object)). FIX: bug EGA.estimate using TMFG network method. resulting EGA plot correct node names. FIX: bug UVA trying use sum score (reduce.method = \"sum\") automated procedure ADD: measurement invariance function testing differences network loadings groups UPDATE: itemStability now parameter structure user can specify given structure test stability. ADD: riEGA implementing random-intercept EGA wording effects ADD: hierEGA implementing hierarchical EGA FIX: consensus clustering Louvain algorithm ADD: louvain algorithm added optimization option using tefi","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-100","dir":"Changelog","previous_headings":"","what":"Changes in version 1.0.0","title":"Changes in version 1.0.0","text":"CRAN release: 2021-11-10 FIX: bug within bootEGA function type = \"resampling\". UPDATE: default undimensionality adjustment changed leading eigenvalue (see Christensen, Garrido, & Golino, 2021 https://doi.org/10.31234/osf.io/hz89e). Previous unidimensionality adjustment versions <= 0.9.8 can applied using uni.method = \"expand\" UPDATE: default UVA changed type = \"threshold\" UPDATE: UVA now automated using auto = TRUE DEFUNCT: dimStability longer supported. Instead, use dimensionStability REVAMP: itemStability recoded. Now includes error checking readable code FIX: bug plotting NA communities FIX: bug changing edge size ‘GGally’ plotting UPDATE: S3Methods EGA.fit plotting FIX: plotting parameters bootEGA FIX: redundancy output adhoc check UVA FIX: latent variable non-space separated entries UVA (reduce.method = \"latent\") UPDATE: UVA added methods.section UPDATE: neural network weights LCT (now tests factor small-world network models) UPDATE: citations UPDATE: added seed argument bootEGA reproduce results FIX: bug Rand index itemStability","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-098","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.8","title":"Changes in version 0.9.8","text":"CRAN release: 2021-02-16 UPDATE: Unidimensional check EGA expands correlation matrix (rather generating variables; much efficient) ADD: color_palette_EGA New EGA palettes plotting ggnet2 EGA network plots (see ?color_palette_EGA) ADD: UVA Unique Variable Analysis operates comprehensive handling variable redundancy multivariate data (see ?UVA) DEFUNCT: node.redundant, node.redundant.names, node.redundant.combine defunct next version. Please use UVA ADD: new function compute parametric Bootstrap Test Ergodicity Information Index (see ?boot.ergoInfo) ADD: basic Shiny functionality (EGA ) ADD: new function compute Monte-Carlo Test Ergodicity Information Index (see ?mctest.ergoInfo) ADD: new function compute Ergodicity Information Index (see ?ergoInfo) UPDATE: new plotting scheme using network GGally packages ADD: function produce automated Methods section several functions (see ?methods.section) UPDATE: bootEGA now implements updated EGA algorithm UPDATE: ega.wmt data (unidimensional) UPDATE: itemStability plot defaults (“GGally” color scheme) examples (manipulating plot) ADD: total correlation (see ?totalCor totalCorMat) ADD: correlation argument (corr) EGA, bootEGA, UVA FIX: GGally color palette 9 dimensions","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-097","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.7","title":"Changes in version 0.9.7","text":"UPDATE: LCT neural network weights updated (parametric relu activation function) FIX: naming EGA FIX: output network matrix EGA data input UPDATE: citation version UPDATE: node.redundant now provides full plot redundancies detected, descriptive statistics including critical value, central tendency descriptive statistics, distribution significant values determined (thanks Luis Garrido suggestion!)","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-096","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.6","title":"Changes in version 0.9.6","text":"CRAN release: 2020-07-13 UPDATE: LCT updated neural network implementation","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-095","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.5","title":"Changes in version 0.9.5","text":"ADD: loadings comparison test function added (see LCT) FIX: named community memberships itemStability dimStability UPDATE: plot, print, summary methods moved single .R files (effect user’s end) UPDATE: net.scores global score improved computes scores close CFA scores FIX: additional argument calls EGA.estimate (EGA extension) UPDATE: message EGA.estimate (EGA extension) reports ‘gamma’ ‘lambda.min.ratio’ arguments FIX: upper quantile output bootEGA FIX: minor bugs node.redundant, itemStability, net.loads","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-094","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.4","title":"Changes in version 0.9.4","text":"MAJOR UPDATE: dimStability now computes proportion exact dimension replications rather items replicate within dimension (latter information can still found output itemStability $mean.dim.rep) FIX: net.loads dimensions equal one number nodes network FIX: naming typo characters itemStability FIX: NAs dimStability FIX: weights network unidimensional structure EGA multidimensional structure UPDATE: Added new function simulate dynamic factor models simDFM UPDATE: added internal functions net.loads (see utils-net.loads) FIX: ordering names itemStability FIX: handling NA communities net.loads UPDATE: Added output average replication items dimension itemStability UPDATE: Revised ‘Network Scores’ vignette UPDATE: net.loads functionality (cleaned code) UPDATE: S3Methods net.loads FIX: net.scores negative loadings corrected","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-093","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.3","title":"Changes in version 0.9.3","text":"CRAN release: 2020-03-05 New function print, summary plot methods: dynEGA New functions: Embed glla","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-092","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.2","title":"Changes in version 0.9.2","text":"UPDATE: add latent variable scores comparison net.scores vignette UPDATE: node.redundant.combine sets loadings equal 1 two variables argument type = “latent”; warning also added type = “sum” FIX: node.redundant alpha types bug updated itemStability (bug fixes) updated node.redundant.combine (bug fixes, latent variable option) major bug fix net.loads: corrected loadings greater 1 many negative values added EGA.estimate clean EGA code allow future implementations different network estimation methods community detection algorithms updated EGA functionality: message ‘gamma’ value used EGA.estimate compatiability removed iterators dependency ordering name fix net.loads auto-adjusts y-axis label size itemStability plot based number nodes length node names net.loads adjusted larger values using absolute values applying sign afterwards reverse coding update net.loads node.redundant.combine bug fix reverse coding latent variables added Louvain community detection EGA functions EGAnet functionality updates node.redundant swapped arguments ‘type’ ‘method’ node.redundant function (fixed examples node.redundant functions) updated citation","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-090","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.0","title":"Changes in version 0.9.0","text":"CRAN release: 2020-01-18 updated list dependencies added ORCiDs Description file corrected ordering net.loads output corrected standard error bootEGA citation update added function dimStability compute dimensional stability added series functions node.redundant, facilitates detecting combining redundant nodes networks updated EGA.fit function, now correlation matrix can used well.","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-080","dir":"Changelog","previous_headings":"","what":"Changes in version 0.8.0","title":"Changes in version 0.8.0","text":"‘bootEGA’ now computes time bootstrap finished new functions ‘cmi’, ‘pmi’ ‘residualEGA’ added: ‘cmi’ computes conditional mutual information, ‘pmi’ computes partial mutual information residual EGA computes EGA network controlling wording effects new dataset ‘optimism’ added documentation functionality several functions updated","code":""},{"path":"https://r-ega.net/news/index.html","id":"changes-in-version-070","dir":"Changelog","previous_headings":"","what":"Changes in version 0.7.0","title":"Changes in version 0.7.0","text":"fixed ‘EGA’ bug ‘bootEGA’ function; updated ‘bootEGA’ documentation; added progress messages migrated ‘net.scores’ ‘net.loads’ ‘NetworkToolbox’ ‘EGAnet’ package functions ‘itemConfirm’ ‘itemIdent’ merged single function called, ‘itemStability’ fixed item ordering ‘itemStability’ output dimensions least greatest, colors match original community vector input, updated average standardized network loadings ‘net.loads’ function added datasets ‘ega.wmt’ ‘boot.wmt’ quick user-friendly examples (also removed ‘’) added package help page added package load message updated ‘itemStability’ algorithm (now can accept number ‘orig.wc’) enforced ‘0’ ‘1’ bounds plot","code":""}]
